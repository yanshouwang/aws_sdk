// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:ffi' as ffi;
import 'dart:isolate' show ReceivePort;

import 'package:jni/internal_helpers_for_jnigen.dart';
import 'package:jni/jni.dart' as jni;

/// from: aws.sdk.kotlin.services.s3.model.PutObjectResponse$Builder
class PutObjectResponse_Builder extends jni.JObject {
  @override
  late final jni.JObjType<PutObjectResponse_Builder> $type = type;

  PutObjectResponse_Builder.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(
      r'aws/sdk/kotlin/services/s3/model/PutObjectResponse$Builder');

  /// The type which includes information such as the signature of this class.
  static const type = $PutObjectResponse_BuilderType();
  static final _id_getBucketKeyEnabled = _class.instanceMethodId(
    r'getBucketKeyEnabled',
    r'()Ljava/lang/Boolean;',
  );

  static final _getBucketKeyEnabled = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final java.lang.Boolean getBucketKeyEnabled()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JBoolean getBucketKeyEnabled() {
    return _getBucketKeyEnabled(
            reference.pointer, _id_getBucketKeyEnabled as jni.JMethodIDPtr)
        .object(const jni.JBooleanType());
  }

  static final _id_setBucketKeyEnabled = _class.instanceMethodId(
    r'setBucketKeyEnabled',
    r'(Ljava/lang/Boolean;)V',
  );

  static final _setBucketKeyEnabled = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final void setBucketKeyEnabled(java.lang.Boolean boolean)
  void setBucketKeyEnabled(
    jni.JBoolean boolean,
  ) {
    _setBucketKeyEnabled(
            reference.pointer,
            _id_setBucketKeyEnabled as jni.JMethodIDPtr,
            boolean.reference.pointer)
        .check();
  }

  static final _id_getChecksumCrc32 = _class.instanceMethodId(
    r'getChecksumCrc32',
    r'()Ljava/lang/String;',
  );

  static final _getChecksumCrc32 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final java.lang.String getChecksumCrc32()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getChecksumCrc32() {
    return _getChecksumCrc32(
            reference.pointer, _id_getChecksumCrc32 as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_setChecksumCrc32 = _class.instanceMethodId(
    r'setChecksumCrc32',
    r'(Ljava/lang/String;)V',
  );

  static final _setChecksumCrc32 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final void setChecksumCrc32(java.lang.String string)
  void setChecksumCrc32(
    jni.JString string,
  ) {
    _setChecksumCrc32(reference.pointer,
            _id_setChecksumCrc32 as jni.JMethodIDPtr, string.reference.pointer)
        .check();
  }

  static final _id_getChecksumCrc32C = _class.instanceMethodId(
    r'getChecksumCrc32C',
    r'()Ljava/lang/String;',
  );

  static final _getChecksumCrc32C = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final java.lang.String getChecksumCrc32C()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getChecksumCrc32C() {
    return _getChecksumCrc32C(
            reference.pointer, _id_getChecksumCrc32C as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_setChecksumCrc32C = _class.instanceMethodId(
    r'setChecksumCrc32C',
    r'(Ljava/lang/String;)V',
  );

  static final _setChecksumCrc32C = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final void setChecksumCrc32C(java.lang.String string)
  void setChecksumCrc32C(
    jni.JString string,
  ) {
    _setChecksumCrc32C(reference.pointer,
            _id_setChecksumCrc32C as jni.JMethodIDPtr, string.reference.pointer)
        .check();
  }

  static final _id_getChecksumSha1 = _class.instanceMethodId(
    r'getChecksumSha1',
    r'()Ljava/lang/String;',
  );

  static final _getChecksumSha1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final java.lang.String getChecksumSha1()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getChecksumSha1() {
    return _getChecksumSha1(
            reference.pointer, _id_getChecksumSha1 as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_setChecksumSha1 = _class.instanceMethodId(
    r'setChecksumSha1',
    r'(Ljava/lang/String;)V',
  );

  static final _setChecksumSha1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final void setChecksumSha1(java.lang.String string)
  void setChecksumSha1(
    jni.JString string,
  ) {
    _setChecksumSha1(reference.pointer, _id_setChecksumSha1 as jni.JMethodIDPtr,
            string.reference.pointer)
        .check();
  }

  static final _id_getChecksumSha256 = _class.instanceMethodId(
    r'getChecksumSha256',
    r'()Ljava/lang/String;',
  );

  static final _getChecksumSha256 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final java.lang.String getChecksumSha256()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getChecksumSha256() {
    return _getChecksumSha256(
            reference.pointer, _id_getChecksumSha256 as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_setChecksumSha256 = _class.instanceMethodId(
    r'setChecksumSha256',
    r'(Ljava/lang/String;)V',
  );

  static final _setChecksumSha256 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final void setChecksumSha256(java.lang.String string)
  void setChecksumSha256(
    jni.JString string,
  ) {
    _setChecksumSha256(reference.pointer,
            _id_setChecksumSha256 as jni.JMethodIDPtr, string.reference.pointer)
        .check();
  }

  static final _id_getETag = _class.instanceMethodId(
    r'getETag',
    r'()Ljava/lang/String;',
  );

  static final _getETag = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final java.lang.String getETag()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getETag() {
    return _getETag(reference.pointer, _id_getETag as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_setETag = _class.instanceMethodId(
    r'setETag',
    r'(Ljava/lang/String;)V',
  );

  static final _setETag = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final void setETag(java.lang.String string)
  void setETag(
    jni.JString string,
  ) {
    _setETag(reference.pointer, _id_setETag as jni.JMethodIDPtr,
            string.reference.pointer)
        .check();
  }

  static final _id_getExpiration = _class.instanceMethodId(
    r'getExpiration',
    r'()Ljava/lang/String;',
  );

  static final _getExpiration = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final java.lang.String getExpiration()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getExpiration() {
    return _getExpiration(
            reference.pointer, _id_getExpiration as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_setExpiration = _class.instanceMethodId(
    r'setExpiration',
    r'(Ljava/lang/String;)V',
  );

  static final _setExpiration = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final void setExpiration(java.lang.String string)
  void setExpiration(
    jni.JString string,
  ) {
    _setExpiration(reference.pointer, _id_setExpiration as jni.JMethodIDPtr,
            string.reference.pointer)
        .check();
  }

  static final _id_getRequestCharged = _class.instanceMethodId(
    r'getRequestCharged',
    r'()Laws/sdk/kotlin/services/s3/model/RequestCharged;',
  );

  static final _getRequestCharged = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final aws.sdk.kotlin.services.s3.model.RequestCharged getRequestCharged()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getRequestCharged() {
    return _getRequestCharged(
            reference.pointer, _id_getRequestCharged as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_setRequestCharged = _class.instanceMethodId(
    r'setRequestCharged',
    r'(Laws/sdk/kotlin/services/s3/model/RequestCharged;)V',
  );

  static final _setRequestCharged = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final void setRequestCharged(aws.sdk.kotlin.services.s3.model.RequestCharged requestCharged)
  void setRequestCharged(
    jni.JObject requestCharged,
  ) {
    _setRequestCharged(
            reference.pointer,
            _id_setRequestCharged as jni.JMethodIDPtr,
            requestCharged.reference.pointer)
        .check();
  }

  static final _id_getServerSideEncryption = _class.instanceMethodId(
    r'getServerSideEncryption',
    r'()Laws/sdk/kotlin/services/s3/model/ServerSideEncryption;',
  );

  static final _getServerSideEncryption = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final aws.sdk.kotlin.services.s3.model.ServerSideEncryption getServerSideEncryption()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getServerSideEncryption() {
    return _getServerSideEncryption(
            reference.pointer, _id_getServerSideEncryption as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_setServerSideEncryption = _class.instanceMethodId(
    r'setServerSideEncryption',
    r'(Laws/sdk/kotlin/services/s3/model/ServerSideEncryption;)V',
  );

  static final _setServerSideEncryption = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final void setServerSideEncryption(aws.sdk.kotlin.services.s3.model.ServerSideEncryption serverSideEncryption)
  void setServerSideEncryption(
    jni.JObject serverSideEncryption,
  ) {
    _setServerSideEncryption(
            reference.pointer,
            _id_setServerSideEncryption as jni.JMethodIDPtr,
            serverSideEncryption.reference.pointer)
        .check();
  }

  static final _id_getSseCustomerAlgorithm = _class.instanceMethodId(
    r'getSseCustomerAlgorithm',
    r'()Ljava/lang/String;',
  );

  static final _getSseCustomerAlgorithm = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final java.lang.String getSseCustomerAlgorithm()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getSseCustomerAlgorithm() {
    return _getSseCustomerAlgorithm(
            reference.pointer, _id_getSseCustomerAlgorithm as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_setSseCustomerAlgorithm = _class.instanceMethodId(
    r'setSseCustomerAlgorithm',
    r'(Ljava/lang/String;)V',
  );

  static final _setSseCustomerAlgorithm = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final void setSseCustomerAlgorithm(java.lang.String string)
  void setSseCustomerAlgorithm(
    jni.JString string,
  ) {
    _setSseCustomerAlgorithm(
            reference.pointer,
            _id_setSseCustomerAlgorithm as jni.JMethodIDPtr,
            string.reference.pointer)
        .check();
  }

  static final _id_getSseCustomerKeyMd5 = _class.instanceMethodId(
    r'getSseCustomerKeyMd5',
    r'()Ljava/lang/String;',
  );

  static final _getSseCustomerKeyMd5 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final java.lang.String getSseCustomerKeyMd5()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getSseCustomerKeyMd5() {
    return _getSseCustomerKeyMd5(
            reference.pointer, _id_getSseCustomerKeyMd5 as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_setSseCustomerKeyMd5 = _class.instanceMethodId(
    r'setSseCustomerKeyMd5',
    r'(Ljava/lang/String;)V',
  );

  static final _setSseCustomerKeyMd5 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final void setSseCustomerKeyMd5(java.lang.String string)
  void setSseCustomerKeyMd5(
    jni.JString string,
  ) {
    _setSseCustomerKeyMd5(
            reference.pointer,
            _id_setSseCustomerKeyMd5 as jni.JMethodIDPtr,
            string.reference.pointer)
        .check();
  }

  static final _id_getSsekmsEncryptionContext = _class.instanceMethodId(
    r'getSsekmsEncryptionContext',
    r'()Ljava/lang/String;',
  );

  static final _getSsekmsEncryptionContext = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final java.lang.String getSsekmsEncryptionContext()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getSsekmsEncryptionContext() {
    return _getSsekmsEncryptionContext(reference.pointer,
            _id_getSsekmsEncryptionContext as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_setSsekmsEncryptionContext = _class.instanceMethodId(
    r'setSsekmsEncryptionContext',
    r'(Ljava/lang/String;)V',
  );

  static final _setSsekmsEncryptionContext = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final void setSsekmsEncryptionContext(java.lang.String string)
  void setSsekmsEncryptionContext(
    jni.JString string,
  ) {
    _setSsekmsEncryptionContext(
            reference.pointer,
            _id_setSsekmsEncryptionContext as jni.JMethodIDPtr,
            string.reference.pointer)
        .check();
  }

  static final _id_getSsekmsKeyId = _class.instanceMethodId(
    r'getSsekmsKeyId',
    r'()Ljava/lang/String;',
  );

  static final _getSsekmsKeyId = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final java.lang.String getSsekmsKeyId()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getSsekmsKeyId() {
    return _getSsekmsKeyId(
            reference.pointer, _id_getSsekmsKeyId as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_setSsekmsKeyId = _class.instanceMethodId(
    r'setSsekmsKeyId',
    r'(Ljava/lang/String;)V',
  );

  static final _setSsekmsKeyId = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final void setSsekmsKeyId(java.lang.String string)
  void setSsekmsKeyId(
    jni.JString string,
  ) {
    _setSsekmsKeyId(reference.pointer, _id_setSsekmsKeyId as jni.JMethodIDPtr,
            string.reference.pointer)
        .check();
  }

  static final _id_getVersionId = _class.instanceMethodId(
    r'getVersionId',
    r'()Ljava/lang/String;',
  );

  static final _getVersionId = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final java.lang.String getVersionId()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getVersionId() {
    return _getVersionId(
            reference.pointer, _id_getVersionId as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_setVersionId = _class.instanceMethodId(
    r'setVersionId',
    r'(Ljava/lang/String;)V',
  );

  static final _setVersionId = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final void setVersionId(java.lang.String string)
  void setVersionId(
    jni.JString string,
  ) {
    _setVersionId(reference.pointer, _id_setVersionId as jni.JMethodIDPtr,
            string.reference.pointer)
        .check();
  }

  static final _id_new0 = _class.constructorId(
    r'()V',
  );

  static final _new0 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_NewObject')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public void <init>()
  /// The returned object must be released after use, by calling the [release] method.
  factory PutObjectResponse_Builder() {
    return PutObjectResponse_Builder.fromReference(
        _new0(_class.reference.pointer, _id_new0 as jni.JMethodIDPtr)
            .reference);
  }

  static final _id_new1 = _class.constructorId(
    r'(Laws/sdk/kotlin/services/s3/model/PutObjectResponse;)V',
  );

  static final _new1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_NewObject')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(aws.sdk.kotlin.services.s3.model.PutObjectResponse putObjectResponse)
  /// The returned object must be released after use, by calling the [release] method.
  factory PutObjectResponse_Builder.new1(
    PutObjectResponse putObjectResponse,
  ) {
    return PutObjectResponse_Builder.fromReference(_new1(
            _class.reference.pointer,
            _id_new1 as jni.JMethodIDPtr,
            putObjectResponse.reference.pointer)
        .reference);
  }

  static final _id_build = _class.instanceMethodId(
    r'build',
    r'()Laws/sdk/kotlin/services/s3/model/PutObjectResponse;',
  );

  static final _build = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final aws.sdk.kotlin.services.s3.model.PutObjectResponse build()
  /// The returned object must be released after use, by calling the [release] method.
  PutObjectResponse build() {
    return _build(reference.pointer, _id_build as jni.JMethodIDPtr)
        .object(const $PutObjectResponseType());
  }
}

final class $PutObjectResponse_BuilderType
    extends jni.JObjType<PutObjectResponse_Builder> {
  const $PutObjectResponse_BuilderType();

  @override
  String get signature =>
      r'Laws/sdk/kotlin/services/s3/model/PutObjectResponse$Builder;';

  @override
  PutObjectResponse_Builder fromReference(jni.JReference reference) =>
      PutObjectResponse_Builder.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($PutObjectResponse_BuilderType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($PutObjectResponse_BuilderType) &&
        other is $PutObjectResponse_BuilderType;
  }
}

/// from: aws.sdk.kotlin.services.s3.model.PutObjectResponse$Companion
class PutObjectResponse_Companion extends jni.JObject {
  @override
  late final jni.JObjType<PutObjectResponse_Companion> $type = type;

  PutObjectResponse_Companion.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(
      r'aws/sdk/kotlin/services/s3/model/PutObjectResponse$Companion');

  /// The type which includes information such as the signature of this class.
  static const type = $PutObjectResponse_CompanionType();
  static final _id_invoke = _class.instanceMethodId(
    r'invoke',
    r'(Lkotlin/jvm/functions/Function1;)Laws/sdk/kotlin/services/s3/model/PutObjectResponse;',
  );

  static final _invoke = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final aws.sdk.kotlin.services.s3.model.PutObjectResponse invoke(kotlin.jvm.functions.Function1 function1)
  /// The returned object must be released after use, by calling the [release] method.
  PutObjectResponse invoke(
    jni.JObject function1,
  ) {
    return _invoke(reference.pointer, _id_invoke as jni.JMethodIDPtr,
            function1.reference.pointer)
        .object(const $PutObjectResponseType());
  }

  static final _id_new0 = _class.constructorId(
    r'(Lkotlin/jvm/internal/DefaultConstructorMarker;)V',
  );

  static final _new0 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_NewObject')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(kotlin.jvm.internal.DefaultConstructorMarker defaultConstructorMarker)
  /// The returned object must be released after use, by calling the [release] method.
  factory PutObjectResponse_Companion(
    jni.JObject defaultConstructorMarker,
  ) {
    return PutObjectResponse_Companion.fromReference(_new0(
            _class.reference.pointer,
            _id_new0 as jni.JMethodIDPtr,
            defaultConstructorMarker.reference.pointer)
        .reference);
  }
}

final class $PutObjectResponse_CompanionType
    extends jni.JObjType<PutObjectResponse_Companion> {
  const $PutObjectResponse_CompanionType();

  @override
  String get signature =>
      r'Laws/sdk/kotlin/services/s3/model/PutObjectResponse$Companion;';

  @override
  PutObjectResponse_Companion fromReference(jni.JReference reference) =>
      PutObjectResponse_Companion.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($PutObjectResponse_CompanionType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($PutObjectResponse_CompanionType) &&
        other is $PutObjectResponse_CompanionType;
  }
}

/// from: aws.sdk.kotlin.services.s3.model.PutObjectResponse
class PutObjectResponse extends jni.JObject {
  @override
  late final jni.JObjType<PutObjectResponse> $type = type;

  PutObjectResponse.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class =
      jni.JClass.forName(r'aws/sdk/kotlin/services/s3/model/PutObjectResponse');

  /// The type which includes information such as the signature of this class.
  static const type = $PutObjectResponseType();
  static final _id_Companion = _class.staticFieldId(
    r'Companion',
    r'Laws/sdk/kotlin/services/s3/model/PutObjectResponse$Companion;',
  );

  /// from: static public final aws.sdk.kotlin.services.s3.model.PutObjectResponse$Companion Companion
  /// The returned object must be released after use, by calling the [release] method.
  static PutObjectResponse_Companion get Companion =>
      _id_Companion.get(_class, const $PutObjectResponse_CompanionType());

  static final _id_getBucketKeyEnabled = _class.instanceMethodId(
    r'getBucketKeyEnabled',
    r'()Ljava/lang/Boolean;',
  );

  static final _getBucketKeyEnabled = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final java.lang.Boolean getBucketKeyEnabled()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JBoolean getBucketKeyEnabled() {
    return _getBucketKeyEnabled(
            reference.pointer, _id_getBucketKeyEnabled as jni.JMethodIDPtr)
        .object(const jni.JBooleanType());
  }

  static final _id_getChecksumCrc32 = _class.instanceMethodId(
    r'getChecksumCrc32',
    r'()Ljava/lang/String;',
  );

  static final _getChecksumCrc32 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final java.lang.String getChecksumCrc32()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getChecksumCrc32() {
    return _getChecksumCrc32(
            reference.pointer, _id_getChecksumCrc32 as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_getChecksumCrc32C = _class.instanceMethodId(
    r'getChecksumCrc32C',
    r'()Ljava/lang/String;',
  );

  static final _getChecksumCrc32C = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final java.lang.String getChecksumCrc32C()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getChecksumCrc32C() {
    return _getChecksumCrc32C(
            reference.pointer, _id_getChecksumCrc32C as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_getChecksumSha1 = _class.instanceMethodId(
    r'getChecksumSha1',
    r'()Ljava/lang/String;',
  );

  static final _getChecksumSha1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final java.lang.String getChecksumSha1()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getChecksumSha1() {
    return _getChecksumSha1(
            reference.pointer, _id_getChecksumSha1 as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_getChecksumSha256 = _class.instanceMethodId(
    r'getChecksumSha256',
    r'()Ljava/lang/String;',
  );

  static final _getChecksumSha256 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final java.lang.String getChecksumSha256()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getChecksumSha256() {
    return _getChecksumSha256(
            reference.pointer, _id_getChecksumSha256 as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_getETag = _class.instanceMethodId(
    r'getETag',
    r'()Ljava/lang/String;',
  );

  static final _getETag = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final java.lang.String getETag()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getETag() {
    return _getETag(reference.pointer, _id_getETag as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_getExpiration = _class.instanceMethodId(
    r'getExpiration',
    r'()Ljava/lang/String;',
  );

  static final _getExpiration = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final java.lang.String getExpiration()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getExpiration() {
    return _getExpiration(
            reference.pointer, _id_getExpiration as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_getRequestCharged = _class.instanceMethodId(
    r'getRequestCharged',
    r'()Laws/sdk/kotlin/services/s3/model/RequestCharged;',
  );

  static final _getRequestCharged = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final aws.sdk.kotlin.services.s3.model.RequestCharged getRequestCharged()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getRequestCharged() {
    return _getRequestCharged(
            reference.pointer, _id_getRequestCharged as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_getServerSideEncryption = _class.instanceMethodId(
    r'getServerSideEncryption',
    r'()Laws/sdk/kotlin/services/s3/model/ServerSideEncryption;',
  );

  static final _getServerSideEncryption = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final aws.sdk.kotlin.services.s3.model.ServerSideEncryption getServerSideEncryption()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getServerSideEncryption() {
    return _getServerSideEncryption(
            reference.pointer, _id_getServerSideEncryption as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_getSseCustomerAlgorithm = _class.instanceMethodId(
    r'getSseCustomerAlgorithm',
    r'()Ljava/lang/String;',
  );

  static final _getSseCustomerAlgorithm = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final java.lang.String getSseCustomerAlgorithm()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getSseCustomerAlgorithm() {
    return _getSseCustomerAlgorithm(
            reference.pointer, _id_getSseCustomerAlgorithm as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_getSseCustomerKeyMd5 = _class.instanceMethodId(
    r'getSseCustomerKeyMd5',
    r'()Ljava/lang/String;',
  );

  static final _getSseCustomerKeyMd5 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final java.lang.String getSseCustomerKeyMd5()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getSseCustomerKeyMd5() {
    return _getSseCustomerKeyMd5(
            reference.pointer, _id_getSseCustomerKeyMd5 as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_getSsekmsEncryptionContext = _class.instanceMethodId(
    r'getSsekmsEncryptionContext',
    r'()Ljava/lang/String;',
  );

  static final _getSsekmsEncryptionContext = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final java.lang.String getSsekmsEncryptionContext()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getSsekmsEncryptionContext() {
    return _getSsekmsEncryptionContext(reference.pointer,
            _id_getSsekmsEncryptionContext as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_getSsekmsKeyId = _class.instanceMethodId(
    r'getSsekmsKeyId',
    r'()Ljava/lang/String;',
  );

  static final _getSsekmsKeyId = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final java.lang.String getSsekmsKeyId()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getSsekmsKeyId() {
    return _getSsekmsKeyId(
            reference.pointer, _id_getSsekmsKeyId as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_getVersionId = _class.instanceMethodId(
    r'getVersionId',
    r'()Ljava/lang/String;',
  );

  static final _getVersionId = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final java.lang.String getVersionId()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getVersionId() {
    return _getVersionId(
            reference.pointer, _id_getVersionId as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_toString1 = _class.instanceMethodId(
    r'toString',
    r'()Ljava/lang/String;',
  );

  static final _toString1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public java.lang.String toString()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString toString1() {
    return _toString1(reference.pointer, _id_toString1 as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_hashCode1 = _class.instanceMethodId(
    r'hashCode',
    r'()I',
  );

  static final _hashCode1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public int hashCode()
  int hashCode1() {
    return _hashCode1(reference.pointer, _id_hashCode1 as jni.JMethodIDPtr)
        .integer;
  }

  static final _id_equals = _class.instanceMethodId(
    r'equals',
    r'(Ljava/lang/Object;)Z',
  );

  static final _equals = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public boolean equals(java.lang.Object object)
  bool equals(
    jni.JObject object,
  ) {
    return _equals(reference.pointer, _id_equals as jni.JMethodIDPtr,
            object.reference.pointer)
        .boolean;
  }

  static final _id_copy = _class.instanceMethodId(
    r'copy',
    r'(Lkotlin/jvm/functions/Function1;)Laws/sdk/kotlin/services/s3/model/PutObjectResponse;',
  );

  static final _copy = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final aws.sdk.kotlin.services.s3.model.PutObjectResponse copy(kotlin.jvm.functions.Function1 function1)
  /// The returned object must be released after use, by calling the [release] method.
  PutObjectResponse copy(
    jni.JObject function1,
  ) {
    return _copy(reference.pointer, _id_copy as jni.JMethodIDPtr,
            function1.reference.pointer)
        .object(const $PutObjectResponseType());
  }

  static final _id_new0 = _class.constructorId(
    r'(Laws/sdk/kotlin/services/s3/model/PutObjectResponse$Builder;Lkotlin/jvm/internal/DefaultConstructorMarker;)V',
  );

  static final _new0 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_NewObject')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(aws.sdk.kotlin.services.s3.model.PutObjectResponse$Builder builder, kotlin.jvm.internal.DefaultConstructorMarker defaultConstructorMarker)
  /// The returned object must be released after use, by calling the [release] method.
  factory PutObjectResponse(
    PutObjectResponse_Builder builder,
    jni.JObject defaultConstructorMarker,
  ) {
    return PutObjectResponse.fromReference(_new0(
            _class.reference.pointer,
            _id_new0 as jni.JMethodIDPtr,
            builder.reference.pointer,
            defaultConstructorMarker.reference.pointer)
        .reference);
  }
}

final class $PutObjectResponseType extends jni.JObjType<PutObjectResponse> {
  const $PutObjectResponseType();

  @override
  String get signature =>
      r'Laws/sdk/kotlin/services/s3/model/PutObjectResponse;';

  @override
  PutObjectResponse fromReference(jni.JReference reference) =>
      PutObjectResponse.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($PutObjectResponseType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($PutObjectResponseType) &&
        other is $PutObjectResponseType;
  }
}
