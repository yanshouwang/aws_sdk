// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:ffi' as ffi;
import 'dart:isolate' show ReceivePort;

import 'package:jni/internal_helpers_for_jnigen.dart';
import 'package:jni/jni.dart' as jni;

import '../../../../../smithy/kotlin/runtime/content/ByteStream.dart'
    as bytestream_;

/// from: aws.sdk.kotlin.services.s3.model.PutObjectRequest$Builder
class PutObjectRequest_Builder extends jni.JObject {
  @override
  late final jni.JObjType<PutObjectRequest_Builder> $type = type;

  PutObjectRequest_Builder.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(
      r'aws/sdk/kotlin/services/s3/model/PutObjectRequest$Builder');

  /// The type which includes information such as the signature of this class.
  static const type = $PutObjectRequest_BuilderType();
  static final _id_getAcl = _class.instanceMethodId(
    r'getAcl',
    r'()Laws/sdk/kotlin/services/s3/model/ObjectCannedAcl;',
  );

  static final _getAcl = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final aws.sdk.kotlin.services.s3.model.ObjectCannedAcl getAcl()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getAcl() {
    return _getAcl(reference.pointer, _id_getAcl as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_setAcl = _class.instanceMethodId(
    r'setAcl',
    r'(Laws/sdk/kotlin/services/s3/model/ObjectCannedAcl;)V',
  );

  static final _setAcl = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final void setAcl(aws.sdk.kotlin.services.s3.model.ObjectCannedAcl objectCannedAcl)
  void setAcl(
    jni.JObject objectCannedAcl,
  ) {
    _setAcl(reference.pointer, _id_setAcl as jni.JMethodIDPtr,
            objectCannedAcl.reference.pointer)
        .check();
  }

  static final _id_getBody = _class.instanceMethodId(
    r'getBody',
    r'()Laws/smithy/kotlin/runtime/content/ByteStream;',
  );

  static final _getBody = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final aws.smithy.kotlin.runtime.content.ByteStream getBody()
  /// The returned object must be released after use, by calling the [release] method.
  bytestream_.ByteStream getBody() {
    return _getBody(reference.pointer, _id_getBody as jni.JMethodIDPtr)
        .object(const bytestream_.$ByteStreamType());
  }

  static final _id_setBody = _class.instanceMethodId(
    r'setBody',
    r'(Laws/smithy/kotlin/runtime/content/ByteStream;)V',
  );

  static final _setBody = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final void setBody(aws.smithy.kotlin.runtime.content.ByteStream byteStream)
  void setBody(
    bytestream_.ByteStream byteStream,
  ) {
    _setBody(reference.pointer, _id_setBody as jni.JMethodIDPtr,
            byteStream.reference.pointer)
        .check();
  }

  static final _id_getBucket = _class.instanceMethodId(
    r'getBucket',
    r'()Ljava/lang/String;',
  );

  static final _getBucket = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final java.lang.String getBucket()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getBucket() {
    return _getBucket(reference.pointer, _id_getBucket as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_setBucket = _class.instanceMethodId(
    r'setBucket',
    r'(Ljava/lang/String;)V',
  );

  static final _setBucket = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final void setBucket(java.lang.String string)
  void setBucket(
    jni.JString string,
  ) {
    _setBucket(reference.pointer, _id_setBucket as jni.JMethodIDPtr,
            string.reference.pointer)
        .check();
  }

  static final _id_getBucketKeyEnabled = _class.instanceMethodId(
    r'getBucketKeyEnabled',
    r'()Ljava/lang/Boolean;',
  );

  static final _getBucketKeyEnabled = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final java.lang.Boolean getBucketKeyEnabled()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JBoolean getBucketKeyEnabled() {
    return _getBucketKeyEnabled(
            reference.pointer, _id_getBucketKeyEnabled as jni.JMethodIDPtr)
        .object(const jni.JBooleanType());
  }

  static final _id_setBucketKeyEnabled = _class.instanceMethodId(
    r'setBucketKeyEnabled',
    r'(Ljava/lang/Boolean;)V',
  );

  static final _setBucketKeyEnabled = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final void setBucketKeyEnabled(java.lang.Boolean boolean)
  void setBucketKeyEnabled(
    jni.JBoolean boolean,
  ) {
    _setBucketKeyEnabled(
            reference.pointer,
            _id_setBucketKeyEnabled as jni.JMethodIDPtr,
            boolean.reference.pointer)
        .check();
  }

  static final _id_getCacheControl = _class.instanceMethodId(
    r'getCacheControl',
    r'()Ljava/lang/String;',
  );

  static final _getCacheControl = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final java.lang.String getCacheControl()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getCacheControl() {
    return _getCacheControl(
            reference.pointer, _id_getCacheControl as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_setCacheControl = _class.instanceMethodId(
    r'setCacheControl',
    r'(Ljava/lang/String;)V',
  );

  static final _setCacheControl = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final void setCacheControl(java.lang.String string)
  void setCacheControl(
    jni.JString string,
  ) {
    _setCacheControl(reference.pointer, _id_setCacheControl as jni.JMethodIDPtr,
            string.reference.pointer)
        .check();
  }

  static final _id_getChecksumAlgorithm = _class.instanceMethodId(
    r'getChecksumAlgorithm',
    r'()Laws/sdk/kotlin/services/s3/model/ChecksumAlgorithm;',
  );

  static final _getChecksumAlgorithm = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final aws.sdk.kotlin.services.s3.model.ChecksumAlgorithm getChecksumAlgorithm()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getChecksumAlgorithm() {
    return _getChecksumAlgorithm(
            reference.pointer, _id_getChecksumAlgorithm as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_setChecksumAlgorithm = _class.instanceMethodId(
    r'setChecksumAlgorithm',
    r'(Laws/sdk/kotlin/services/s3/model/ChecksumAlgorithm;)V',
  );

  static final _setChecksumAlgorithm = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final void setChecksumAlgorithm(aws.sdk.kotlin.services.s3.model.ChecksumAlgorithm checksumAlgorithm)
  void setChecksumAlgorithm(
    jni.JObject checksumAlgorithm,
  ) {
    _setChecksumAlgorithm(
            reference.pointer,
            _id_setChecksumAlgorithm as jni.JMethodIDPtr,
            checksumAlgorithm.reference.pointer)
        .check();
  }

  static final _id_getChecksumCrc32 = _class.instanceMethodId(
    r'getChecksumCrc32',
    r'()Ljava/lang/String;',
  );

  static final _getChecksumCrc32 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final java.lang.String getChecksumCrc32()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getChecksumCrc32() {
    return _getChecksumCrc32(
            reference.pointer, _id_getChecksumCrc32 as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_setChecksumCrc32 = _class.instanceMethodId(
    r'setChecksumCrc32',
    r'(Ljava/lang/String;)V',
  );

  static final _setChecksumCrc32 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final void setChecksumCrc32(java.lang.String string)
  void setChecksumCrc32(
    jni.JString string,
  ) {
    _setChecksumCrc32(reference.pointer,
            _id_setChecksumCrc32 as jni.JMethodIDPtr, string.reference.pointer)
        .check();
  }

  static final _id_getChecksumCrc32C = _class.instanceMethodId(
    r'getChecksumCrc32C',
    r'()Ljava/lang/String;',
  );

  static final _getChecksumCrc32C = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final java.lang.String getChecksumCrc32C()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getChecksumCrc32C() {
    return _getChecksumCrc32C(
            reference.pointer, _id_getChecksumCrc32C as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_setChecksumCrc32C = _class.instanceMethodId(
    r'setChecksumCrc32C',
    r'(Ljava/lang/String;)V',
  );

  static final _setChecksumCrc32C = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final void setChecksumCrc32C(java.lang.String string)
  void setChecksumCrc32C(
    jni.JString string,
  ) {
    _setChecksumCrc32C(reference.pointer,
            _id_setChecksumCrc32C as jni.JMethodIDPtr, string.reference.pointer)
        .check();
  }

  static final _id_getChecksumSha1 = _class.instanceMethodId(
    r'getChecksumSha1',
    r'()Ljava/lang/String;',
  );

  static final _getChecksumSha1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final java.lang.String getChecksumSha1()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getChecksumSha1() {
    return _getChecksumSha1(
            reference.pointer, _id_getChecksumSha1 as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_setChecksumSha1 = _class.instanceMethodId(
    r'setChecksumSha1',
    r'(Ljava/lang/String;)V',
  );

  static final _setChecksumSha1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final void setChecksumSha1(java.lang.String string)
  void setChecksumSha1(
    jni.JString string,
  ) {
    _setChecksumSha1(reference.pointer, _id_setChecksumSha1 as jni.JMethodIDPtr,
            string.reference.pointer)
        .check();
  }

  static final _id_getChecksumSha256 = _class.instanceMethodId(
    r'getChecksumSha256',
    r'()Ljava/lang/String;',
  );

  static final _getChecksumSha256 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final java.lang.String getChecksumSha256()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getChecksumSha256() {
    return _getChecksumSha256(
            reference.pointer, _id_getChecksumSha256 as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_setChecksumSha256 = _class.instanceMethodId(
    r'setChecksumSha256',
    r'(Ljava/lang/String;)V',
  );

  static final _setChecksumSha256 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final void setChecksumSha256(java.lang.String string)
  void setChecksumSha256(
    jni.JString string,
  ) {
    _setChecksumSha256(reference.pointer,
            _id_setChecksumSha256 as jni.JMethodIDPtr, string.reference.pointer)
        .check();
  }

  static final _id_getContentDisposition = _class.instanceMethodId(
    r'getContentDisposition',
    r'()Ljava/lang/String;',
  );

  static final _getContentDisposition = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final java.lang.String getContentDisposition()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getContentDisposition() {
    return _getContentDisposition(
            reference.pointer, _id_getContentDisposition as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_setContentDisposition = _class.instanceMethodId(
    r'setContentDisposition',
    r'(Ljava/lang/String;)V',
  );

  static final _setContentDisposition = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final void setContentDisposition(java.lang.String string)
  void setContentDisposition(
    jni.JString string,
  ) {
    _setContentDisposition(
            reference.pointer,
            _id_setContentDisposition as jni.JMethodIDPtr,
            string.reference.pointer)
        .check();
  }

  static final _id_getContentEncoding = _class.instanceMethodId(
    r'getContentEncoding',
    r'()Ljava/lang/String;',
  );

  static final _getContentEncoding = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final java.lang.String getContentEncoding()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getContentEncoding() {
    return _getContentEncoding(
            reference.pointer, _id_getContentEncoding as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_setContentEncoding = _class.instanceMethodId(
    r'setContentEncoding',
    r'(Ljava/lang/String;)V',
  );

  static final _setContentEncoding = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final void setContentEncoding(java.lang.String string)
  void setContentEncoding(
    jni.JString string,
  ) {
    _setContentEncoding(
            reference.pointer,
            _id_setContentEncoding as jni.JMethodIDPtr,
            string.reference.pointer)
        .check();
  }

  static final _id_getContentLanguage = _class.instanceMethodId(
    r'getContentLanguage',
    r'()Ljava/lang/String;',
  );

  static final _getContentLanguage = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final java.lang.String getContentLanguage()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getContentLanguage() {
    return _getContentLanguage(
            reference.pointer, _id_getContentLanguage as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_setContentLanguage = _class.instanceMethodId(
    r'setContentLanguage',
    r'(Ljava/lang/String;)V',
  );

  static final _setContentLanguage = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final void setContentLanguage(java.lang.String string)
  void setContentLanguage(
    jni.JString string,
  ) {
    _setContentLanguage(
            reference.pointer,
            _id_setContentLanguage as jni.JMethodIDPtr,
            string.reference.pointer)
        .check();
  }

  static final _id_getContentLength = _class.instanceMethodId(
    r'getContentLength',
    r'()Ljava/lang/Long;',
  );

  static final _getContentLength = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final java.lang.Long getContentLength()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JLong getContentLength() {
    return _getContentLength(
            reference.pointer, _id_getContentLength as jni.JMethodIDPtr)
        .object(const jni.JLongType());
  }

  static final _id_setContentLength = _class.instanceMethodId(
    r'setContentLength',
    r'(Ljava/lang/Long;)V',
  );

  static final _setContentLength = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final void setContentLength(java.lang.Long long)
  void setContentLength(
    jni.JLong long,
  ) {
    _setContentLength(reference.pointer,
            _id_setContentLength as jni.JMethodIDPtr, long.reference.pointer)
        .check();
  }

  static final _id_getContentMd5 = _class.instanceMethodId(
    r'getContentMd5',
    r'()Ljava/lang/String;',
  );

  static final _getContentMd5 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final java.lang.String getContentMd5()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getContentMd5() {
    return _getContentMd5(
            reference.pointer, _id_getContentMd5 as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_setContentMd5 = _class.instanceMethodId(
    r'setContentMd5',
    r'(Ljava/lang/String;)V',
  );

  static final _setContentMd5 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final void setContentMd5(java.lang.String string)
  void setContentMd5(
    jni.JString string,
  ) {
    _setContentMd5(reference.pointer, _id_setContentMd5 as jni.JMethodIDPtr,
            string.reference.pointer)
        .check();
  }

  static final _id_getContentType = _class.instanceMethodId(
    r'getContentType',
    r'()Ljava/lang/String;',
  );

  static final _getContentType = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final java.lang.String getContentType()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getContentType() {
    return _getContentType(
            reference.pointer, _id_getContentType as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_setContentType = _class.instanceMethodId(
    r'setContentType',
    r'(Ljava/lang/String;)V',
  );

  static final _setContentType = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final void setContentType(java.lang.String string)
  void setContentType(
    jni.JString string,
  ) {
    _setContentType(reference.pointer, _id_setContentType as jni.JMethodIDPtr,
            string.reference.pointer)
        .check();
  }

  static final _id_getExpectedBucketOwner = _class.instanceMethodId(
    r'getExpectedBucketOwner',
    r'()Ljava/lang/String;',
  );

  static final _getExpectedBucketOwner = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final java.lang.String getExpectedBucketOwner()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getExpectedBucketOwner() {
    return _getExpectedBucketOwner(
            reference.pointer, _id_getExpectedBucketOwner as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_setExpectedBucketOwner = _class.instanceMethodId(
    r'setExpectedBucketOwner',
    r'(Ljava/lang/String;)V',
  );

  static final _setExpectedBucketOwner = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final void setExpectedBucketOwner(java.lang.String string)
  void setExpectedBucketOwner(
    jni.JString string,
  ) {
    _setExpectedBucketOwner(
            reference.pointer,
            _id_setExpectedBucketOwner as jni.JMethodIDPtr,
            string.reference.pointer)
        .check();
  }

  static final _id_getExpires = _class.instanceMethodId(
    r'getExpires',
    r'()Laws/smithy/kotlin/runtime/time/Instant;',
  );

  static final _getExpires = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final aws.smithy.kotlin.runtime.time.Instant getExpires()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getExpires() {
    return _getExpires(reference.pointer, _id_getExpires as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_setExpires = _class.instanceMethodId(
    r'setExpires',
    r'(Laws/smithy/kotlin/runtime/time/Instant;)V',
  );

  static final _setExpires = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final void setExpires(aws.smithy.kotlin.runtime.time.Instant instant)
  void setExpires(
    jni.JObject instant,
  ) {
    _setExpires(reference.pointer, _id_setExpires as jni.JMethodIDPtr,
            instant.reference.pointer)
        .check();
  }

  static final _id_getGrantFullControl = _class.instanceMethodId(
    r'getGrantFullControl',
    r'()Ljava/lang/String;',
  );

  static final _getGrantFullControl = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final java.lang.String getGrantFullControl()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getGrantFullControl() {
    return _getGrantFullControl(
            reference.pointer, _id_getGrantFullControl as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_setGrantFullControl = _class.instanceMethodId(
    r'setGrantFullControl',
    r'(Ljava/lang/String;)V',
  );

  static final _setGrantFullControl = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final void setGrantFullControl(java.lang.String string)
  void setGrantFullControl(
    jni.JString string,
  ) {
    _setGrantFullControl(
            reference.pointer,
            _id_setGrantFullControl as jni.JMethodIDPtr,
            string.reference.pointer)
        .check();
  }

  static final _id_getGrantRead = _class.instanceMethodId(
    r'getGrantRead',
    r'()Ljava/lang/String;',
  );

  static final _getGrantRead = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final java.lang.String getGrantRead()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getGrantRead() {
    return _getGrantRead(
            reference.pointer, _id_getGrantRead as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_setGrantRead = _class.instanceMethodId(
    r'setGrantRead',
    r'(Ljava/lang/String;)V',
  );

  static final _setGrantRead = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final void setGrantRead(java.lang.String string)
  void setGrantRead(
    jni.JString string,
  ) {
    _setGrantRead(reference.pointer, _id_setGrantRead as jni.JMethodIDPtr,
            string.reference.pointer)
        .check();
  }

  static final _id_getGrantReadAcp = _class.instanceMethodId(
    r'getGrantReadAcp',
    r'()Ljava/lang/String;',
  );

  static final _getGrantReadAcp = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final java.lang.String getGrantReadAcp()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getGrantReadAcp() {
    return _getGrantReadAcp(
            reference.pointer, _id_getGrantReadAcp as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_setGrantReadAcp = _class.instanceMethodId(
    r'setGrantReadAcp',
    r'(Ljava/lang/String;)V',
  );

  static final _setGrantReadAcp = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final void setGrantReadAcp(java.lang.String string)
  void setGrantReadAcp(
    jni.JString string,
  ) {
    _setGrantReadAcp(reference.pointer, _id_setGrantReadAcp as jni.JMethodIDPtr,
            string.reference.pointer)
        .check();
  }

  static final _id_getGrantWriteAcp = _class.instanceMethodId(
    r'getGrantWriteAcp',
    r'()Ljava/lang/String;',
  );

  static final _getGrantWriteAcp = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final java.lang.String getGrantWriteAcp()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getGrantWriteAcp() {
    return _getGrantWriteAcp(
            reference.pointer, _id_getGrantWriteAcp as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_setGrantWriteAcp = _class.instanceMethodId(
    r'setGrantWriteAcp',
    r'(Ljava/lang/String;)V',
  );

  static final _setGrantWriteAcp = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final void setGrantWriteAcp(java.lang.String string)
  void setGrantWriteAcp(
    jni.JString string,
  ) {
    _setGrantWriteAcp(reference.pointer,
            _id_setGrantWriteAcp as jni.JMethodIDPtr, string.reference.pointer)
        .check();
  }

  static final _id_getKey = _class.instanceMethodId(
    r'getKey',
    r'()Ljava/lang/String;',
  );

  static final _getKey = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final java.lang.String getKey()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getKey() {
    return _getKey(reference.pointer, _id_getKey as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_setKey = _class.instanceMethodId(
    r'setKey',
    r'(Ljava/lang/String;)V',
  );

  static final _setKey = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final void setKey(java.lang.String string)
  void setKey(
    jni.JString string,
  ) {
    _setKey(reference.pointer, _id_setKey as jni.JMethodIDPtr,
            string.reference.pointer)
        .check();
  }

  static final _id_getMetadata = _class.instanceMethodId(
    r'getMetadata',
    r'()Ljava/util/Map;',
  );

  static final _getMetadata = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final java.util.Map getMetadata()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JMap<jni.JString, jni.JString> getMetadata() {
    return _getMetadata(reference.pointer, _id_getMetadata as jni.JMethodIDPtr)
        .object(const jni.JMapType(jni.JStringType(), jni.JStringType()));
  }

  static final _id_setMetadata = _class.instanceMethodId(
    r'setMetadata',
    r'(Ljava/util/Map;)V',
  );

  static final _setMetadata = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final void setMetadata(java.util.Map map)
  void setMetadata(
    jni.JMap<jni.JString, jni.JString> map,
  ) {
    _setMetadata(reference.pointer, _id_setMetadata as jni.JMethodIDPtr,
            map.reference.pointer)
        .check();
  }

  static final _id_getObjectLockLegalHoldStatus = _class.instanceMethodId(
    r'getObjectLockLegalHoldStatus',
    r'()Laws/sdk/kotlin/services/s3/model/ObjectLockLegalHoldStatus;',
  );

  static final _getObjectLockLegalHoldStatus = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final aws.sdk.kotlin.services.s3.model.ObjectLockLegalHoldStatus getObjectLockLegalHoldStatus()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getObjectLockLegalHoldStatus() {
    return _getObjectLockLegalHoldStatus(reference.pointer,
            _id_getObjectLockLegalHoldStatus as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_setObjectLockLegalHoldStatus = _class.instanceMethodId(
    r'setObjectLockLegalHoldStatus',
    r'(Laws/sdk/kotlin/services/s3/model/ObjectLockLegalHoldStatus;)V',
  );

  static final _setObjectLockLegalHoldStatus = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final void setObjectLockLegalHoldStatus(aws.sdk.kotlin.services.s3.model.ObjectLockLegalHoldStatus objectLockLegalHoldStatus)
  void setObjectLockLegalHoldStatus(
    jni.JObject objectLockLegalHoldStatus,
  ) {
    _setObjectLockLegalHoldStatus(
            reference.pointer,
            _id_setObjectLockLegalHoldStatus as jni.JMethodIDPtr,
            objectLockLegalHoldStatus.reference.pointer)
        .check();
  }

  static final _id_getObjectLockMode = _class.instanceMethodId(
    r'getObjectLockMode',
    r'()Laws/sdk/kotlin/services/s3/model/ObjectLockMode;',
  );

  static final _getObjectLockMode = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final aws.sdk.kotlin.services.s3.model.ObjectLockMode getObjectLockMode()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getObjectLockMode() {
    return _getObjectLockMode(
            reference.pointer, _id_getObjectLockMode as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_setObjectLockMode = _class.instanceMethodId(
    r'setObjectLockMode',
    r'(Laws/sdk/kotlin/services/s3/model/ObjectLockMode;)V',
  );

  static final _setObjectLockMode = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final void setObjectLockMode(aws.sdk.kotlin.services.s3.model.ObjectLockMode objectLockMode)
  void setObjectLockMode(
    jni.JObject objectLockMode,
  ) {
    _setObjectLockMode(
            reference.pointer,
            _id_setObjectLockMode as jni.JMethodIDPtr,
            objectLockMode.reference.pointer)
        .check();
  }

  static final _id_getObjectLockRetainUntilDate = _class.instanceMethodId(
    r'getObjectLockRetainUntilDate',
    r'()Laws/smithy/kotlin/runtime/time/Instant;',
  );

  static final _getObjectLockRetainUntilDate = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final aws.smithy.kotlin.runtime.time.Instant getObjectLockRetainUntilDate()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getObjectLockRetainUntilDate() {
    return _getObjectLockRetainUntilDate(reference.pointer,
            _id_getObjectLockRetainUntilDate as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_setObjectLockRetainUntilDate = _class.instanceMethodId(
    r'setObjectLockRetainUntilDate',
    r'(Laws/smithy/kotlin/runtime/time/Instant;)V',
  );

  static final _setObjectLockRetainUntilDate = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final void setObjectLockRetainUntilDate(aws.smithy.kotlin.runtime.time.Instant instant)
  void setObjectLockRetainUntilDate(
    jni.JObject instant,
  ) {
    _setObjectLockRetainUntilDate(
            reference.pointer,
            _id_setObjectLockRetainUntilDate as jni.JMethodIDPtr,
            instant.reference.pointer)
        .check();
  }

  static final _id_getRequestPayer = _class.instanceMethodId(
    r'getRequestPayer',
    r'()Laws/sdk/kotlin/services/s3/model/RequestPayer;',
  );

  static final _getRequestPayer = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final aws.sdk.kotlin.services.s3.model.RequestPayer getRequestPayer()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getRequestPayer() {
    return _getRequestPayer(
            reference.pointer, _id_getRequestPayer as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_setRequestPayer = _class.instanceMethodId(
    r'setRequestPayer',
    r'(Laws/sdk/kotlin/services/s3/model/RequestPayer;)V',
  );

  static final _setRequestPayer = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final void setRequestPayer(aws.sdk.kotlin.services.s3.model.RequestPayer requestPayer)
  void setRequestPayer(
    jni.JObject requestPayer,
  ) {
    _setRequestPayer(reference.pointer, _id_setRequestPayer as jni.JMethodIDPtr,
            requestPayer.reference.pointer)
        .check();
  }

  static final _id_getServerSideEncryption = _class.instanceMethodId(
    r'getServerSideEncryption',
    r'()Laws/sdk/kotlin/services/s3/model/ServerSideEncryption;',
  );

  static final _getServerSideEncryption = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final aws.sdk.kotlin.services.s3.model.ServerSideEncryption getServerSideEncryption()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getServerSideEncryption() {
    return _getServerSideEncryption(
            reference.pointer, _id_getServerSideEncryption as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_setServerSideEncryption = _class.instanceMethodId(
    r'setServerSideEncryption',
    r'(Laws/sdk/kotlin/services/s3/model/ServerSideEncryption;)V',
  );

  static final _setServerSideEncryption = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final void setServerSideEncryption(aws.sdk.kotlin.services.s3.model.ServerSideEncryption serverSideEncryption)
  void setServerSideEncryption(
    jni.JObject serverSideEncryption,
  ) {
    _setServerSideEncryption(
            reference.pointer,
            _id_setServerSideEncryption as jni.JMethodIDPtr,
            serverSideEncryption.reference.pointer)
        .check();
  }

  static final _id_getSseCustomerAlgorithm = _class.instanceMethodId(
    r'getSseCustomerAlgorithm',
    r'()Ljava/lang/String;',
  );

  static final _getSseCustomerAlgorithm = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final java.lang.String getSseCustomerAlgorithm()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getSseCustomerAlgorithm() {
    return _getSseCustomerAlgorithm(
            reference.pointer, _id_getSseCustomerAlgorithm as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_setSseCustomerAlgorithm = _class.instanceMethodId(
    r'setSseCustomerAlgorithm',
    r'(Ljava/lang/String;)V',
  );

  static final _setSseCustomerAlgorithm = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final void setSseCustomerAlgorithm(java.lang.String string)
  void setSseCustomerAlgorithm(
    jni.JString string,
  ) {
    _setSseCustomerAlgorithm(
            reference.pointer,
            _id_setSseCustomerAlgorithm as jni.JMethodIDPtr,
            string.reference.pointer)
        .check();
  }

  static final _id_getSseCustomerKey = _class.instanceMethodId(
    r'getSseCustomerKey',
    r'()Ljava/lang/String;',
  );

  static final _getSseCustomerKey = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final java.lang.String getSseCustomerKey()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getSseCustomerKey() {
    return _getSseCustomerKey(
            reference.pointer, _id_getSseCustomerKey as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_setSseCustomerKey = _class.instanceMethodId(
    r'setSseCustomerKey',
    r'(Ljava/lang/String;)V',
  );

  static final _setSseCustomerKey = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final void setSseCustomerKey(java.lang.String string)
  void setSseCustomerKey(
    jni.JString string,
  ) {
    _setSseCustomerKey(reference.pointer,
            _id_setSseCustomerKey as jni.JMethodIDPtr, string.reference.pointer)
        .check();
  }

  static final _id_getSseCustomerKeyMd5 = _class.instanceMethodId(
    r'getSseCustomerKeyMd5',
    r'()Ljava/lang/String;',
  );

  static final _getSseCustomerKeyMd5 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final java.lang.String getSseCustomerKeyMd5()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getSseCustomerKeyMd5() {
    return _getSseCustomerKeyMd5(
            reference.pointer, _id_getSseCustomerKeyMd5 as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_setSseCustomerKeyMd5 = _class.instanceMethodId(
    r'setSseCustomerKeyMd5',
    r'(Ljava/lang/String;)V',
  );

  static final _setSseCustomerKeyMd5 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final void setSseCustomerKeyMd5(java.lang.String string)
  void setSseCustomerKeyMd5(
    jni.JString string,
  ) {
    _setSseCustomerKeyMd5(
            reference.pointer,
            _id_setSseCustomerKeyMd5 as jni.JMethodIDPtr,
            string.reference.pointer)
        .check();
  }

  static final _id_getSsekmsEncryptionContext = _class.instanceMethodId(
    r'getSsekmsEncryptionContext',
    r'()Ljava/lang/String;',
  );

  static final _getSsekmsEncryptionContext = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final java.lang.String getSsekmsEncryptionContext()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getSsekmsEncryptionContext() {
    return _getSsekmsEncryptionContext(reference.pointer,
            _id_getSsekmsEncryptionContext as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_setSsekmsEncryptionContext = _class.instanceMethodId(
    r'setSsekmsEncryptionContext',
    r'(Ljava/lang/String;)V',
  );

  static final _setSsekmsEncryptionContext = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final void setSsekmsEncryptionContext(java.lang.String string)
  void setSsekmsEncryptionContext(
    jni.JString string,
  ) {
    _setSsekmsEncryptionContext(
            reference.pointer,
            _id_setSsekmsEncryptionContext as jni.JMethodIDPtr,
            string.reference.pointer)
        .check();
  }

  static final _id_getSsekmsKeyId = _class.instanceMethodId(
    r'getSsekmsKeyId',
    r'()Ljava/lang/String;',
  );

  static final _getSsekmsKeyId = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final java.lang.String getSsekmsKeyId()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getSsekmsKeyId() {
    return _getSsekmsKeyId(
            reference.pointer, _id_getSsekmsKeyId as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_setSsekmsKeyId = _class.instanceMethodId(
    r'setSsekmsKeyId',
    r'(Ljava/lang/String;)V',
  );

  static final _setSsekmsKeyId = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final void setSsekmsKeyId(java.lang.String string)
  void setSsekmsKeyId(
    jni.JString string,
  ) {
    _setSsekmsKeyId(reference.pointer, _id_setSsekmsKeyId as jni.JMethodIDPtr,
            string.reference.pointer)
        .check();
  }

  static final _id_getStorageClass = _class.instanceMethodId(
    r'getStorageClass',
    r'()Laws/sdk/kotlin/services/s3/model/StorageClass;',
  );

  static final _getStorageClass = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final aws.sdk.kotlin.services.s3.model.StorageClass getStorageClass()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getStorageClass() {
    return _getStorageClass(
            reference.pointer, _id_getStorageClass as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_setStorageClass = _class.instanceMethodId(
    r'setStorageClass',
    r'(Laws/sdk/kotlin/services/s3/model/StorageClass;)V',
  );

  static final _setStorageClass = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final void setStorageClass(aws.sdk.kotlin.services.s3.model.StorageClass storageClass)
  void setStorageClass(
    jni.JObject storageClass,
  ) {
    _setStorageClass(reference.pointer, _id_setStorageClass as jni.JMethodIDPtr,
            storageClass.reference.pointer)
        .check();
  }

  static final _id_getTagging = _class.instanceMethodId(
    r'getTagging',
    r'()Ljava/lang/String;',
  );

  static final _getTagging = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final java.lang.String getTagging()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getTagging() {
    return _getTagging(reference.pointer, _id_getTagging as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_setTagging = _class.instanceMethodId(
    r'setTagging',
    r'(Ljava/lang/String;)V',
  );

  static final _setTagging = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final void setTagging(java.lang.String string)
  void setTagging(
    jni.JString string,
  ) {
    _setTagging(reference.pointer, _id_setTagging as jni.JMethodIDPtr,
            string.reference.pointer)
        .check();
  }

  static final _id_getWebsiteRedirectLocation = _class.instanceMethodId(
    r'getWebsiteRedirectLocation',
    r'()Ljava/lang/String;',
  );

  static final _getWebsiteRedirectLocation = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final java.lang.String getWebsiteRedirectLocation()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getWebsiteRedirectLocation() {
    return _getWebsiteRedirectLocation(reference.pointer,
            _id_getWebsiteRedirectLocation as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_setWebsiteRedirectLocation = _class.instanceMethodId(
    r'setWebsiteRedirectLocation',
    r'(Ljava/lang/String;)V',
  );

  static final _setWebsiteRedirectLocation = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final void setWebsiteRedirectLocation(java.lang.String string)
  void setWebsiteRedirectLocation(
    jni.JString string,
  ) {
    _setWebsiteRedirectLocation(
            reference.pointer,
            _id_setWebsiteRedirectLocation as jni.JMethodIDPtr,
            string.reference.pointer)
        .check();
  }

  static final _id_new0 = _class.constructorId(
    r'()V',
  );

  static final _new0 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_NewObject')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public void <init>()
  /// The returned object must be released after use, by calling the [release] method.
  factory PutObjectRequest_Builder() {
    return PutObjectRequest_Builder.fromReference(
        _new0(_class.reference.pointer, _id_new0 as jni.JMethodIDPtr)
            .reference);
  }

  static final _id_new1 = _class.constructorId(
    r'(Laws/sdk/kotlin/services/s3/model/PutObjectRequest;)V',
  );

  static final _new1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_NewObject')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(aws.sdk.kotlin.services.s3.model.PutObjectRequest putObjectRequest)
  /// The returned object must be released after use, by calling the [release] method.
  factory PutObjectRequest_Builder.new1(
    PutObjectRequest putObjectRequest,
  ) {
    return PutObjectRequest_Builder.fromReference(_new1(
            _class.reference.pointer,
            _id_new1 as jni.JMethodIDPtr,
            putObjectRequest.reference.pointer)
        .reference);
  }

  static final _id_build = _class.instanceMethodId(
    r'build',
    r'()Laws/sdk/kotlin/services/s3/model/PutObjectRequest;',
  );

  static final _build = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final aws.sdk.kotlin.services.s3.model.PutObjectRequest build()
  /// The returned object must be released after use, by calling the [release] method.
  PutObjectRequest build() {
    return _build(reference.pointer, _id_build as jni.JMethodIDPtr)
        .object(const $PutObjectRequestType());
  }
}

final class $PutObjectRequest_BuilderType
    extends jni.JObjType<PutObjectRequest_Builder> {
  const $PutObjectRequest_BuilderType();

  @override
  String get signature =>
      r'Laws/sdk/kotlin/services/s3/model/PutObjectRequest$Builder;';

  @override
  PutObjectRequest_Builder fromReference(jni.JReference reference) =>
      PutObjectRequest_Builder.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($PutObjectRequest_BuilderType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($PutObjectRequest_BuilderType) &&
        other is $PutObjectRequest_BuilderType;
  }
}

/// from: aws.sdk.kotlin.services.s3.model.PutObjectRequest$Companion
class PutObjectRequest_Companion extends jni.JObject {
  @override
  late final jni.JObjType<PutObjectRequest_Companion> $type = type;

  PutObjectRequest_Companion.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(
      r'aws/sdk/kotlin/services/s3/model/PutObjectRequest$Companion');

  /// The type which includes information such as the signature of this class.
  static const type = $PutObjectRequest_CompanionType();
  static final _id_invoke = _class.instanceMethodId(
    r'invoke',
    r'(Lkotlin/jvm/functions/Function1;)Laws/sdk/kotlin/services/s3/model/PutObjectRequest;',
  );

  static final _invoke = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final aws.sdk.kotlin.services.s3.model.PutObjectRequest invoke(kotlin.jvm.functions.Function1 function1)
  /// The returned object must be released after use, by calling the [release] method.
  PutObjectRequest invoke(
    jni.JObject function1,
  ) {
    return _invoke(reference.pointer, _id_invoke as jni.JMethodIDPtr,
            function1.reference.pointer)
        .object(const $PutObjectRequestType());
  }

  static final _id_new0 = _class.constructorId(
    r'(Lkotlin/jvm/internal/DefaultConstructorMarker;)V',
  );

  static final _new0 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_NewObject')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(kotlin.jvm.internal.DefaultConstructorMarker defaultConstructorMarker)
  /// The returned object must be released after use, by calling the [release] method.
  factory PutObjectRequest_Companion(
    jni.JObject defaultConstructorMarker,
  ) {
    return PutObjectRequest_Companion.fromReference(_new0(
            _class.reference.pointer,
            _id_new0 as jni.JMethodIDPtr,
            defaultConstructorMarker.reference.pointer)
        .reference);
  }
}

final class $PutObjectRequest_CompanionType
    extends jni.JObjType<PutObjectRequest_Companion> {
  const $PutObjectRequest_CompanionType();

  @override
  String get signature =>
      r'Laws/sdk/kotlin/services/s3/model/PutObjectRequest$Companion;';

  @override
  PutObjectRequest_Companion fromReference(jni.JReference reference) =>
      PutObjectRequest_Companion.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($PutObjectRequest_CompanionType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($PutObjectRequest_CompanionType) &&
        other is $PutObjectRequest_CompanionType;
  }
}

/// from: aws.sdk.kotlin.services.s3.model.PutObjectRequest
class PutObjectRequest extends jni.JObject {
  @override
  late final jni.JObjType<PutObjectRequest> $type = type;

  PutObjectRequest.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class =
      jni.JClass.forName(r'aws/sdk/kotlin/services/s3/model/PutObjectRequest');

  /// The type which includes information such as the signature of this class.
  static const type = $PutObjectRequestType();
  static final _id_Companion = _class.staticFieldId(
    r'Companion',
    r'Laws/sdk/kotlin/services/s3/model/PutObjectRequest$Companion;',
  );

  /// from: static public final aws.sdk.kotlin.services.s3.model.PutObjectRequest$Companion Companion
  /// The returned object must be released after use, by calling the [release] method.
  static PutObjectRequest_Companion get Companion =>
      _id_Companion.get(_class, const $PutObjectRequest_CompanionType());

  static final _id_getAcl = _class.instanceMethodId(
    r'getAcl',
    r'()Laws/sdk/kotlin/services/s3/model/ObjectCannedAcl;',
  );

  static final _getAcl = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final aws.sdk.kotlin.services.s3.model.ObjectCannedAcl getAcl()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getAcl() {
    return _getAcl(reference.pointer, _id_getAcl as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_getBody = _class.instanceMethodId(
    r'getBody',
    r'()Laws/smithy/kotlin/runtime/content/ByteStream;',
  );

  static final _getBody = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final aws.smithy.kotlin.runtime.content.ByteStream getBody()
  /// The returned object must be released after use, by calling the [release] method.
  bytestream_.ByteStream getBody() {
    return _getBody(reference.pointer, _id_getBody as jni.JMethodIDPtr)
        .object(const bytestream_.$ByteStreamType());
  }

  static final _id_getBucket = _class.instanceMethodId(
    r'getBucket',
    r'()Ljava/lang/String;',
  );

  static final _getBucket = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final java.lang.String getBucket()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getBucket() {
    return _getBucket(reference.pointer, _id_getBucket as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_getBucketKeyEnabled = _class.instanceMethodId(
    r'getBucketKeyEnabled',
    r'()Ljava/lang/Boolean;',
  );

  static final _getBucketKeyEnabled = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final java.lang.Boolean getBucketKeyEnabled()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JBoolean getBucketKeyEnabled() {
    return _getBucketKeyEnabled(
            reference.pointer, _id_getBucketKeyEnabled as jni.JMethodIDPtr)
        .object(const jni.JBooleanType());
  }

  static final _id_getCacheControl = _class.instanceMethodId(
    r'getCacheControl',
    r'()Ljava/lang/String;',
  );

  static final _getCacheControl = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final java.lang.String getCacheControl()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getCacheControl() {
    return _getCacheControl(
            reference.pointer, _id_getCacheControl as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_getChecksumAlgorithm = _class.instanceMethodId(
    r'getChecksumAlgorithm',
    r'()Laws/sdk/kotlin/services/s3/model/ChecksumAlgorithm;',
  );

  static final _getChecksumAlgorithm = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final aws.sdk.kotlin.services.s3.model.ChecksumAlgorithm getChecksumAlgorithm()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getChecksumAlgorithm() {
    return _getChecksumAlgorithm(
            reference.pointer, _id_getChecksumAlgorithm as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_getChecksumCrc32 = _class.instanceMethodId(
    r'getChecksumCrc32',
    r'()Ljava/lang/String;',
  );

  static final _getChecksumCrc32 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final java.lang.String getChecksumCrc32()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getChecksumCrc32() {
    return _getChecksumCrc32(
            reference.pointer, _id_getChecksumCrc32 as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_getChecksumCrc32C = _class.instanceMethodId(
    r'getChecksumCrc32C',
    r'()Ljava/lang/String;',
  );

  static final _getChecksumCrc32C = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final java.lang.String getChecksumCrc32C()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getChecksumCrc32C() {
    return _getChecksumCrc32C(
            reference.pointer, _id_getChecksumCrc32C as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_getChecksumSha1 = _class.instanceMethodId(
    r'getChecksumSha1',
    r'()Ljava/lang/String;',
  );

  static final _getChecksumSha1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final java.lang.String getChecksumSha1()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getChecksumSha1() {
    return _getChecksumSha1(
            reference.pointer, _id_getChecksumSha1 as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_getChecksumSha256 = _class.instanceMethodId(
    r'getChecksumSha256',
    r'()Ljava/lang/String;',
  );

  static final _getChecksumSha256 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final java.lang.String getChecksumSha256()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getChecksumSha256() {
    return _getChecksumSha256(
            reference.pointer, _id_getChecksumSha256 as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_getContentDisposition = _class.instanceMethodId(
    r'getContentDisposition',
    r'()Ljava/lang/String;',
  );

  static final _getContentDisposition = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final java.lang.String getContentDisposition()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getContentDisposition() {
    return _getContentDisposition(
            reference.pointer, _id_getContentDisposition as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_getContentEncoding = _class.instanceMethodId(
    r'getContentEncoding',
    r'()Ljava/lang/String;',
  );

  static final _getContentEncoding = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final java.lang.String getContentEncoding()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getContentEncoding() {
    return _getContentEncoding(
            reference.pointer, _id_getContentEncoding as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_getContentLanguage = _class.instanceMethodId(
    r'getContentLanguage',
    r'()Ljava/lang/String;',
  );

  static final _getContentLanguage = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final java.lang.String getContentLanguage()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getContentLanguage() {
    return _getContentLanguage(
            reference.pointer, _id_getContentLanguage as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_getContentLength = _class.instanceMethodId(
    r'getContentLength',
    r'()Ljava/lang/Long;',
  );

  static final _getContentLength = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final java.lang.Long getContentLength()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JLong getContentLength() {
    return _getContentLength(
            reference.pointer, _id_getContentLength as jni.JMethodIDPtr)
        .object(const jni.JLongType());
  }

  static final _id_getContentMd5 = _class.instanceMethodId(
    r'getContentMd5',
    r'()Ljava/lang/String;',
  );

  static final _getContentMd5 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final java.lang.String getContentMd5()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getContentMd5() {
    return _getContentMd5(
            reference.pointer, _id_getContentMd5 as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_getContentType = _class.instanceMethodId(
    r'getContentType',
    r'()Ljava/lang/String;',
  );

  static final _getContentType = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final java.lang.String getContentType()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getContentType() {
    return _getContentType(
            reference.pointer, _id_getContentType as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_getExpectedBucketOwner = _class.instanceMethodId(
    r'getExpectedBucketOwner',
    r'()Ljava/lang/String;',
  );

  static final _getExpectedBucketOwner = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final java.lang.String getExpectedBucketOwner()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getExpectedBucketOwner() {
    return _getExpectedBucketOwner(
            reference.pointer, _id_getExpectedBucketOwner as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_getExpires = _class.instanceMethodId(
    r'getExpires',
    r'()Laws/smithy/kotlin/runtime/time/Instant;',
  );

  static final _getExpires = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final aws.smithy.kotlin.runtime.time.Instant getExpires()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getExpires() {
    return _getExpires(reference.pointer, _id_getExpires as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_getGrantFullControl = _class.instanceMethodId(
    r'getGrantFullControl',
    r'()Ljava/lang/String;',
  );

  static final _getGrantFullControl = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final java.lang.String getGrantFullControl()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getGrantFullControl() {
    return _getGrantFullControl(
            reference.pointer, _id_getGrantFullControl as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_getGrantRead = _class.instanceMethodId(
    r'getGrantRead',
    r'()Ljava/lang/String;',
  );

  static final _getGrantRead = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final java.lang.String getGrantRead()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getGrantRead() {
    return _getGrantRead(
            reference.pointer, _id_getGrantRead as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_getGrantReadAcp = _class.instanceMethodId(
    r'getGrantReadAcp',
    r'()Ljava/lang/String;',
  );

  static final _getGrantReadAcp = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final java.lang.String getGrantReadAcp()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getGrantReadAcp() {
    return _getGrantReadAcp(
            reference.pointer, _id_getGrantReadAcp as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_getGrantWriteAcp = _class.instanceMethodId(
    r'getGrantWriteAcp',
    r'()Ljava/lang/String;',
  );

  static final _getGrantWriteAcp = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final java.lang.String getGrantWriteAcp()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getGrantWriteAcp() {
    return _getGrantWriteAcp(
            reference.pointer, _id_getGrantWriteAcp as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_getKey = _class.instanceMethodId(
    r'getKey',
    r'()Ljava/lang/String;',
  );

  static final _getKey = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final java.lang.String getKey()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getKey() {
    return _getKey(reference.pointer, _id_getKey as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_getMetadata = _class.instanceMethodId(
    r'getMetadata',
    r'()Ljava/util/Map;',
  );

  static final _getMetadata = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final java.util.Map getMetadata()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JMap<jni.JString, jni.JString> getMetadata() {
    return _getMetadata(reference.pointer, _id_getMetadata as jni.JMethodIDPtr)
        .object(const jni.JMapType(jni.JStringType(), jni.JStringType()));
  }

  static final _id_getObjectLockLegalHoldStatus = _class.instanceMethodId(
    r'getObjectLockLegalHoldStatus',
    r'()Laws/sdk/kotlin/services/s3/model/ObjectLockLegalHoldStatus;',
  );

  static final _getObjectLockLegalHoldStatus = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final aws.sdk.kotlin.services.s3.model.ObjectLockLegalHoldStatus getObjectLockLegalHoldStatus()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getObjectLockLegalHoldStatus() {
    return _getObjectLockLegalHoldStatus(reference.pointer,
            _id_getObjectLockLegalHoldStatus as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_getObjectLockMode = _class.instanceMethodId(
    r'getObjectLockMode',
    r'()Laws/sdk/kotlin/services/s3/model/ObjectLockMode;',
  );

  static final _getObjectLockMode = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final aws.sdk.kotlin.services.s3.model.ObjectLockMode getObjectLockMode()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getObjectLockMode() {
    return _getObjectLockMode(
            reference.pointer, _id_getObjectLockMode as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_getObjectLockRetainUntilDate = _class.instanceMethodId(
    r'getObjectLockRetainUntilDate',
    r'()Laws/smithy/kotlin/runtime/time/Instant;',
  );

  static final _getObjectLockRetainUntilDate = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final aws.smithy.kotlin.runtime.time.Instant getObjectLockRetainUntilDate()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getObjectLockRetainUntilDate() {
    return _getObjectLockRetainUntilDate(reference.pointer,
            _id_getObjectLockRetainUntilDate as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_getRequestPayer = _class.instanceMethodId(
    r'getRequestPayer',
    r'()Laws/sdk/kotlin/services/s3/model/RequestPayer;',
  );

  static final _getRequestPayer = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final aws.sdk.kotlin.services.s3.model.RequestPayer getRequestPayer()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getRequestPayer() {
    return _getRequestPayer(
            reference.pointer, _id_getRequestPayer as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_getServerSideEncryption = _class.instanceMethodId(
    r'getServerSideEncryption',
    r'()Laws/sdk/kotlin/services/s3/model/ServerSideEncryption;',
  );

  static final _getServerSideEncryption = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final aws.sdk.kotlin.services.s3.model.ServerSideEncryption getServerSideEncryption()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getServerSideEncryption() {
    return _getServerSideEncryption(
            reference.pointer, _id_getServerSideEncryption as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_getSseCustomerAlgorithm = _class.instanceMethodId(
    r'getSseCustomerAlgorithm',
    r'()Ljava/lang/String;',
  );

  static final _getSseCustomerAlgorithm = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final java.lang.String getSseCustomerAlgorithm()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getSseCustomerAlgorithm() {
    return _getSseCustomerAlgorithm(
            reference.pointer, _id_getSseCustomerAlgorithm as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_getSseCustomerKey = _class.instanceMethodId(
    r'getSseCustomerKey',
    r'()Ljava/lang/String;',
  );

  static final _getSseCustomerKey = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final java.lang.String getSseCustomerKey()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getSseCustomerKey() {
    return _getSseCustomerKey(
            reference.pointer, _id_getSseCustomerKey as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_getSseCustomerKeyMd5 = _class.instanceMethodId(
    r'getSseCustomerKeyMd5',
    r'()Ljava/lang/String;',
  );

  static final _getSseCustomerKeyMd5 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final java.lang.String getSseCustomerKeyMd5()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getSseCustomerKeyMd5() {
    return _getSseCustomerKeyMd5(
            reference.pointer, _id_getSseCustomerKeyMd5 as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_getSsekmsEncryptionContext = _class.instanceMethodId(
    r'getSsekmsEncryptionContext',
    r'()Ljava/lang/String;',
  );

  static final _getSsekmsEncryptionContext = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final java.lang.String getSsekmsEncryptionContext()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getSsekmsEncryptionContext() {
    return _getSsekmsEncryptionContext(reference.pointer,
            _id_getSsekmsEncryptionContext as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_getSsekmsKeyId = _class.instanceMethodId(
    r'getSsekmsKeyId',
    r'()Ljava/lang/String;',
  );

  static final _getSsekmsKeyId = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final java.lang.String getSsekmsKeyId()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getSsekmsKeyId() {
    return _getSsekmsKeyId(
            reference.pointer, _id_getSsekmsKeyId as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_getStorageClass = _class.instanceMethodId(
    r'getStorageClass',
    r'()Laws/sdk/kotlin/services/s3/model/StorageClass;',
  );

  static final _getStorageClass = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final aws.sdk.kotlin.services.s3.model.StorageClass getStorageClass()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getStorageClass() {
    return _getStorageClass(
            reference.pointer, _id_getStorageClass as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_getTagging = _class.instanceMethodId(
    r'getTagging',
    r'()Ljava/lang/String;',
  );

  static final _getTagging = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final java.lang.String getTagging()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getTagging() {
    return _getTagging(reference.pointer, _id_getTagging as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_getWebsiteRedirectLocation = _class.instanceMethodId(
    r'getWebsiteRedirectLocation',
    r'()Ljava/lang/String;',
  );

  static final _getWebsiteRedirectLocation = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final java.lang.String getWebsiteRedirectLocation()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getWebsiteRedirectLocation() {
    return _getWebsiteRedirectLocation(reference.pointer,
            _id_getWebsiteRedirectLocation as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_toString1 = _class.instanceMethodId(
    r'toString',
    r'()Ljava/lang/String;',
  );

  static final _toString1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public java.lang.String toString()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString toString1() {
    return _toString1(reference.pointer, _id_toString1 as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_hashCode1 = _class.instanceMethodId(
    r'hashCode',
    r'()I',
  );

  static final _hashCode1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public int hashCode()
  int hashCode1() {
    return _hashCode1(reference.pointer, _id_hashCode1 as jni.JMethodIDPtr)
        .integer;
  }

  static final _id_equals = _class.instanceMethodId(
    r'equals',
    r'(Ljava/lang/Object;)Z',
  );

  static final _equals = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public boolean equals(java.lang.Object object)
  bool equals(
    jni.JObject object,
  ) {
    return _equals(reference.pointer, _id_equals as jni.JMethodIDPtr,
            object.reference.pointer)
        .boolean;
  }

  static final _id_copy = _class.instanceMethodId(
    r'copy',
    r'(Lkotlin/jvm/functions/Function1;)Laws/sdk/kotlin/services/s3/model/PutObjectRequest;',
  );

  static final _copy = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final aws.sdk.kotlin.services.s3.model.PutObjectRequest copy(kotlin.jvm.functions.Function1 function1)
  /// The returned object must be released after use, by calling the [release] method.
  PutObjectRequest copy(
    jni.JObject function1,
  ) {
    return _copy(reference.pointer, _id_copy as jni.JMethodIDPtr,
            function1.reference.pointer)
        .object(const $PutObjectRequestType());
  }

  static final _id_new0 = _class.constructorId(
    r'(Laws/sdk/kotlin/services/s3/model/PutObjectRequest$Builder;Lkotlin/jvm/internal/DefaultConstructorMarker;)V',
  );

  static final _new0 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_NewObject')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(aws.sdk.kotlin.services.s3.model.PutObjectRequest$Builder builder, kotlin.jvm.internal.DefaultConstructorMarker defaultConstructorMarker)
  /// The returned object must be released after use, by calling the [release] method.
  factory PutObjectRequest(
    PutObjectRequest_Builder builder,
    jni.JObject defaultConstructorMarker,
  ) {
    return PutObjectRequest.fromReference(_new0(
            _class.reference.pointer,
            _id_new0 as jni.JMethodIDPtr,
            builder.reference.pointer,
            defaultConstructorMarker.reference.pointer)
        .reference);
  }
}

final class $PutObjectRequestType extends jni.JObjType<PutObjectRequest> {
  const $PutObjectRequestType();

  @override
  String get signature =>
      r'Laws/sdk/kotlin/services/s3/model/PutObjectRequest;';

  @override
  PutObjectRequest fromReference(jni.JReference reference) =>
      PutObjectRequest.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($PutObjectRequestType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($PutObjectRequestType) &&
        other is $PutObjectRequestType;
  }
}
