// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:ffi' as ffi;
import 'dart:isolate' show ReceivePort;

import 'package:jni/internal_helpers_for_jnigen.dart';
import 'package:jni/jni.dart' as jni;

import '../../../../smithy/kotlin/runtime/auth/awscredentials/CredentialsProvider.dart'
    as credentialsprovider_;

import '../../../../smithy/kotlin/runtime/net/url/Url.dart' as url_;

import 'model/PutObjectRequest.dart' as putobjectrequest_;

import 'model/PutObjectResponse.dart' as putobjectresponse_;

/// from: aws.sdk.kotlin.services.s3.S3Client$Builder
class S3Client_Builder extends jni.JObject {
  @override
  late final jni.JObjType<S3Client_Builder> $type = type;

  S3Client_Builder.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class =
      jni.JClass.forName(r'aws/sdk/kotlin/services/s3/S3Client$Builder');

  /// The type which includes information such as the signature of this class.
  static const type = $S3Client_BuilderType();
  static final _id_new0 = _class.constructorId(
    r'()V',
  );

  static final _new0 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_NewObject')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public void <init>()
  /// The returned object must be released after use, by calling the [release] method.
  factory S3Client_Builder() {
    return S3Client_Builder.fromReference(
        _new0(_class.reference.pointer, _id_new0 as jni.JMethodIDPtr)
            .reference);
  }

  static final _id_getConfig = _class.instanceMethodId(
    r'getConfig',
    r'()Laws/sdk/kotlin/services/s3/S3Client$Config$Builder;',
  );

  static final _getConfig = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public aws.sdk.kotlin.services.s3.S3Client$Config$Builder getConfig()
  /// The returned object must be released after use, by calling the [release] method.
  S3Client_Config_Builder getConfig() {
    return _getConfig(reference.pointer, _id_getConfig as jni.JMethodIDPtr)
        .object(const $S3Client_Config_BuilderType());
  }

  static final _id_newClient = _class.instanceMethodId(
    r'newClient',
    r'(Laws/sdk/kotlin/services/s3/S3Client$Config;)Laws/sdk/kotlin/services/s3/S3Client;',
  );

  static final _newClient = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: protected aws.sdk.kotlin.services.s3.S3Client newClient(aws.sdk.kotlin.services.s3.S3Client$Config config)
  /// The returned object must be released after use, by calling the [release] method.
  S3Client newClient(
    S3Client_Config config,
  ) {
    return _newClient(reference.pointer, _id_newClient as jni.JMethodIDPtr,
            config.reference.pointer)
        .object(const $S3ClientType());
  }

  static final _id_getConfig1 = _class.instanceMethodId(
    r'getConfig',
    r'()Laws/smithy/kotlin/runtime/client/SdkClientConfig$Builder;',
  );

  static final _getConfig1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public aws.smithy.kotlin.runtime.client.SdkClientConfig$Builder getConfig()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getConfig1() {
    return _getConfig1(reference.pointer, _id_getConfig1 as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_newClient1 = _class.instanceMethodId(
    r'newClient',
    r'(Laws/smithy/kotlin/runtime/client/SdkClientConfig;)Laws/smithy/kotlin/runtime/client/SdkClient;',
  );

  static final _newClient1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public aws.smithy.kotlin.runtime.client.SdkClient newClient(aws.smithy.kotlin.runtime.client.SdkClientConfig sdkClientConfig)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject newClient1(
    jni.JObject sdkClientConfig,
  ) {
    return _newClient1(reference.pointer, _id_newClient1 as jni.JMethodIDPtr,
            sdkClientConfig.reference.pointer)
        .object(const jni.JObjectType());
  }
}

final class $S3Client_BuilderType extends jni.JObjType<S3Client_Builder> {
  const $S3Client_BuilderType();

  @override
  String get signature => r'Laws/sdk/kotlin/services/s3/S3Client$Builder;';

  @override
  S3Client_Builder fromReference(jni.JReference reference) =>
      S3Client_Builder.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($S3Client_BuilderType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($S3Client_BuilderType) &&
        other is $S3Client_BuilderType;
  }
}

/// from: aws.sdk.kotlin.services.s3.S3Client$Companion
class S3Client_Companion extends jni.JObject {
  @override
  late final jni.JObjType<S3Client_Companion> $type = type;

  S3Client_Companion.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class =
      jni.JClass.forName(r'aws/sdk/kotlin/services/s3/S3Client$Companion');

  /// The type which includes information such as the signature of this class.
  static const type = $S3Client_CompanionType();
  static final _id_builder = _class.instanceMethodId(
    r'builder',
    r'()Laws/sdk/kotlin/services/s3/S3Client$Builder;',
  );

  static final _builder = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public aws.sdk.kotlin.services.s3.S3Client$Builder builder()
  /// The returned object must be released after use, by calling the [release] method.
  S3Client_Builder builder() {
    return _builder(reference.pointer, _id_builder as jni.JMethodIDPtr)
        .object(const $S3Client_BuilderType());
  }

  static final _id_finalizeConfig = _class.instanceMethodId(
    r'finalizeConfig',
    r'(Laws/sdk/kotlin/services/s3/S3Client$Builder;)V',
  );

  static final _finalizeConfig = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: protected void finalizeConfig(aws.sdk.kotlin.services.s3.S3Client$Builder builder)
  void finalizeConfig(
    S3Client_Builder builder,
  ) {
    _finalizeConfig(reference.pointer, _id_finalizeConfig as jni.JMethodIDPtr,
            builder.reference.pointer)
        .check();
  }

  static final _id_finalizeEnvironmentalConfig = _class.instanceMethodId(
    r'finalizeEnvironmentalConfig',
    r'(Laws/sdk/kotlin/services/s3/S3Client$Builder;Laws/smithy/kotlin/runtime/util/LazyAsyncValue;Laws/smithy/kotlin/runtime/util/LazyAsyncValue;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;',
  );

  static final _finalizeEnvironmentalConfig = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: protected java.lang.Object finalizeEnvironmentalConfig(aws.sdk.kotlin.services.s3.S3Client$Builder builder, aws.smithy.kotlin.runtime.util.LazyAsyncValue lazyAsyncValue, aws.smithy.kotlin.runtime.util.LazyAsyncValue lazyAsyncValue1, kotlin.coroutines.Continuation continuation)
  /// The returned object must be released after use, by calling the [release] method.
  Future<jni.JObject> finalizeEnvironmentalConfig(
    S3Client_Builder builder,
    jni.JObject lazyAsyncValue,
    jni.JObject lazyAsyncValue1,
  ) async {
    final $p = ReceivePort();
    final $c = jni.JObject.fromReference(
        ProtectedJniExtensions.newPortContinuation($p));
    _finalizeEnvironmentalConfig(
            reference.pointer,
            _id_finalizeEnvironmentalConfig as jni.JMethodIDPtr,
            builder.reference.pointer,
            lazyAsyncValue.reference.pointer,
            lazyAsyncValue1.reference.pointer,
            $c.reference.pointer)
        .object(const jni.JObjectType());
    final $o = jni.JGlobalReference(jni.JObjectPtr.fromAddress(await $p.first));
    final $k = const jni.JObjectType().jClass.reference.pointer;
    if (!jni.Jni.env.IsInstanceOf($o.pointer, $k)) {
      throw 'Failed';
    }
    return const jni.JObjectType().fromReference($o);
  }

  static final _id_builder1 = _class.instanceMethodId(
    r'builder',
    r'()Laws/smithy/kotlin/runtime/client/SdkClient$Builder;',
  );

  static final _builder1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public aws.smithy.kotlin.runtime.client.SdkClient$Builder builder()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject builder1() {
    return _builder1(reference.pointer, _id_builder1 as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_finalizeConfig1 = _class.instanceMethodId(
    r'finalizeConfig',
    r'(Laws/smithy/kotlin/runtime/client/SdkClient$Builder;)V',
  );

  static final _finalizeConfig1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void finalizeConfig(aws.smithy.kotlin.runtime.client.SdkClient$Builder builder)
  void finalizeConfig1(
    jni.JObject builder,
  ) {
    _finalizeConfig1(reference.pointer, _id_finalizeConfig1 as jni.JMethodIDPtr,
            builder.reference.pointer)
        .check();
  }

  static final _id_finalizeEnvironmentalConfig1 = _class.instanceMethodId(
    r'finalizeEnvironmentalConfig',
    r'(Laws/smithy/kotlin/runtime/client/SdkClient$Builder;Laws/smithy/kotlin/runtime/util/LazyAsyncValue;Laws/smithy/kotlin/runtime/util/LazyAsyncValue;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;',
  );

  static final _finalizeEnvironmentalConfig1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.Object finalizeEnvironmentalConfig(aws.smithy.kotlin.runtime.client.SdkClient$Builder builder, aws.smithy.kotlin.runtime.util.LazyAsyncValue lazyAsyncValue, aws.smithy.kotlin.runtime.util.LazyAsyncValue lazyAsyncValue1, kotlin.coroutines.Continuation continuation)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject finalizeEnvironmentalConfig1(
    jni.JObject builder,
    jni.JObject lazyAsyncValue,
    jni.JObject lazyAsyncValue1,
    jni.JObject continuation,
  ) {
    return _finalizeEnvironmentalConfig1(
            reference.pointer,
            _id_finalizeEnvironmentalConfig1 as jni.JMethodIDPtr,
            builder.reference.pointer,
            lazyAsyncValue.reference.pointer,
            lazyAsyncValue1.reference.pointer,
            continuation.reference.pointer)
        .object(const jni.JObjectType());
  }
}

final class $S3Client_CompanionType extends jni.JObjType<S3Client_Companion> {
  const $S3Client_CompanionType();

  @override
  String get signature => r'Laws/sdk/kotlin/services/s3/S3Client$Companion;';

  @override
  S3Client_Companion fromReference(jni.JReference reference) =>
      S3Client_Companion.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($S3Client_CompanionType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($S3Client_CompanionType) &&
        other is $S3Client_CompanionType;
  }
}

/// from: aws.sdk.kotlin.services.s3.S3Client$Config$Builder
class S3Client_Config_Builder extends jni.JObject {
  @override
  late final jni.JObjType<S3Client_Config_Builder> $type = type;

  S3Client_Config_Builder.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class =
      jni.JClass.forName(r'aws/sdk/kotlin/services/s3/S3Client$Config$Builder');

  /// The type which includes information such as the signature of this class.
  static const type = $S3Client_Config_BuilderType();
  static final _id_new0 = _class.constructorId(
    r'()V',
  );

  static final _new0 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_NewObject')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public void <init>()
  /// The returned object must be released after use, by calling the [release] method.
  factory S3Client_Config_Builder() {
    return S3Client_Config_Builder.fromReference(
        _new0(_class.reference.pointer, _id_new0 as jni.JMethodIDPtr)
            .reference);
  }

  static final _id_getHttpClient = _class.instanceMethodId(
    r'getHttpClient',
    r'()Laws/smithy/kotlin/runtime/http/engine/HttpClientEngine;',
  );

  static final _getHttpClient = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public aws.smithy.kotlin.runtime.http.engine.HttpClientEngine getHttpClient()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getHttpClient() {
    return _getHttpClient(
            reference.pointer, _id_getHttpClient as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_setHttpClient = _class.instanceMethodId(
    r'setHttpClient',
    r'(Laws/smithy/kotlin/runtime/http/engine/HttpClientEngine;)V',
  );

  static final _setHttpClient = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void setHttpClient(aws.smithy.kotlin.runtime.http.engine.HttpClientEngine httpClientEngine)
  void setHttpClient(
    jni.JObject httpClientEngine,
  ) {
    _setHttpClient(reference.pointer, _id_setHttpClient as jni.JMethodIDPtr,
            httpClientEngine.reference.pointer)
        .check();
  }

  static final _id_buildHttpEngineConfig = _class.instanceMethodId(
    r'buildHttpEngineConfig',
    r'()Laws/smithy/kotlin/runtime/http/config/HttpEngineConfig;',
  );

  static final _buildHttpEngineConfig = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public aws.smithy.kotlin.runtime.http.config.HttpEngineConfig buildHttpEngineConfig()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject buildHttpEngineConfig() {
    return _buildHttpEngineConfig(
            reference.pointer, _id_buildHttpEngineConfig as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_httpClient = _class.instanceMethodId(
    r'httpClient',
    r'(Laws/smithy/kotlin/runtime/http/config/EngineFactory;Lkotlin/jvm/functions/Function1;)V',
  );

  static final _httpClient = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void httpClient(aws.smithy.kotlin.runtime.http.config.EngineFactory engineFactory, kotlin.jvm.functions.Function1 function1)
  void httpClient<$B extends jni.JObject, $E extends jni.JObject>(
    jni.JObject engineFactory,
    jni.JObject function1, {
    required jni.JObjType<$B> B,
    required jni.JObjType<$E> E,
  }) {
    _httpClient(reference.pointer, _id_httpClient as jni.JMethodIDPtr,
            engineFactory.reference.pointer, function1.reference.pointer)
        .check();
  }

  static final _id_httpClient1 = _class.instanceMethodId(
    r'httpClient',
    r'(Lkotlin/jvm/functions/Function1;)V',
  );

  static final _httpClient1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void httpClient(kotlin.jvm.functions.Function1 function1)
  void httpClient1(
    jni.JObject function1,
  ) {
    _httpClient1(reference.pointer, _id_httpClient1 as jni.JMethodIDPtr,
            function1.reference.pointer)
        .check();
  }

  static final _id_getRetryStrategy = _class.instanceMethodId(
    r'getRetryStrategy',
    r'()Laws/smithy/kotlin/runtime/retries/RetryStrategy;',
  );

  static final _getRetryStrategy = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public aws.smithy.kotlin.runtime.retries.RetryStrategy getRetryStrategy()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getRetryStrategy() {
    return _getRetryStrategy(
            reference.pointer, _id_getRetryStrategy as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_setRetryStrategy = _class.instanceMethodId(
    r'setRetryStrategy',
    r'(Laws/smithy/kotlin/runtime/retries/RetryStrategy;)V',
  );

  static final _setRetryStrategy = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void setRetryStrategy(aws.smithy.kotlin.runtime.retries.RetryStrategy retryStrategy)
  void setRetryStrategy(
    jni.JObject retryStrategy,
  ) {
    _setRetryStrategy(
            reference.pointer,
            _id_setRetryStrategy as jni.JMethodIDPtr,
            retryStrategy.reference.pointer)
        .check();
  }

  static final _id_buildRetryStrategyClientConfig = _class.instanceMethodId(
    r'buildRetryStrategyClientConfig',
    r'()Laws/smithy/kotlin/runtime/client/RetryStrategyClientConfig;',
  );

  static final _buildRetryStrategyClientConfig = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public aws.smithy.kotlin.runtime.client.RetryStrategyClientConfig buildRetryStrategyClientConfig()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject buildRetryStrategyClientConfig() {
    return _buildRetryStrategyClientConfig(reference.pointer,
            _id_buildRetryStrategyClientConfig as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_retryStrategy = _class.instanceMethodId(
    r'retryStrategy',
    r'(Lkotlin/jvm/functions/Function1;)V',
  );

  static final _retryStrategy = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void retryStrategy(kotlin.jvm.functions.Function1 function1)
  void retryStrategy(
    jni.JObject function1,
  ) {
    _retryStrategy(reference.pointer, _id_retryStrategy as jni.JMethodIDPtr,
            function1.reference.pointer)
        .check();
  }

  static final _id_retryStrategy1 = _class.instanceMethodId(
    r'retryStrategy',
    r'(Laws/smithy/kotlin/runtime/util/DslFactory;Lkotlin/jvm/functions/Function1;)V',
  );

  static final _retryStrategy1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void retryStrategy(aws.smithy.kotlin.runtime.util.DslFactory dslFactory, kotlin.jvm.functions.Function1 function1)
  void retryStrategy1<$B extends jni.JObject, $R extends jni.JObject>(
    jni.JObject dslFactory,
    jni.JObject function1, {
    required jni.JObjType<$B> B,
    required jni.JObjType<$R> R,
  }) {
    _retryStrategy1(reference.pointer, _id_retryStrategy1 as jni.JMethodIDPtr,
            dslFactory.reference.pointer, function1.reference.pointer)
        .check();
  }

  static final _id_getClientName = _class.instanceMethodId(
    r'getClientName',
    r'()Ljava/lang/String;',
  );

  static final _getClientName = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public java.lang.String getClientName()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getClientName() {
    return _getClientName(
            reference.pointer, _id_getClientName as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_setClientName = _class.instanceMethodId(
    r'setClientName',
    r'(Ljava/lang/String;)V',
  );

  static final _setClientName = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void setClientName(java.lang.String string)
  void setClientName(
    jni.JString string,
  ) {
    _setClientName(reference.pointer, _id_setClientName as jni.JMethodIDPtr,
            string.reference.pointer)
        .check();
  }

  static final _id_getRegion = _class.instanceMethodId(
    r'getRegion',
    r'()Ljava/lang/String;',
  );

  static final _getRegion = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public java.lang.String getRegion()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getRegion() {
    return _getRegion(reference.pointer, _id_getRegion as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_setRegion = _class.instanceMethodId(
    r'setRegion',
    r'(Ljava/lang/String;)V',
  );

  static final _setRegion = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void setRegion(java.lang.String string)
  void setRegion(
    jni.JString string,
  ) {
    _setRegion(reference.pointer, _id_setRegion as jni.JMethodIDPtr,
            string.reference.pointer)
        .check();
  }

  static final _id_getAuthSchemes = _class.instanceMethodId(
    r'getAuthSchemes',
    r'()Ljava/util/List;',
  );

  static final _getAuthSchemes = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public java.util.List getAuthSchemes()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JList<jni.JObject> getAuthSchemes() {
    return _getAuthSchemes(
            reference.pointer, _id_getAuthSchemes as jni.JMethodIDPtr)
        .object(const jni.JListType(jni.JObjectType()));
  }

  static final _id_setAuthSchemes = _class.instanceMethodId(
    r'setAuthSchemes',
    r'(Ljava/util/List;)V',
  );

  static final _setAuthSchemes = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void setAuthSchemes(java.util.List list)
  void setAuthSchemes(
    jni.JList<jni.JObject> list,
  ) {
    _setAuthSchemes(reference.pointer, _id_setAuthSchemes as jni.JMethodIDPtr,
            list.reference.pointer)
        .check();
  }

  static final _id_getContinueHeaderThresholdBytes = _class.instanceMethodId(
    r'getContinueHeaderThresholdBytes',
    r'()Ljava/lang/Long;',
  );

  static final _getContinueHeaderThresholdBytes = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final java.lang.Long getContinueHeaderThresholdBytes()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JLong getContinueHeaderThresholdBytes() {
    return _getContinueHeaderThresholdBytes(reference.pointer,
            _id_getContinueHeaderThresholdBytes as jni.JMethodIDPtr)
        .object(const jni.JLongType());
  }

  static final _id_setContinueHeaderThresholdBytes = _class.instanceMethodId(
    r'setContinueHeaderThresholdBytes',
    r'(Ljava/lang/Long;)V',
  );

  static final _setContinueHeaderThresholdBytes = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final void setContinueHeaderThresholdBytes(java.lang.Long long)
  void setContinueHeaderThresholdBytes(
    jni.JLong long,
  ) {
    _setContinueHeaderThresholdBytes(
            reference.pointer,
            _id_setContinueHeaderThresholdBytes as jni.JMethodIDPtr,
            long.reference.pointer)
        .check();
  }

  static final _id_getCredentialsProvider = _class.instanceMethodId(
    r'getCredentialsProvider',
    r'()Laws/smithy/kotlin/runtime/auth/awscredentials/CredentialsProvider;',
  );

  static final _getCredentialsProvider = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public aws.smithy.kotlin.runtime.auth.awscredentials.CredentialsProvider getCredentialsProvider()
  /// The returned object must be released after use, by calling the [release] method.
  credentialsprovider_.CredentialsProvider getCredentialsProvider() {
    return _getCredentialsProvider(
            reference.pointer, _id_getCredentialsProvider as jni.JMethodIDPtr)
        .object(const credentialsprovider_.$CredentialsProviderType());
  }

  static final _id_setCredentialsProvider = _class.instanceMethodId(
    r'setCredentialsProvider',
    r'(Laws/smithy/kotlin/runtime/auth/awscredentials/CredentialsProvider;)V',
  );

  static final _setCredentialsProvider = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void setCredentialsProvider(aws.smithy.kotlin.runtime.auth.awscredentials.CredentialsProvider credentialsProvider)
  void setCredentialsProvider(
    credentialsprovider_.CredentialsProvider credentialsProvider,
  ) {
    _setCredentialsProvider(
            reference.pointer,
            _id_setCredentialsProvider as jni.JMethodIDPtr,
            credentialsProvider.reference.pointer)
        .check();
  }

  static final _id_getDisableMrap = _class.instanceMethodId(
    r'getDisableMrap',
    r'()Ljava/lang/Boolean;',
  );

  static final _getDisableMrap = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final java.lang.Boolean getDisableMrap()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JBoolean getDisableMrap() {
    return _getDisableMrap(
            reference.pointer, _id_getDisableMrap as jni.JMethodIDPtr)
        .object(const jni.JBooleanType());
  }

  static final _id_setDisableMrap = _class.instanceMethodId(
    r'setDisableMrap',
    r'(Ljava/lang/Boolean;)V',
  );

  static final _setDisableMrap = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final void setDisableMrap(java.lang.Boolean boolean)
  void setDisableMrap(
    jni.JBoolean boolean,
  ) {
    _setDisableMrap(reference.pointer, _id_setDisableMrap as jni.JMethodIDPtr,
            boolean.reference.pointer)
        .check();
  }

  static final _id_getDisableS3ExpressSessionAuth = _class.instanceMethodId(
    r'getDisableS3ExpressSessionAuth',
    r'()Ljava/lang/Boolean;',
  );

  static final _getDisableS3ExpressSessionAuth = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final java.lang.Boolean getDisableS3ExpressSessionAuth()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JBoolean getDisableS3ExpressSessionAuth() {
    return _getDisableS3ExpressSessionAuth(reference.pointer,
            _id_getDisableS3ExpressSessionAuth as jni.JMethodIDPtr)
        .object(const jni.JBooleanType());
  }

  static final _id_setDisableS3ExpressSessionAuth = _class.instanceMethodId(
    r'setDisableS3ExpressSessionAuth',
    r'(Ljava/lang/Boolean;)V',
  );

  static final _setDisableS3ExpressSessionAuth = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final void setDisableS3ExpressSessionAuth(java.lang.Boolean boolean)
  void setDisableS3ExpressSessionAuth(
    jni.JBoolean boolean,
  ) {
    _setDisableS3ExpressSessionAuth(
            reference.pointer,
            _id_setDisableS3ExpressSessionAuth as jni.JMethodIDPtr,
            boolean.reference.pointer)
        .check();
  }

  static final _id_getEnableAccelerate = _class.instanceMethodId(
    r'getEnableAccelerate',
    r'()Ljava/lang/Boolean;',
  );

  static final _getEnableAccelerate = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final java.lang.Boolean getEnableAccelerate()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JBoolean getEnableAccelerate() {
    return _getEnableAccelerate(
            reference.pointer, _id_getEnableAccelerate as jni.JMethodIDPtr)
        .object(const jni.JBooleanType());
  }

  static final _id_setEnableAccelerate = _class.instanceMethodId(
    r'setEnableAccelerate',
    r'(Ljava/lang/Boolean;)V',
  );

  static final _setEnableAccelerate = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final void setEnableAccelerate(java.lang.Boolean boolean)
  void setEnableAccelerate(
    jni.JBoolean boolean,
  ) {
    _setEnableAccelerate(
            reference.pointer,
            _id_setEnableAccelerate as jni.JMethodIDPtr,
            boolean.reference.pointer)
        .check();
  }

  static final _id_getEnableAwsChunked = _class.instanceMethodId(
    r'getEnableAwsChunked',
    r'()Ljava/lang/Boolean;',
  );

  static final _getEnableAwsChunked = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final java.lang.Boolean getEnableAwsChunked()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JBoolean getEnableAwsChunked() {
    return _getEnableAwsChunked(
            reference.pointer, _id_getEnableAwsChunked as jni.JMethodIDPtr)
        .object(const jni.JBooleanType());
  }

  static final _id_setEnableAwsChunked = _class.instanceMethodId(
    r'setEnableAwsChunked',
    r'(Ljava/lang/Boolean;)V',
  );

  static final _setEnableAwsChunked = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final void setEnableAwsChunked(java.lang.Boolean boolean)
  void setEnableAwsChunked(
    jni.JBoolean boolean,
  ) {
    _setEnableAwsChunked(
            reference.pointer,
            _id_setEnableAwsChunked as jni.JMethodIDPtr,
            boolean.reference.pointer)
        .check();
  }

  static final _id_getEndpointProvider = _class.instanceMethodId(
    r'getEndpointProvider',
    r'()Laws/sdk/kotlin/services/s3/endpoints/S3EndpointProvider;',
  );

  static final _getEndpointProvider = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final aws.sdk.kotlin.services.s3.endpoints.S3EndpointProvider getEndpointProvider()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getEndpointProvider() {
    return _getEndpointProvider(
            reference.pointer, _id_getEndpointProvider as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_setEndpointProvider = _class.instanceMethodId(
    r'setEndpointProvider',
    r'(Laws/sdk/kotlin/services/s3/endpoints/S3EndpointProvider;)V',
  );

  static final _setEndpointProvider = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final void setEndpointProvider(aws.sdk.kotlin.services.s3.endpoints.S3EndpointProvider s3EndpointProvider)
  void setEndpointProvider(
    jni.JObject s3EndpointProvider,
  ) {
    _setEndpointProvider(
            reference.pointer,
            _id_setEndpointProvider as jni.JMethodIDPtr,
            s3EndpointProvider.reference.pointer)
        .check();
  }

  static final _id_getEndpointUrl = _class.instanceMethodId(
    r'getEndpointUrl',
    r'()Laws/smithy/kotlin/runtime/net/url/Url;',
  );

  static final _getEndpointUrl = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final aws.smithy.kotlin.runtime.net.url.Url getEndpointUrl()
  /// The returned object must be released after use, by calling the [release] method.
  url_.Url getEndpointUrl() {
    return _getEndpointUrl(
            reference.pointer, _id_getEndpointUrl as jni.JMethodIDPtr)
        .object(const url_.$UrlType());
  }

  static final _id_setEndpointUrl = _class.instanceMethodId(
    r'setEndpointUrl',
    r'(Laws/smithy/kotlin/runtime/net/url/Url;)V',
  );

  static final _setEndpointUrl = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final void setEndpointUrl(aws.smithy.kotlin.runtime.net.url.Url url)
  void setEndpointUrl(
    url_.Url url,
  ) {
    _setEndpointUrl(reference.pointer, _id_setEndpointUrl as jni.JMethodIDPtr,
            url.reference.pointer)
        .check();
  }

  static final _id_getExpressCredentialsProvider = _class.instanceMethodId(
    r'getExpressCredentialsProvider',
    r'()Laws/smithy/kotlin/runtime/auth/awscredentials/CredentialsProvider;',
  );

  static final _getExpressCredentialsProvider = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final aws.smithy.kotlin.runtime.auth.awscredentials.CredentialsProvider getExpressCredentialsProvider()
  /// The returned object must be released after use, by calling the [release] method.
  credentialsprovider_.CredentialsProvider getExpressCredentialsProvider() {
    return _getExpressCredentialsProvider(reference.pointer,
            _id_getExpressCredentialsProvider as jni.JMethodIDPtr)
        .object(const credentialsprovider_.$CredentialsProviderType());
  }

  static final _id_setExpressCredentialsProvider = _class.instanceMethodId(
    r'setExpressCredentialsProvider',
    r'(Laws/smithy/kotlin/runtime/auth/awscredentials/CredentialsProvider;)V',
  );

  static final _setExpressCredentialsProvider = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final void setExpressCredentialsProvider(aws.smithy.kotlin.runtime.auth.awscredentials.CredentialsProvider credentialsProvider)
  void setExpressCredentialsProvider(
    credentialsprovider_.CredentialsProvider credentialsProvider,
  ) {
    _setExpressCredentialsProvider(
            reference.pointer,
            _id_setExpressCredentialsProvider as jni.JMethodIDPtr,
            credentialsProvider.reference.pointer)
        .check();
  }

  static final _id_getForcePathStyle = _class.instanceMethodId(
    r'getForcePathStyle',
    r'()Ljava/lang/Boolean;',
  );

  static final _getForcePathStyle = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final java.lang.Boolean getForcePathStyle()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JBoolean getForcePathStyle() {
    return _getForcePathStyle(
            reference.pointer, _id_getForcePathStyle as jni.JMethodIDPtr)
        .object(const jni.JBooleanType());
  }

  static final _id_setForcePathStyle = _class.instanceMethodId(
    r'setForcePathStyle',
    r'(Ljava/lang/Boolean;)V',
  );

  static final _setForcePathStyle = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final void setForcePathStyle(java.lang.Boolean boolean)
  void setForcePathStyle(
    jni.JBoolean boolean,
  ) {
    _setForcePathStyle(
            reference.pointer,
            _id_setForcePathStyle as jni.JMethodIDPtr,
            boolean.reference.pointer)
        .check();
  }

  static final _id_getInterceptors = _class.instanceMethodId(
    r'getInterceptors',
    r'()Ljava/util/List;',
  );

  static final _getInterceptors = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public java.util.List getInterceptors()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JList<jni.JObject> getInterceptors() {
    return _getInterceptors(
            reference.pointer, _id_getInterceptors as jni.JMethodIDPtr)
        .object(const jni.JListType(jni.JObjectType()));
  }

  static final _id_setInterceptors = _class.instanceMethodId(
    r'setInterceptors',
    r'(Ljava/util/List;)V',
  );

  static final _setInterceptors = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void setInterceptors(java.util.List list)
  void setInterceptors(
    jni.JList<jni.JObject> list,
  ) {
    _setInterceptors(reference.pointer, _id_setInterceptors as jni.JMethodIDPtr,
            list.reference.pointer)
        .check();
  }

  static final _id_getLogMode = _class.instanceMethodId(
    r'getLogMode',
    r'()Laws/smithy/kotlin/runtime/client/LogMode;',
  );

  static final _getLogMode = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public aws.smithy.kotlin.runtime.client.LogMode getLogMode()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getLogMode() {
    return _getLogMode(reference.pointer, _id_getLogMode as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_setLogMode = _class.instanceMethodId(
    r'setLogMode',
    r'(Laws/smithy/kotlin/runtime/client/LogMode;)V',
  );

  static final _setLogMode = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void setLogMode(aws.smithy.kotlin.runtime.client.LogMode logMode)
  void setLogMode(
    jni.JObject logMode,
  ) {
    _setLogMode(reference.pointer, _id_setLogMode as jni.JMethodIDPtr,
            logMode.reference.pointer)
        .check();
  }

  static final _id_getRetryPolicy = _class.instanceMethodId(
    r'getRetryPolicy',
    r'()Laws/smithy/kotlin/runtime/retries/policy/RetryPolicy;',
  );

  static final _getRetryPolicy = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public aws.smithy.kotlin.runtime.retries.policy.RetryPolicy getRetryPolicy()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getRetryPolicy() {
    return _getRetryPolicy(
            reference.pointer, _id_getRetryPolicy as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_setRetryPolicy = _class.instanceMethodId(
    r'setRetryPolicy',
    r'(Laws/smithy/kotlin/runtime/retries/policy/RetryPolicy;)V',
  );

  static final _setRetryPolicy = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void setRetryPolicy(aws.smithy.kotlin.runtime.retries.policy.RetryPolicy retryPolicy)
  void setRetryPolicy(
    jni.JObject retryPolicy,
  ) {
    _setRetryPolicy(reference.pointer, _id_setRetryPolicy as jni.JMethodIDPtr,
            retryPolicy.reference.pointer)
        .check();
  }

  static final _id_getSigV4aSigningRegionSet = _class.instanceMethodId(
    r'getSigV4aSigningRegionSet',
    r'()Ljava/util/Set;',
  );

  static final _getSigV4aSigningRegionSet = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public java.util.Set getSigV4aSigningRegionSet()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JSet<jni.JString> getSigV4aSigningRegionSet() {
    return _getSigV4aSigningRegionSet(reference.pointer,
            _id_getSigV4aSigningRegionSet as jni.JMethodIDPtr)
        .object(const jni.JSetType(jni.JStringType()));
  }

  static final _id_setSigV4aSigningRegionSet = _class.instanceMethodId(
    r'setSigV4aSigningRegionSet',
    r'(Ljava/util/Set;)V',
  );

  static final _setSigV4aSigningRegionSet = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void setSigV4aSigningRegionSet(java.util.Set set)
  void setSigV4aSigningRegionSet(
    jni.JSet<jni.JString> set0,
  ) {
    _setSigV4aSigningRegionSet(
            reference.pointer,
            _id_setSigV4aSigningRegionSet as jni.JMethodIDPtr,
            set0.reference.pointer)
        .check();
  }

  static final _id_getTelemetryProvider = _class.instanceMethodId(
    r'getTelemetryProvider',
    r'()Laws/smithy/kotlin/runtime/telemetry/TelemetryProvider;',
  );

  static final _getTelemetryProvider = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public aws.smithy.kotlin.runtime.telemetry.TelemetryProvider getTelemetryProvider()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getTelemetryProvider() {
    return _getTelemetryProvider(
            reference.pointer, _id_getTelemetryProvider as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_setTelemetryProvider = _class.instanceMethodId(
    r'setTelemetryProvider',
    r'(Laws/smithy/kotlin/runtime/telemetry/TelemetryProvider;)V',
  );

  static final _setTelemetryProvider = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void setTelemetryProvider(aws.smithy.kotlin.runtime.telemetry.TelemetryProvider telemetryProvider)
  void setTelemetryProvider(
    jni.JObject telemetryProvider,
  ) {
    _setTelemetryProvider(
            reference.pointer,
            _id_setTelemetryProvider as jni.JMethodIDPtr,
            telemetryProvider.reference.pointer)
        .check();
  }

  static final _id_getUseArnRegion = _class.instanceMethodId(
    r'getUseArnRegion',
    r'()Ljava/lang/Boolean;',
  );

  static final _getUseArnRegion = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final java.lang.Boolean getUseArnRegion()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JBoolean getUseArnRegion() {
    return _getUseArnRegion(
            reference.pointer, _id_getUseArnRegion as jni.JMethodIDPtr)
        .object(const jni.JBooleanType());
  }

  static final _id_setUseArnRegion = _class.instanceMethodId(
    r'setUseArnRegion',
    r'(Ljava/lang/Boolean;)V',
  );

  static final _setUseArnRegion = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final void setUseArnRegion(java.lang.Boolean boolean)
  void setUseArnRegion(
    jni.JBoolean boolean,
  ) {
    _setUseArnRegion(reference.pointer, _id_setUseArnRegion as jni.JMethodIDPtr,
            boolean.reference.pointer)
        .check();
  }

  static final _id_getUseDualStack = _class.instanceMethodId(
    r'getUseDualStack',
    r'()Ljava/lang/Boolean;',
  );

  static final _getUseDualStack = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public java.lang.Boolean getUseDualStack()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JBoolean getUseDualStack() {
    return _getUseDualStack(
            reference.pointer, _id_getUseDualStack as jni.JMethodIDPtr)
        .object(const jni.JBooleanType());
  }

  static final _id_setUseDualStack = _class.instanceMethodId(
    r'setUseDualStack',
    r'(Ljava/lang/Boolean;)V',
  );

  static final _setUseDualStack = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void setUseDualStack(java.lang.Boolean boolean)
  void setUseDualStack(
    jni.JBoolean boolean,
  ) {
    _setUseDualStack(reference.pointer, _id_setUseDualStack as jni.JMethodIDPtr,
            boolean.reference.pointer)
        .check();
  }

  static final _id_getUseFips = _class.instanceMethodId(
    r'getUseFips',
    r'()Ljava/lang/Boolean;',
  );

  static final _getUseFips = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public java.lang.Boolean getUseFips()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JBoolean getUseFips() {
    return _getUseFips(reference.pointer, _id_getUseFips as jni.JMethodIDPtr)
        .object(const jni.JBooleanType());
  }

  static final _id_setUseFips = _class.instanceMethodId(
    r'setUseFips',
    r'(Ljava/lang/Boolean;)V',
  );

  static final _setUseFips = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void setUseFips(java.lang.Boolean boolean)
  void setUseFips(
    jni.JBoolean boolean,
  ) {
    _setUseFips(reference.pointer, _id_setUseFips as jni.JMethodIDPtr,
            boolean.reference.pointer)
        .check();
  }

  static final _id_getApplicationId = _class.instanceMethodId(
    r'getApplicationId',
    r'()Ljava/lang/String;',
  );

  static final _getApplicationId = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public java.lang.String getApplicationId()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getApplicationId() {
    return _getApplicationId(
            reference.pointer, _id_getApplicationId as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_setApplicationId = _class.instanceMethodId(
    r'setApplicationId',
    r'(Ljava/lang/String;)V',
  );

  static final _setApplicationId = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void setApplicationId(java.lang.String string)
  void setApplicationId(
    jni.JString string,
  ) {
    _setApplicationId(reference.pointer,
            _id_setApplicationId as jni.JMethodIDPtr, string.reference.pointer)
        .check();
  }

  static final _id_getAuthSchemeProvider = _class.instanceMethodId(
    r'getAuthSchemeProvider',
    r'()Laws/sdk/kotlin/services/s3/auth/S3AuthSchemeProvider;',
  );

  static final _getAuthSchemeProvider = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final aws.sdk.kotlin.services.s3.auth.S3AuthSchemeProvider getAuthSchemeProvider()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getAuthSchemeProvider() {
    return _getAuthSchemeProvider(
            reference.pointer, _id_getAuthSchemeProvider as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_setAuthSchemeProvider = _class.instanceMethodId(
    r'setAuthSchemeProvider',
    r'(Laws/sdk/kotlin/services/s3/auth/S3AuthSchemeProvider;)V',
  );

  static final _setAuthSchemeProvider = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final void setAuthSchemeProvider(aws.sdk.kotlin.services.s3.auth.S3AuthSchemeProvider s3AuthSchemeProvider)
  void setAuthSchemeProvider(
    jni.JObject s3AuthSchemeProvider,
  ) {
    _setAuthSchemeProvider(
            reference.pointer,
            _id_setAuthSchemeProvider as jni.JMethodIDPtr,
            s3AuthSchemeProvider.reference.pointer)
        .check();
  }

  static final _id_build = _class.instanceMethodId(
    r'build',
    r'()Laws/sdk/kotlin/services/s3/S3Client$Config;',
  );

  static final _build = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public aws.sdk.kotlin.services.s3.S3Client$Config build()
  /// The returned object must be released after use, by calling the [release] method.
  S3Client_Config build() {
    return _build(reference.pointer, _id_build as jni.JMethodIDPtr)
        .object(const $S3Client_ConfigType());
  }

  static final _id_build1 = _class.instanceMethodId(
    r'build',
    r'()Ljava/lang/Object;',
  );

  static final _build1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public java.lang.Object build()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject build1() {
    return _build1(reference.pointer, _id_build1 as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }
}

final class $S3Client_Config_BuilderType
    extends jni.JObjType<S3Client_Config_Builder> {
  const $S3Client_Config_BuilderType();

  @override
  String get signature =>
      r'Laws/sdk/kotlin/services/s3/S3Client$Config$Builder;';

  @override
  S3Client_Config_Builder fromReference(jni.JReference reference) =>
      S3Client_Config_Builder.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($S3Client_Config_BuilderType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($S3Client_Config_BuilderType) &&
        other is $S3Client_Config_BuilderType;
  }
}

/// from: aws.sdk.kotlin.services.s3.S3Client$Config$Companion
class S3Client_Config_Companion extends jni.JObject {
  @override
  late final jni.JObjType<S3Client_Config_Companion> $type = type;

  S3Client_Config_Companion.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(
      r'aws/sdk/kotlin/services/s3/S3Client$Config$Companion');

  /// The type which includes information such as the signature of this class.
  static const type = $S3Client_Config_CompanionType();
  static final _id_invoke = _class.instanceMethodId(
    r'invoke',
    r'(Lkotlin/jvm/functions/Function1;)Laws/sdk/kotlin/services/s3/S3Client$Config;',
  );

  static final _invoke = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final aws.sdk.kotlin.services.s3.S3Client$Config invoke(kotlin.jvm.functions.Function1 function1)
  /// The returned object must be released after use, by calling the [release] method.
  S3Client_Config invoke(
    jni.JObject function1,
  ) {
    return _invoke(reference.pointer, _id_invoke as jni.JMethodIDPtr,
            function1.reference.pointer)
        .object(const $S3Client_ConfigType());
  }

  static final _id_new0 = _class.constructorId(
    r'(Lkotlin/jvm/internal/DefaultConstructorMarker;)V',
  );

  static final _new0 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_NewObject')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(kotlin.jvm.internal.DefaultConstructorMarker defaultConstructorMarker)
  /// The returned object must be released after use, by calling the [release] method.
  factory S3Client_Config_Companion(
    jni.JObject defaultConstructorMarker,
  ) {
    return S3Client_Config_Companion.fromReference(_new0(
            _class.reference.pointer,
            _id_new0 as jni.JMethodIDPtr,
            defaultConstructorMarker.reference.pointer)
        .reference);
  }
}

final class $S3Client_Config_CompanionType
    extends jni.JObjType<S3Client_Config_Companion> {
  const $S3Client_Config_CompanionType();

  @override
  String get signature =>
      r'Laws/sdk/kotlin/services/s3/S3Client$Config$Companion;';

  @override
  S3Client_Config_Companion fromReference(jni.JReference reference) =>
      S3Client_Config_Companion.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($S3Client_Config_CompanionType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($S3Client_Config_CompanionType) &&
        other is $S3Client_Config_CompanionType;
  }
}

/// from: aws.sdk.kotlin.services.s3.S3Client$Config
class S3Client_Config extends jni.JObject {
  @override
  late final jni.JObjType<S3Client_Config> $type = type;

  S3Client_Config.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class =
      jni.JClass.forName(r'aws/sdk/kotlin/services/s3/S3Client$Config');

  /// The type which includes information such as the signature of this class.
  static const type = $S3Client_ConfigType();
  static final _id_Companion = _class.staticFieldId(
    r'Companion',
    r'Laws/sdk/kotlin/services/s3/S3Client$Config$Companion;',
  );

  /// from: static public final aws.sdk.kotlin.services.s3.S3Client$Config$Companion Companion
  /// The returned object must be released after use, by calling the [release] method.
  static S3Client_Config_Companion get Companion =>
      _id_Companion.get(_class, const $S3Client_Config_CompanionType());

  static final _id_getHttpClient = _class.instanceMethodId(
    r'getHttpClient',
    r'()Laws/smithy/kotlin/runtime/http/engine/HttpClientEngine;',
  );

  static final _getHttpClient = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public aws.smithy.kotlin.runtime.http.engine.HttpClientEngine getHttpClient()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getHttpClient() {
    return _getHttpClient(
            reference.pointer, _id_getHttpClient as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_getRetryStrategy = _class.instanceMethodId(
    r'getRetryStrategy',
    r'()Laws/smithy/kotlin/runtime/retries/RetryStrategy;',
  );

  static final _getRetryStrategy = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public aws.smithy.kotlin.runtime.retries.RetryStrategy getRetryStrategy()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getRetryStrategy() {
    return _getRetryStrategy(
            reference.pointer, _id_getRetryStrategy as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_getClientName = _class.instanceMethodId(
    r'getClientName',
    r'()Ljava/lang/String;',
  );

  static final _getClientName = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public java.lang.String getClientName()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getClientName() {
    return _getClientName(
            reference.pointer, _id_getClientName as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_getRegion = _class.instanceMethodId(
    r'getRegion',
    r'()Ljava/lang/String;',
  );

  static final _getRegion = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public java.lang.String getRegion()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getRegion() {
    return _getRegion(reference.pointer, _id_getRegion as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_getAuthSchemes = _class.instanceMethodId(
    r'getAuthSchemes',
    r'()Ljava/util/List;',
  );

  static final _getAuthSchemes = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public java.util.List getAuthSchemes()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JList<jni.JObject> getAuthSchemes() {
    return _getAuthSchemes(
            reference.pointer, _id_getAuthSchemes as jni.JMethodIDPtr)
        .object(const jni.JListType(jni.JObjectType()));
  }

  static final _id_getContinueHeaderThresholdBytes = _class.instanceMethodId(
    r'getContinueHeaderThresholdBytes',
    r'()Ljava/lang/Long;',
  );

  static final _getContinueHeaderThresholdBytes = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final java.lang.Long getContinueHeaderThresholdBytes()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JLong getContinueHeaderThresholdBytes() {
    return _getContinueHeaderThresholdBytes(reference.pointer,
            _id_getContinueHeaderThresholdBytes as jni.JMethodIDPtr)
        .object(const jni.JLongType());
  }

  static final _id_getCredentialsProvider = _class.instanceMethodId(
    r'getCredentialsProvider',
    r'()Laws/smithy/kotlin/runtime/auth/awscredentials/CredentialsProvider;',
  );

  static final _getCredentialsProvider = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public aws.smithy.kotlin.runtime.auth.awscredentials.CredentialsProvider getCredentialsProvider()
  /// The returned object must be released after use, by calling the [release] method.
  credentialsprovider_.CredentialsProvider getCredentialsProvider() {
    return _getCredentialsProvider(
            reference.pointer, _id_getCredentialsProvider as jni.JMethodIDPtr)
        .object(const credentialsprovider_.$CredentialsProviderType());
  }

  static final _id_getDisableMrap = _class.instanceMethodId(
    r'getDisableMrap',
    r'()Z',
  );

  static final _getDisableMrap = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final boolean getDisableMrap()
  bool getDisableMrap() {
    return _getDisableMrap(
            reference.pointer, _id_getDisableMrap as jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_getDisableS3ExpressSessionAuth = _class.instanceMethodId(
    r'getDisableS3ExpressSessionAuth',
    r'()Z',
  );

  static final _getDisableS3ExpressSessionAuth = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final boolean getDisableS3ExpressSessionAuth()
  bool getDisableS3ExpressSessionAuth() {
    return _getDisableS3ExpressSessionAuth(reference.pointer,
            _id_getDisableS3ExpressSessionAuth as jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_getEnableAccelerate = _class.instanceMethodId(
    r'getEnableAccelerate',
    r'()Z',
  );

  static final _getEnableAccelerate = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final boolean getEnableAccelerate()
  bool getEnableAccelerate() {
    return _getEnableAccelerate(
            reference.pointer, _id_getEnableAccelerate as jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_getEnableAwsChunked = _class.instanceMethodId(
    r'getEnableAwsChunked',
    r'()Z',
  );

  static final _getEnableAwsChunked = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final boolean getEnableAwsChunked()
  bool getEnableAwsChunked() {
    return _getEnableAwsChunked(
            reference.pointer, _id_getEnableAwsChunked as jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_getEndpointProvider = _class.instanceMethodId(
    r'getEndpointProvider',
    r'()Laws/sdk/kotlin/services/s3/endpoints/S3EndpointProvider;',
  );

  static final _getEndpointProvider = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final aws.sdk.kotlin.services.s3.endpoints.S3EndpointProvider getEndpointProvider()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getEndpointProvider() {
    return _getEndpointProvider(
            reference.pointer, _id_getEndpointProvider as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_getEndpointUrl = _class.instanceMethodId(
    r'getEndpointUrl',
    r'()Laws/smithy/kotlin/runtime/net/url/Url;',
  );

  static final _getEndpointUrl = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final aws.smithy.kotlin.runtime.net.url.Url getEndpointUrl()
  /// The returned object must be released after use, by calling the [release] method.
  url_.Url getEndpointUrl() {
    return _getEndpointUrl(
            reference.pointer, _id_getEndpointUrl as jni.JMethodIDPtr)
        .object(const url_.$UrlType());
  }

  static final _id_getExpressCredentialsProvider = _class.instanceMethodId(
    r'getExpressCredentialsProvider',
    r'()Laws/smithy/kotlin/runtime/auth/awscredentials/CredentialsProvider;',
  );

  static final _getExpressCredentialsProvider = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final aws.smithy.kotlin.runtime.auth.awscredentials.CredentialsProvider getExpressCredentialsProvider()
  /// The returned object must be released after use, by calling the [release] method.
  credentialsprovider_.CredentialsProvider getExpressCredentialsProvider() {
    return _getExpressCredentialsProvider(reference.pointer,
            _id_getExpressCredentialsProvider as jni.JMethodIDPtr)
        .object(const credentialsprovider_.$CredentialsProviderType());
  }

  static final _id_getForcePathStyle = _class.instanceMethodId(
    r'getForcePathStyle',
    r'()Z',
  );

  static final _getForcePathStyle = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final boolean getForcePathStyle()
  bool getForcePathStyle() {
    return _getForcePathStyle(
            reference.pointer, _id_getForcePathStyle as jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_getInterceptors = _class.instanceMethodId(
    r'getInterceptors',
    r'()Ljava/util/List;',
  );

  static final _getInterceptors = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public java.util.List getInterceptors()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JList<jni.JObject> getInterceptors() {
    return _getInterceptors(
            reference.pointer, _id_getInterceptors as jni.JMethodIDPtr)
        .object(const jni.JListType(jni.JObjectType()));
  }

  static final _id_getLogMode = _class.instanceMethodId(
    r'getLogMode',
    r'()Laws/smithy/kotlin/runtime/client/LogMode;',
  );

  static final _getLogMode = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public aws.smithy.kotlin.runtime.client.LogMode getLogMode()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getLogMode() {
    return _getLogMode(reference.pointer, _id_getLogMode as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_getRetryPolicy = _class.instanceMethodId(
    r'getRetryPolicy',
    r'()Laws/smithy/kotlin/runtime/retries/policy/RetryPolicy;',
  );

  static final _getRetryPolicy = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public aws.smithy.kotlin.runtime.retries.policy.RetryPolicy getRetryPolicy()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getRetryPolicy() {
    return _getRetryPolicy(
            reference.pointer, _id_getRetryPolicy as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_getSigV4aSigningRegionSet = _class.instanceMethodId(
    r'getSigV4aSigningRegionSet',
    r'()Ljava/util/Set;',
  );

  static final _getSigV4aSigningRegionSet = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public java.util.Set getSigV4aSigningRegionSet()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JSet<jni.JString> getSigV4aSigningRegionSet() {
    return _getSigV4aSigningRegionSet(reference.pointer,
            _id_getSigV4aSigningRegionSet as jni.JMethodIDPtr)
        .object(const jni.JSetType(jni.JStringType()));
  }

  static final _id_getTelemetryProvider = _class.instanceMethodId(
    r'getTelemetryProvider',
    r'()Laws/smithy/kotlin/runtime/telemetry/TelemetryProvider;',
  );

  static final _getTelemetryProvider = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public aws.smithy.kotlin.runtime.telemetry.TelemetryProvider getTelemetryProvider()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getTelemetryProvider() {
    return _getTelemetryProvider(
            reference.pointer, _id_getTelemetryProvider as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_getUseArnRegion = _class.instanceMethodId(
    r'getUseArnRegion',
    r'()Z',
  );

  static final _getUseArnRegion = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final boolean getUseArnRegion()
  bool getUseArnRegion() {
    return _getUseArnRegion(
            reference.pointer, _id_getUseArnRegion as jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_getUseDualStack = _class.instanceMethodId(
    r'getUseDualStack',
    r'()Z',
  );

  static final _getUseDualStack = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public boolean getUseDualStack()
  bool getUseDualStack() {
    return _getUseDualStack(
            reference.pointer, _id_getUseDualStack as jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_getUseFips = _class.instanceMethodId(
    r'getUseFips',
    r'()Z',
  );

  static final _getUseFips = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public boolean getUseFips()
  bool getUseFips() {
    return _getUseFips(reference.pointer, _id_getUseFips as jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_getApplicationId = _class.instanceMethodId(
    r'getApplicationId',
    r'()Ljava/lang/String;',
  );

  static final _getApplicationId = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public java.lang.String getApplicationId()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getApplicationId() {
    return _getApplicationId(
            reference.pointer, _id_getApplicationId as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_getAuthSchemeProvider = _class.instanceMethodId(
    r'getAuthSchemeProvider',
    r'()Laws/sdk/kotlin/services/s3/auth/S3AuthSchemeProvider;',
  );

  static final _getAuthSchemeProvider = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final aws.sdk.kotlin.services.s3.auth.S3AuthSchemeProvider getAuthSchemeProvider()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getAuthSchemeProvider() {
    return _getAuthSchemeProvider(
            reference.pointer, _id_getAuthSchemeProvider as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_toBuilder = _class.instanceMethodId(
    r'toBuilder',
    r'()Laws/sdk/kotlin/services/s3/S3Client$Config$Builder;',
  );

  static final _toBuilder = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final aws.sdk.kotlin.services.s3.S3Client$Config$Builder toBuilder()
  /// The returned object must be released after use, by calling the [release] method.
  S3Client_Config_Builder toBuilder() {
    return _toBuilder(reference.pointer, _id_toBuilder as jni.JMethodIDPtr)
        .object(const $S3Client_Config_BuilderType());
  }

  static final _id_new0 = _class.constructorId(
    r'(Laws/sdk/kotlin/services/s3/S3Client$Config$Builder;Lkotlin/jvm/internal/DefaultConstructorMarker;)V',
  );

  static final _new0 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_NewObject')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(aws.sdk.kotlin.services.s3.S3Client$Config$Builder builder, kotlin.jvm.internal.DefaultConstructorMarker defaultConstructorMarker)
  /// The returned object must be released after use, by calling the [release] method.
  factory S3Client_Config(
    S3Client_Config_Builder builder,
    jni.JObject defaultConstructorMarker,
  ) {
    return S3Client_Config.fromReference(_new0(
            _class.reference.pointer,
            _id_new0 as jni.JMethodIDPtr,
            builder.reference.pointer,
            defaultConstructorMarker.reference.pointer)
        .reference);
  }
}

final class $S3Client_ConfigType extends jni.JObjType<S3Client_Config> {
  const $S3Client_ConfigType();

  @override
  String get signature => r'Laws/sdk/kotlin/services/s3/S3Client$Config;';

  @override
  S3Client_Config fromReference(jni.JReference reference) =>
      S3Client_Config.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($S3Client_ConfigType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($S3Client_ConfigType) &&
        other is $S3Client_ConfigType;
  }
}

/// from: aws.sdk.kotlin.services.s3.S3Client$DefaultImpls
class S3Client_DefaultImpls extends jni.JObject {
  @override
  late final jni.JObjType<S3Client_DefaultImpls> $type = type;

  S3Client_DefaultImpls.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class =
      jni.JClass.forName(r'aws/sdk/kotlin/services/s3/S3Client$DefaultImpls');

  /// The type which includes information such as the signature of this class.
  static const type = $S3Client_DefaultImplsType();
}

final class $S3Client_DefaultImplsType
    extends jni.JObjType<S3Client_DefaultImpls> {
  const $S3Client_DefaultImplsType();

  @override
  String get signature => r'Laws/sdk/kotlin/services/s3/S3Client$DefaultImpls;';

  @override
  S3Client_DefaultImpls fromReference(jni.JReference reference) =>
      S3Client_DefaultImpls.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($S3Client_DefaultImplsType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($S3Client_DefaultImplsType) &&
        other is $S3Client_DefaultImplsType;
  }
}

/// from: aws.sdk.kotlin.services.s3.S3Client
class S3Client extends jni.JObject {
  @override
  late final jni.JObjType<S3Client> $type = type;

  S3Client.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class =
      jni.JClass.forName(r'aws/sdk/kotlin/services/s3/S3Client');

  /// The type which includes information such as the signature of this class.
  static const type = $S3ClientType();
  static final _id_Companion = _class.staticFieldId(
    r'Companion',
    r'Laws/sdk/kotlin/services/s3/S3Client$Companion;',
  );

  /// from: static public final aws.sdk.kotlin.services.s3.S3Client$Companion Companion
  /// The returned object must be released after use, by calling the [release] method.
  static S3Client_Companion get Companion =>
      _id_Companion.get(_class, const $S3Client_CompanionType());

  static final _id_getConfig = _class.instanceMethodId(
    r'getConfig',
    r'()Laws/sdk/kotlin/services/s3/S3Client$Config;',
  );

  static final _getConfig = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract aws.sdk.kotlin.services.s3.S3Client$Config getConfig()
  /// The returned object must be released after use, by calling the [release] method.
  S3Client_Config getConfig() {
    return _getConfig(reference.pointer, _id_getConfig as jni.JMethodIDPtr)
        .object(const $S3Client_ConfigType());
  }

  static final _id_abortMultipartUpload = _class.instanceMethodId(
    r'abortMultipartUpload',
    r'(Laws/sdk/kotlin/services/s3/model/AbortMultipartUploadRequest;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;',
  );

  static final _abortMultipartUpload = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.lang.Object abortMultipartUpload(aws.sdk.kotlin.services.s3.model.AbortMultipartUploadRequest abortMultipartUploadRequest, kotlin.coroutines.Continuation continuation)
  /// The returned object must be released after use, by calling the [release] method.
  Future<jni.JObject> abortMultipartUpload(
    jni.JObject abortMultipartUploadRequest,
  ) async {
    final $p = ReceivePort();
    final $c = jni.JObject.fromReference(
        ProtectedJniExtensions.newPortContinuation($p));
    _abortMultipartUpload(
            reference.pointer,
            _id_abortMultipartUpload as jni.JMethodIDPtr,
            abortMultipartUploadRequest.reference.pointer,
            $c.reference.pointer)
        .object(const jni.JObjectType());
    final $o = jni.JGlobalReference(jni.JObjectPtr.fromAddress(await $p.first));
    final $k = const jni.JObjectType().jClass.reference.pointer;
    if (!jni.Jni.env.IsInstanceOf($o.pointer, $k)) {
      throw 'Failed';
    }
    return const jni.JObjectType().fromReference($o);
  }

  static final _id_completeMultipartUpload = _class.instanceMethodId(
    r'completeMultipartUpload',
    r'(Laws/sdk/kotlin/services/s3/model/CompleteMultipartUploadRequest;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;',
  );

  static final _completeMultipartUpload = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.lang.Object completeMultipartUpload(aws.sdk.kotlin.services.s3.model.CompleteMultipartUploadRequest completeMultipartUploadRequest, kotlin.coroutines.Continuation continuation)
  /// The returned object must be released after use, by calling the [release] method.
  Future<jni.JObject> completeMultipartUpload(
    jni.JObject completeMultipartUploadRequest,
  ) async {
    final $p = ReceivePort();
    final $c = jni.JObject.fromReference(
        ProtectedJniExtensions.newPortContinuation($p));
    _completeMultipartUpload(
            reference.pointer,
            _id_completeMultipartUpload as jni.JMethodIDPtr,
            completeMultipartUploadRequest.reference.pointer,
            $c.reference.pointer)
        .object(const jni.JObjectType());
    final $o = jni.JGlobalReference(jni.JObjectPtr.fromAddress(await $p.first));
    final $k = const jni.JObjectType().jClass.reference.pointer;
    if (!jni.Jni.env.IsInstanceOf($o.pointer, $k)) {
      throw 'Failed';
    }
    return const jni.JObjectType().fromReference($o);
  }

  static final _id_copyObject = _class.instanceMethodId(
    r'copyObject',
    r'(Laws/sdk/kotlin/services/s3/model/CopyObjectRequest;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;',
  );

  static final _copyObject = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.lang.Object copyObject(aws.sdk.kotlin.services.s3.model.CopyObjectRequest copyObjectRequest, kotlin.coroutines.Continuation continuation)
  /// The returned object must be released after use, by calling the [release] method.
  Future<jni.JObject> copyObject(
    jni.JObject copyObjectRequest,
  ) async {
    final $p = ReceivePort();
    final $c = jni.JObject.fromReference(
        ProtectedJniExtensions.newPortContinuation($p));
    _copyObject(reference.pointer, _id_copyObject as jni.JMethodIDPtr,
            copyObjectRequest.reference.pointer, $c.reference.pointer)
        .object(const jni.JObjectType());
    final $o = jni.JGlobalReference(jni.JObjectPtr.fromAddress(await $p.first));
    final $k = const jni.JObjectType().jClass.reference.pointer;
    if (!jni.Jni.env.IsInstanceOf($o.pointer, $k)) {
      throw 'Failed';
    }
    return const jni.JObjectType().fromReference($o);
  }

  static final _id_createBucket = _class.instanceMethodId(
    r'createBucket',
    r'(Laws/sdk/kotlin/services/s3/model/CreateBucketRequest;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;',
  );

  static final _createBucket = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.lang.Object createBucket(aws.sdk.kotlin.services.s3.model.CreateBucketRequest createBucketRequest, kotlin.coroutines.Continuation continuation)
  /// The returned object must be released after use, by calling the [release] method.
  Future<jni.JObject> createBucket(
    jni.JObject createBucketRequest,
  ) async {
    final $p = ReceivePort();
    final $c = jni.JObject.fromReference(
        ProtectedJniExtensions.newPortContinuation($p));
    _createBucket(reference.pointer, _id_createBucket as jni.JMethodIDPtr,
            createBucketRequest.reference.pointer, $c.reference.pointer)
        .object(const jni.JObjectType());
    final $o = jni.JGlobalReference(jni.JObjectPtr.fromAddress(await $p.first));
    final $k = const jni.JObjectType().jClass.reference.pointer;
    if (!jni.Jni.env.IsInstanceOf($o.pointer, $k)) {
      throw 'Failed';
    }
    return const jni.JObjectType().fromReference($o);
  }

  static final _id_createMultipartUpload = _class.instanceMethodId(
    r'createMultipartUpload',
    r'(Laws/sdk/kotlin/services/s3/model/CreateMultipartUploadRequest;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;',
  );

  static final _createMultipartUpload = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.lang.Object createMultipartUpload(aws.sdk.kotlin.services.s3.model.CreateMultipartUploadRequest createMultipartUploadRequest, kotlin.coroutines.Continuation continuation)
  /// The returned object must be released after use, by calling the [release] method.
  Future<jni.JObject> createMultipartUpload(
    jni.JObject createMultipartUploadRequest,
  ) async {
    final $p = ReceivePort();
    final $c = jni.JObject.fromReference(
        ProtectedJniExtensions.newPortContinuation($p));
    _createMultipartUpload(
            reference.pointer,
            _id_createMultipartUpload as jni.JMethodIDPtr,
            createMultipartUploadRequest.reference.pointer,
            $c.reference.pointer)
        .object(const jni.JObjectType());
    final $o = jni.JGlobalReference(jni.JObjectPtr.fromAddress(await $p.first));
    final $k = const jni.JObjectType().jClass.reference.pointer;
    if (!jni.Jni.env.IsInstanceOf($o.pointer, $k)) {
      throw 'Failed';
    }
    return const jni.JObjectType().fromReference($o);
  }

  static final _id_createSession = _class.instanceMethodId(
    r'createSession',
    r'(Laws/sdk/kotlin/services/s3/model/CreateSessionRequest;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;',
  );

  static final _createSession = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.lang.Object createSession(aws.sdk.kotlin.services.s3.model.CreateSessionRequest createSessionRequest, kotlin.coroutines.Continuation continuation)
  /// The returned object must be released after use, by calling the [release] method.
  Future<jni.JObject> createSession(
    jni.JObject createSessionRequest,
  ) async {
    final $p = ReceivePort();
    final $c = jni.JObject.fromReference(
        ProtectedJniExtensions.newPortContinuation($p));
    _createSession(reference.pointer, _id_createSession as jni.JMethodIDPtr,
            createSessionRequest.reference.pointer, $c.reference.pointer)
        .object(const jni.JObjectType());
    final $o = jni.JGlobalReference(jni.JObjectPtr.fromAddress(await $p.first));
    final $k = const jni.JObjectType().jClass.reference.pointer;
    if (!jni.Jni.env.IsInstanceOf($o.pointer, $k)) {
      throw 'Failed';
    }
    return const jni.JObjectType().fromReference($o);
  }

  static final _id_deleteBucket = _class.instanceMethodId(
    r'deleteBucket',
    r'(Laws/sdk/kotlin/services/s3/model/DeleteBucketRequest;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;',
  );

  static final _deleteBucket = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.lang.Object deleteBucket(aws.sdk.kotlin.services.s3.model.DeleteBucketRequest deleteBucketRequest, kotlin.coroutines.Continuation continuation)
  /// The returned object must be released after use, by calling the [release] method.
  Future<jni.JObject> deleteBucket(
    jni.JObject deleteBucketRequest,
  ) async {
    final $p = ReceivePort();
    final $c = jni.JObject.fromReference(
        ProtectedJniExtensions.newPortContinuation($p));
    _deleteBucket(reference.pointer, _id_deleteBucket as jni.JMethodIDPtr,
            deleteBucketRequest.reference.pointer, $c.reference.pointer)
        .object(const jni.JObjectType());
    final $o = jni.JGlobalReference(jni.JObjectPtr.fromAddress(await $p.first));
    final $k = const jni.JObjectType().jClass.reference.pointer;
    if (!jni.Jni.env.IsInstanceOf($o.pointer, $k)) {
      throw 'Failed';
    }
    return const jni.JObjectType().fromReference($o);
  }

  static final _id_deleteBucketAnalyticsConfiguration = _class.instanceMethodId(
    r'deleteBucketAnalyticsConfiguration',
    r'(Laws/sdk/kotlin/services/s3/model/DeleteBucketAnalyticsConfigurationRequest;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;',
  );

  static final _deleteBucketAnalyticsConfiguration =
      ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<
                          (
                            ffi.Pointer<ffi.Void>,
                            ffi.Pointer<ffi.Void>
                          )>)>>('globalEnv_CallObjectMethod')
          .asFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.lang.Object deleteBucketAnalyticsConfiguration(aws.sdk.kotlin.services.s3.model.DeleteBucketAnalyticsConfigurationRequest deleteBucketAnalyticsConfigurationRequest, kotlin.coroutines.Continuation continuation)
  /// The returned object must be released after use, by calling the [release] method.
  Future<jni.JObject> deleteBucketAnalyticsConfiguration(
    jni.JObject deleteBucketAnalyticsConfigurationRequest,
  ) async {
    final $p = ReceivePort();
    final $c = jni.JObject.fromReference(
        ProtectedJniExtensions.newPortContinuation($p));
    _deleteBucketAnalyticsConfiguration(
            reference.pointer,
            _id_deleteBucketAnalyticsConfiguration as jni.JMethodIDPtr,
            deleteBucketAnalyticsConfigurationRequest.reference.pointer,
            $c.reference.pointer)
        .object(const jni.JObjectType());
    final $o = jni.JGlobalReference(jni.JObjectPtr.fromAddress(await $p.first));
    final $k = const jni.JObjectType().jClass.reference.pointer;
    if (!jni.Jni.env.IsInstanceOf($o.pointer, $k)) {
      throw 'Failed';
    }
    return const jni.JObjectType().fromReference($o);
  }

  static final _id_deleteBucketCors = _class.instanceMethodId(
    r'deleteBucketCors',
    r'(Laws/sdk/kotlin/services/s3/model/DeleteBucketCorsRequest;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;',
  );

  static final _deleteBucketCors = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.lang.Object deleteBucketCors(aws.sdk.kotlin.services.s3.model.DeleteBucketCorsRequest deleteBucketCorsRequest, kotlin.coroutines.Continuation continuation)
  /// The returned object must be released after use, by calling the [release] method.
  Future<jni.JObject> deleteBucketCors(
    jni.JObject deleteBucketCorsRequest,
  ) async {
    final $p = ReceivePort();
    final $c = jni.JObject.fromReference(
        ProtectedJniExtensions.newPortContinuation($p));
    _deleteBucketCors(
            reference.pointer,
            _id_deleteBucketCors as jni.JMethodIDPtr,
            deleteBucketCorsRequest.reference.pointer,
            $c.reference.pointer)
        .object(const jni.JObjectType());
    final $o = jni.JGlobalReference(jni.JObjectPtr.fromAddress(await $p.first));
    final $k = const jni.JObjectType().jClass.reference.pointer;
    if (!jni.Jni.env.IsInstanceOf($o.pointer, $k)) {
      throw 'Failed';
    }
    return const jni.JObjectType().fromReference($o);
  }

  static final _id_deleteBucketEncryption = _class.instanceMethodId(
    r'deleteBucketEncryption',
    r'(Laws/sdk/kotlin/services/s3/model/DeleteBucketEncryptionRequest;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;',
  );

  static final _deleteBucketEncryption = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.lang.Object deleteBucketEncryption(aws.sdk.kotlin.services.s3.model.DeleteBucketEncryptionRequest deleteBucketEncryptionRequest, kotlin.coroutines.Continuation continuation)
  /// The returned object must be released after use, by calling the [release] method.
  Future<jni.JObject> deleteBucketEncryption(
    jni.JObject deleteBucketEncryptionRequest,
  ) async {
    final $p = ReceivePort();
    final $c = jni.JObject.fromReference(
        ProtectedJniExtensions.newPortContinuation($p));
    _deleteBucketEncryption(
            reference.pointer,
            _id_deleteBucketEncryption as jni.JMethodIDPtr,
            deleteBucketEncryptionRequest.reference.pointer,
            $c.reference.pointer)
        .object(const jni.JObjectType());
    final $o = jni.JGlobalReference(jni.JObjectPtr.fromAddress(await $p.first));
    final $k = const jni.JObjectType().jClass.reference.pointer;
    if (!jni.Jni.env.IsInstanceOf($o.pointer, $k)) {
      throw 'Failed';
    }
    return const jni.JObjectType().fromReference($o);
  }

  static final _id_deleteBucketIntelligentTieringConfiguration =
      _class.instanceMethodId(
    r'deleteBucketIntelligentTieringConfiguration',
    r'(Laws/sdk/kotlin/services/s3/model/DeleteBucketIntelligentTieringConfigurationRequest;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;',
  );

  static final _deleteBucketIntelligentTieringConfiguration =
      ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<
                          (
                            ffi.Pointer<ffi.Void>,
                            ffi.Pointer<ffi.Void>
                          )>)>>('globalEnv_CallObjectMethod')
          .asFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.lang.Object deleteBucketIntelligentTieringConfiguration(aws.sdk.kotlin.services.s3.model.DeleteBucketIntelligentTieringConfigurationRequest deleteBucketIntelligentTieringConfigurationRequest, kotlin.coroutines.Continuation continuation)
  /// The returned object must be released after use, by calling the [release] method.
  Future<jni.JObject> deleteBucketIntelligentTieringConfiguration(
    jni.JObject deleteBucketIntelligentTieringConfigurationRequest,
  ) async {
    final $p = ReceivePort();
    final $c = jni.JObject.fromReference(
        ProtectedJniExtensions.newPortContinuation($p));
    _deleteBucketIntelligentTieringConfiguration(
            reference.pointer,
            _id_deleteBucketIntelligentTieringConfiguration as jni.JMethodIDPtr,
            deleteBucketIntelligentTieringConfigurationRequest
                .reference.pointer,
            $c.reference.pointer)
        .object(const jni.JObjectType());
    final $o = jni.JGlobalReference(jni.JObjectPtr.fromAddress(await $p.first));
    final $k = const jni.JObjectType().jClass.reference.pointer;
    if (!jni.Jni.env.IsInstanceOf($o.pointer, $k)) {
      throw 'Failed';
    }
    return const jni.JObjectType().fromReference($o);
  }

  static final _id_deleteBucketInventoryConfiguration = _class.instanceMethodId(
    r'deleteBucketInventoryConfiguration',
    r'(Laws/sdk/kotlin/services/s3/model/DeleteBucketInventoryConfigurationRequest;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;',
  );

  static final _deleteBucketInventoryConfiguration =
      ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<
                          (
                            ffi.Pointer<ffi.Void>,
                            ffi.Pointer<ffi.Void>
                          )>)>>('globalEnv_CallObjectMethod')
          .asFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.lang.Object deleteBucketInventoryConfiguration(aws.sdk.kotlin.services.s3.model.DeleteBucketInventoryConfigurationRequest deleteBucketInventoryConfigurationRequest, kotlin.coroutines.Continuation continuation)
  /// The returned object must be released after use, by calling the [release] method.
  Future<jni.JObject> deleteBucketInventoryConfiguration(
    jni.JObject deleteBucketInventoryConfigurationRequest,
  ) async {
    final $p = ReceivePort();
    final $c = jni.JObject.fromReference(
        ProtectedJniExtensions.newPortContinuation($p));
    _deleteBucketInventoryConfiguration(
            reference.pointer,
            _id_deleteBucketInventoryConfiguration as jni.JMethodIDPtr,
            deleteBucketInventoryConfigurationRequest.reference.pointer,
            $c.reference.pointer)
        .object(const jni.JObjectType());
    final $o = jni.JGlobalReference(jni.JObjectPtr.fromAddress(await $p.first));
    final $k = const jni.JObjectType().jClass.reference.pointer;
    if (!jni.Jni.env.IsInstanceOf($o.pointer, $k)) {
      throw 'Failed';
    }
    return const jni.JObjectType().fromReference($o);
  }

  static final _id_deleteBucketLifecycle = _class.instanceMethodId(
    r'deleteBucketLifecycle',
    r'(Laws/sdk/kotlin/services/s3/model/DeleteBucketLifecycleRequest;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;',
  );

  static final _deleteBucketLifecycle = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.lang.Object deleteBucketLifecycle(aws.sdk.kotlin.services.s3.model.DeleteBucketLifecycleRequest deleteBucketLifecycleRequest, kotlin.coroutines.Continuation continuation)
  /// The returned object must be released after use, by calling the [release] method.
  Future<jni.JObject> deleteBucketLifecycle(
    jni.JObject deleteBucketLifecycleRequest,
  ) async {
    final $p = ReceivePort();
    final $c = jni.JObject.fromReference(
        ProtectedJniExtensions.newPortContinuation($p));
    _deleteBucketLifecycle(
            reference.pointer,
            _id_deleteBucketLifecycle as jni.JMethodIDPtr,
            deleteBucketLifecycleRequest.reference.pointer,
            $c.reference.pointer)
        .object(const jni.JObjectType());
    final $o = jni.JGlobalReference(jni.JObjectPtr.fromAddress(await $p.first));
    final $k = const jni.JObjectType().jClass.reference.pointer;
    if (!jni.Jni.env.IsInstanceOf($o.pointer, $k)) {
      throw 'Failed';
    }
    return const jni.JObjectType().fromReference($o);
  }

  static final _id_deleteBucketMetricsConfiguration = _class.instanceMethodId(
    r'deleteBucketMetricsConfiguration',
    r'(Laws/sdk/kotlin/services/s3/model/DeleteBucketMetricsConfigurationRequest;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;',
  );

  static final _deleteBucketMetricsConfiguration =
      ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<
                          (
                            ffi.Pointer<ffi.Void>,
                            ffi.Pointer<ffi.Void>
                          )>)>>('globalEnv_CallObjectMethod')
          .asFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.lang.Object deleteBucketMetricsConfiguration(aws.sdk.kotlin.services.s3.model.DeleteBucketMetricsConfigurationRequest deleteBucketMetricsConfigurationRequest, kotlin.coroutines.Continuation continuation)
  /// The returned object must be released after use, by calling the [release] method.
  Future<jni.JObject> deleteBucketMetricsConfiguration(
    jni.JObject deleteBucketMetricsConfigurationRequest,
  ) async {
    final $p = ReceivePort();
    final $c = jni.JObject.fromReference(
        ProtectedJniExtensions.newPortContinuation($p));
    _deleteBucketMetricsConfiguration(
            reference.pointer,
            _id_deleteBucketMetricsConfiguration as jni.JMethodIDPtr,
            deleteBucketMetricsConfigurationRequest.reference.pointer,
            $c.reference.pointer)
        .object(const jni.JObjectType());
    final $o = jni.JGlobalReference(jni.JObjectPtr.fromAddress(await $p.first));
    final $k = const jni.JObjectType().jClass.reference.pointer;
    if (!jni.Jni.env.IsInstanceOf($o.pointer, $k)) {
      throw 'Failed';
    }
    return const jni.JObjectType().fromReference($o);
  }

  static final _id_deleteBucketOwnershipControls = _class.instanceMethodId(
    r'deleteBucketOwnershipControls',
    r'(Laws/sdk/kotlin/services/s3/model/DeleteBucketOwnershipControlsRequest;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;',
  );

  static final _deleteBucketOwnershipControls = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.lang.Object deleteBucketOwnershipControls(aws.sdk.kotlin.services.s3.model.DeleteBucketOwnershipControlsRequest deleteBucketOwnershipControlsRequest, kotlin.coroutines.Continuation continuation)
  /// The returned object must be released after use, by calling the [release] method.
  Future<jni.JObject> deleteBucketOwnershipControls(
    jni.JObject deleteBucketOwnershipControlsRequest,
  ) async {
    final $p = ReceivePort();
    final $c = jni.JObject.fromReference(
        ProtectedJniExtensions.newPortContinuation($p));
    _deleteBucketOwnershipControls(
            reference.pointer,
            _id_deleteBucketOwnershipControls as jni.JMethodIDPtr,
            deleteBucketOwnershipControlsRequest.reference.pointer,
            $c.reference.pointer)
        .object(const jni.JObjectType());
    final $o = jni.JGlobalReference(jni.JObjectPtr.fromAddress(await $p.first));
    final $k = const jni.JObjectType().jClass.reference.pointer;
    if (!jni.Jni.env.IsInstanceOf($o.pointer, $k)) {
      throw 'Failed';
    }
    return const jni.JObjectType().fromReference($o);
  }

  static final _id_deleteBucketPolicy = _class.instanceMethodId(
    r'deleteBucketPolicy',
    r'(Laws/sdk/kotlin/services/s3/model/DeleteBucketPolicyRequest;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;',
  );

  static final _deleteBucketPolicy = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.lang.Object deleteBucketPolicy(aws.sdk.kotlin.services.s3.model.DeleteBucketPolicyRequest deleteBucketPolicyRequest, kotlin.coroutines.Continuation continuation)
  /// The returned object must be released after use, by calling the [release] method.
  Future<jni.JObject> deleteBucketPolicy(
    jni.JObject deleteBucketPolicyRequest,
  ) async {
    final $p = ReceivePort();
    final $c = jni.JObject.fromReference(
        ProtectedJniExtensions.newPortContinuation($p));
    _deleteBucketPolicy(
            reference.pointer,
            _id_deleteBucketPolicy as jni.JMethodIDPtr,
            deleteBucketPolicyRequest.reference.pointer,
            $c.reference.pointer)
        .object(const jni.JObjectType());
    final $o = jni.JGlobalReference(jni.JObjectPtr.fromAddress(await $p.first));
    final $k = const jni.JObjectType().jClass.reference.pointer;
    if (!jni.Jni.env.IsInstanceOf($o.pointer, $k)) {
      throw 'Failed';
    }
    return const jni.JObjectType().fromReference($o);
  }

  static final _id_deleteBucketReplication = _class.instanceMethodId(
    r'deleteBucketReplication',
    r'(Laws/sdk/kotlin/services/s3/model/DeleteBucketReplicationRequest;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;',
  );

  static final _deleteBucketReplication = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.lang.Object deleteBucketReplication(aws.sdk.kotlin.services.s3.model.DeleteBucketReplicationRequest deleteBucketReplicationRequest, kotlin.coroutines.Continuation continuation)
  /// The returned object must be released after use, by calling the [release] method.
  Future<jni.JObject> deleteBucketReplication(
    jni.JObject deleteBucketReplicationRequest,
  ) async {
    final $p = ReceivePort();
    final $c = jni.JObject.fromReference(
        ProtectedJniExtensions.newPortContinuation($p));
    _deleteBucketReplication(
            reference.pointer,
            _id_deleteBucketReplication as jni.JMethodIDPtr,
            deleteBucketReplicationRequest.reference.pointer,
            $c.reference.pointer)
        .object(const jni.JObjectType());
    final $o = jni.JGlobalReference(jni.JObjectPtr.fromAddress(await $p.first));
    final $k = const jni.JObjectType().jClass.reference.pointer;
    if (!jni.Jni.env.IsInstanceOf($o.pointer, $k)) {
      throw 'Failed';
    }
    return const jni.JObjectType().fromReference($o);
  }

  static final _id_deleteBucketTagging = _class.instanceMethodId(
    r'deleteBucketTagging',
    r'(Laws/sdk/kotlin/services/s3/model/DeleteBucketTaggingRequest;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;',
  );

  static final _deleteBucketTagging = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.lang.Object deleteBucketTagging(aws.sdk.kotlin.services.s3.model.DeleteBucketTaggingRequest deleteBucketTaggingRequest, kotlin.coroutines.Continuation continuation)
  /// The returned object must be released after use, by calling the [release] method.
  Future<jni.JObject> deleteBucketTagging(
    jni.JObject deleteBucketTaggingRequest,
  ) async {
    final $p = ReceivePort();
    final $c = jni.JObject.fromReference(
        ProtectedJniExtensions.newPortContinuation($p));
    _deleteBucketTagging(
            reference.pointer,
            _id_deleteBucketTagging as jni.JMethodIDPtr,
            deleteBucketTaggingRequest.reference.pointer,
            $c.reference.pointer)
        .object(const jni.JObjectType());
    final $o = jni.JGlobalReference(jni.JObjectPtr.fromAddress(await $p.first));
    final $k = const jni.JObjectType().jClass.reference.pointer;
    if (!jni.Jni.env.IsInstanceOf($o.pointer, $k)) {
      throw 'Failed';
    }
    return const jni.JObjectType().fromReference($o);
  }

  static final _id_deleteBucketWebsite = _class.instanceMethodId(
    r'deleteBucketWebsite',
    r'(Laws/sdk/kotlin/services/s3/model/DeleteBucketWebsiteRequest;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;',
  );

  static final _deleteBucketWebsite = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.lang.Object deleteBucketWebsite(aws.sdk.kotlin.services.s3.model.DeleteBucketWebsiteRequest deleteBucketWebsiteRequest, kotlin.coroutines.Continuation continuation)
  /// The returned object must be released after use, by calling the [release] method.
  Future<jni.JObject> deleteBucketWebsite(
    jni.JObject deleteBucketWebsiteRequest,
  ) async {
    final $p = ReceivePort();
    final $c = jni.JObject.fromReference(
        ProtectedJniExtensions.newPortContinuation($p));
    _deleteBucketWebsite(
            reference.pointer,
            _id_deleteBucketWebsite as jni.JMethodIDPtr,
            deleteBucketWebsiteRequest.reference.pointer,
            $c.reference.pointer)
        .object(const jni.JObjectType());
    final $o = jni.JGlobalReference(jni.JObjectPtr.fromAddress(await $p.first));
    final $k = const jni.JObjectType().jClass.reference.pointer;
    if (!jni.Jni.env.IsInstanceOf($o.pointer, $k)) {
      throw 'Failed';
    }
    return const jni.JObjectType().fromReference($o);
  }

  static final _id_deleteObject = _class.instanceMethodId(
    r'deleteObject',
    r'(Laws/sdk/kotlin/services/s3/model/DeleteObjectRequest;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;',
  );

  static final _deleteObject = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.lang.Object deleteObject(aws.sdk.kotlin.services.s3.model.DeleteObjectRequest deleteObjectRequest, kotlin.coroutines.Continuation continuation)
  /// The returned object must be released after use, by calling the [release] method.
  Future<jni.JObject> deleteObject(
    jni.JObject deleteObjectRequest,
  ) async {
    final $p = ReceivePort();
    final $c = jni.JObject.fromReference(
        ProtectedJniExtensions.newPortContinuation($p));
    _deleteObject(reference.pointer, _id_deleteObject as jni.JMethodIDPtr,
            deleteObjectRequest.reference.pointer, $c.reference.pointer)
        .object(const jni.JObjectType());
    final $o = jni.JGlobalReference(jni.JObjectPtr.fromAddress(await $p.first));
    final $k = const jni.JObjectType().jClass.reference.pointer;
    if (!jni.Jni.env.IsInstanceOf($o.pointer, $k)) {
      throw 'Failed';
    }
    return const jni.JObjectType().fromReference($o);
  }

  static final _id_deleteObjectTagging = _class.instanceMethodId(
    r'deleteObjectTagging',
    r'(Laws/sdk/kotlin/services/s3/model/DeleteObjectTaggingRequest;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;',
  );

  static final _deleteObjectTagging = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.lang.Object deleteObjectTagging(aws.sdk.kotlin.services.s3.model.DeleteObjectTaggingRequest deleteObjectTaggingRequest, kotlin.coroutines.Continuation continuation)
  /// The returned object must be released after use, by calling the [release] method.
  Future<jni.JObject> deleteObjectTagging(
    jni.JObject deleteObjectTaggingRequest,
  ) async {
    final $p = ReceivePort();
    final $c = jni.JObject.fromReference(
        ProtectedJniExtensions.newPortContinuation($p));
    _deleteObjectTagging(
            reference.pointer,
            _id_deleteObjectTagging as jni.JMethodIDPtr,
            deleteObjectTaggingRequest.reference.pointer,
            $c.reference.pointer)
        .object(const jni.JObjectType());
    final $o = jni.JGlobalReference(jni.JObjectPtr.fromAddress(await $p.first));
    final $k = const jni.JObjectType().jClass.reference.pointer;
    if (!jni.Jni.env.IsInstanceOf($o.pointer, $k)) {
      throw 'Failed';
    }
    return const jni.JObjectType().fromReference($o);
  }

  static final _id_deleteObjects = _class.instanceMethodId(
    r'deleteObjects',
    r'(Laws/sdk/kotlin/services/s3/model/DeleteObjectsRequest;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;',
  );

  static final _deleteObjects = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.lang.Object deleteObjects(aws.sdk.kotlin.services.s3.model.DeleteObjectsRequest deleteObjectsRequest, kotlin.coroutines.Continuation continuation)
  /// The returned object must be released after use, by calling the [release] method.
  Future<jni.JObject> deleteObjects(
    jni.JObject deleteObjectsRequest,
  ) async {
    final $p = ReceivePort();
    final $c = jni.JObject.fromReference(
        ProtectedJniExtensions.newPortContinuation($p));
    _deleteObjects(reference.pointer, _id_deleteObjects as jni.JMethodIDPtr,
            deleteObjectsRequest.reference.pointer, $c.reference.pointer)
        .object(const jni.JObjectType());
    final $o = jni.JGlobalReference(jni.JObjectPtr.fromAddress(await $p.first));
    final $k = const jni.JObjectType().jClass.reference.pointer;
    if (!jni.Jni.env.IsInstanceOf($o.pointer, $k)) {
      throw 'Failed';
    }
    return const jni.JObjectType().fromReference($o);
  }

  static final _id_deletePublicAccessBlock = _class.instanceMethodId(
    r'deletePublicAccessBlock',
    r'(Laws/sdk/kotlin/services/s3/model/DeletePublicAccessBlockRequest;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;',
  );

  static final _deletePublicAccessBlock = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.lang.Object deletePublicAccessBlock(aws.sdk.kotlin.services.s3.model.DeletePublicAccessBlockRequest deletePublicAccessBlockRequest, kotlin.coroutines.Continuation continuation)
  /// The returned object must be released after use, by calling the [release] method.
  Future<jni.JObject> deletePublicAccessBlock(
    jni.JObject deletePublicAccessBlockRequest,
  ) async {
    final $p = ReceivePort();
    final $c = jni.JObject.fromReference(
        ProtectedJniExtensions.newPortContinuation($p));
    _deletePublicAccessBlock(
            reference.pointer,
            _id_deletePublicAccessBlock as jni.JMethodIDPtr,
            deletePublicAccessBlockRequest.reference.pointer,
            $c.reference.pointer)
        .object(const jni.JObjectType());
    final $o = jni.JGlobalReference(jni.JObjectPtr.fromAddress(await $p.first));
    final $k = const jni.JObjectType().jClass.reference.pointer;
    if (!jni.Jni.env.IsInstanceOf($o.pointer, $k)) {
      throw 'Failed';
    }
    return const jni.JObjectType().fromReference($o);
  }

  static final _id_getBucketAccelerateConfiguration = _class.instanceMethodId(
    r'getBucketAccelerateConfiguration',
    r'(Laws/sdk/kotlin/services/s3/model/GetBucketAccelerateConfigurationRequest;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;',
  );

  static final _getBucketAccelerateConfiguration =
      ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<
                          (
                            ffi.Pointer<ffi.Void>,
                            ffi.Pointer<ffi.Void>
                          )>)>>('globalEnv_CallObjectMethod')
          .asFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.lang.Object getBucketAccelerateConfiguration(aws.sdk.kotlin.services.s3.model.GetBucketAccelerateConfigurationRequest getBucketAccelerateConfigurationRequest, kotlin.coroutines.Continuation continuation)
  /// The returned object must be released after use, by calling the [release] method.
  Future<jni.JObject> getBucketAccelerateConfiguration(
    jni.JObject getBucketAccelerateConfigurationRequest,
  ) async {
    final $p = ReceivePort();
    final $c = jni.JObject.fromReference(
        ProtectedJniExtensions.newPortContinuation($p));
    _getBucketAccelerateConfiguration(
            reference.pointer,
            _id_getBucketAccelerateConfiguration as jni.JMethodIDPtr,
            getBucketAccelerateConfigurationRequest.reference.pointer,
            $c.reference.pointer)
        .object(const jni.JObjectType());
    final $o = jni.JGlobalReference(jni.JObjectPtr.fromAddress(await $p.first));
    final $k = const jni.JObjectType().jClass.reference.pointer;
    if (!jni.Jni.env.IsInstanceOf($o.pointer, $k)) {
      throw 'Failed';
    }
    return const jni.JObjectType().fromReference($o);
  }

  static final _id_getBucketAcl = _class.instanceMethodId(
    r'getBucketAcl',
    r'(Laws/sdk/kotlin/services/s3/model/GetBucketAclRequest;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;',
  );

  static final _getBucketAcl = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.lang.Object getBucketAcl(aws.sdk.kotlin.services.s3.model.GetBucketAclRequest getBucketAclRequest, kotlin.coroutines.Continuation continuation)
  /// The returned object must be released after use, by calling the [release] method.
  Future<jni.JObject> getBucketAcl(
    jni.JObject getBucketAclRequest,
  ) async {
    final $p = ReceivePort();
    final $c = jni.JObject.fromReference(
        ProtectedJniExtensions.newPortContinuation($p));
    _getBucketAcl(reference.pointer, _id_getBucketAcl as jni.JMethodIDPtr,
            getBucketAclRequest.reference.pointer, $c.reference.pointer)
        .object(const jni.JObjectType());
    final $o = jni.JGlobalReference(jni.JObjectPtr.fromAddress(await $p.first));
    final $k = const jni.JObjectType().jClass.reference.pointer;
    if (!jni.Jni.env.IsInstanceOf($o.pointer, $k)) {
      throw 'Failed';
    }
    return const jni.JObjectType().fromReference($o);
  }

  static final _id_getBucketAnalyticsConfiguration = _class.instanceMethodId(
    r'getBucketAnalyticsConfiguration',
    r'(Laws/sdk/kotlin/services/s3/model/GetBucketAnalyticsConfigurationRequest;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;',
  );

  static final _getBucketAnalyticsConfiguration = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.lang.Object getBucketAnalyticsConfiguration(aws.sdk.kotlin.services.s3.model.GetBucketAnalyticsConfigurationRequest getBucketAnalyticsConfigurationRequest, kotlin.coroutines.Continuation continuation)
  /// The returned object must be released after use, by calling the [release] method.
  Future<jni.JObject> getBucketAnalyticsConfiguration(
    jni.JObject getBucketAnalyticsConfigurationRequest,
  ) async {
    final $p = ReceivePort();
    final $c = jni.JObject.fromReference(
        ProtectedJniExtensions.newPortContinuation($p));
    _getBucketAnalyticsConfiguration(
            reference.pointer,
            _id_getBucketAnalyticsConfiguration as jni.JMethodIDPtr,
            getBucketAnalyticsConfigurationRequest.reference.pointer,
            $c.reference.pointer)
        .object(const jni.JObjectType());
    final $o = jni.JGlobalReference(jni.JObjectPtr.fromAddress(await $p.first));
    final $k = const jni.JObjectType().jClass.reference.pointer;
    if (!jni.Jni.env.IsInstanceOf($o.pointer, $k)) {
      throw 'Failed';
    }
    return const jni.JObjectType().fromReference($o);
  }

  static final _id_getBucketCors = _class.instanceMethodId(
    r'getBucketCors',
    r'(Laws/sdk/kotlin/services/s3/model/GetBucketCorsRequest;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;',
  );

  static final _getBucketCors = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.lang.Object getBucketCors(aws.sdk.kotlin.services.s3.model.GetBucketCorsRequest getBucketCorsRequest, kotlin.coroutines.Continuation continuation)
  /// The returned object must be released after use, by calling the [release] method.
  Future<jni.JObject> getBucketCors(
    jni.JObject getBucketCorsRequest,
  ) async {
    final $p = ReceivePort();
    final $c = jni.JObject.fromReference(
        ProtectedJniExtensions.newPortContinuation($p));
    _getBucketCors(reference.pointer, _id_getBucketCors as jni.JMethodIDPtr,
            getBucketCorsRequest.reference.pointer, $c.reference.pointer)
        .object(const jni.JObjectType());
    final $o = jni.JGlobalReference(jni.JObjectPtr.fromAddress(await $p.first));
    final $k = const jni.JObjectType().jClass.reference.pointer;
    if (!jni.Jni.env.IsInstanceOf($o.pointer, $k)) {
      throw 'Failed';
    }
    return const jni.JObjectType().fromReference($o);
  }

  static final _id_getBucketEncryption = _class.instanceMethodId(
    r'getBucketEncryption',
    r'(Laws/sdk/kotlin/services/s3/model/GetBucketEncryptionRequest;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;',
  );

  static final _getBucketEncryption = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.lang.Object getBucketEncryption(aws.sdk.kotlin.services.s3.model.GetBucketEncryptionRequest getBucketEncryptionRequest, kotlin.coroutines.Continuation continuation)
  /// The returned object must be released after use, by calling the [release] method.
  Future<jni.JObject> getBucketEncryption(
    jni.JObject getBucketEncryptionRequest,
  ) async {
    final $p = ReceivePort();
    final $c = jni.JObject.fromReference(
        ProtectedJniExtensions.newPortContinuation($p));
    _getBucketEncryption(
            reference.pointer,
            _id_getBucketEncryption as jni.JMethodIDPtr,
            getBucketEncryptionRequest.reference.pointer,
            $c.reference.pointer)
        .object(const jni.JObjectType());
    final $o = jni.JGlobalReference(jni.JObjectPtr.fromAddress(await $p.first));
    final $k = const jni.JObjectType().jClass.reference.pointer;
    if (!jni.Jni.env.IsInstanceOf($o.pointer, $k)) {
      throw 'Failed';
    }
    return const jni.JObjectType().fromReference($o);
  }

  static final _id_getBucketIntelligentTieringConfiguration =
      _class.instanceMethodId(
    r'getBucketIntelligentTieringConfiguration',
    r'(Laws/sdk/kotlin/services/s3/model/GetBucketIntelligentTieringConfigurationRequest;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;',
  );

  static final _getBucketIntelligentTieringConfiguration =
      ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<
                          (
                            ffi.Pointer<ffi.Void>,
                            ffi.Pointer<ffi.Void>
                          )>)>>('globalEnv_CallObjectMethod')
          .asFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.lang.Object getBucketIntelligentTieringConfiguration(aws.sdk.kotlin.services.s3.model.GetBucketIntelligentTieringConfigurationRequest getBucketIntelligentTieringConfigurationRequest, kotlin.coroutines.Continuation continuation)
  /// The returned object must be released after use, by calling the [release] method.
  Future<jni.JObject> getBucketIntelligentTieringConfiguration(
    jni.JObject getBucketIntelligentTieringConfigurationRequest,
  ) async {
    final $p = ReceivePort();
    final $c = jni.JObject.fromReference(
        ProtectedJniExtensions.newPortContinuation($p));
    _getBucketIntelligentTieringConfiguration(
            reference.pointer,
            _id_getBucketIntelligentTieringConfiguration as jni.JMethodIDPtr,
            getBucketIntelligentTieringConfigurationRequest.reference.pointer,
            $c.reference.pointer)
        .object(const jni.JObjectType());
    final $o = jni.JGlobalReference(jni.JObjectPtr.fromAddress(await $p.first));
    final $k = const jni.JObjectType().jClass.reference.pointer;
    if (!jni.Jni.env.IsInstanceOf($o.pointer, $k)) {
      throw 'Failed';
    }
    return const jni.JObjectType().fromReference($o);
  }

  static final _id_getBucketInventoryConfiguration = _class.instanceMethodId(
    r'getBucketInventoryConfiguration',
    r'(Laws/sdk/kotlin/services/s3/model/GetBucketInventoryConfigurationRequest;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;',
  );

  static final _getBucketInventoryConfiguration = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.lang.Object getBucketInventoryConfiguration(aws.sdk.kotlin.services.s3.model.GetBucketInventoryConfigurationRequest getBucketInventoryConfigurationRequest, kotlin.coroutines.Continuation continuation)
  /// The returned object must be released after use, by calling the [release] method.
  Future<jni.JObject> getBucketInventoryConfiguration(
    jni.JObject getBucketInventoryConfigurationRequest,
  ) async {
    final $p = ReceivePort();
    final $c = jni.JObject.fromReference(
        ProtectedJniExtensions.newPortContinuation($p));
    _getBucketInventoryConfiguration(
            reference.pointer,
            _id_getBucketInventoryConfiguration as jni.JMethodIDPtr,
            getBucketInventoryConfigurationRequest.reference.pointer,
            $c.reference.pointer)
        .object(const jni.JObjectType());
    final $o = jni.JGlobalReference(jni.JObjectPtr.fromAddress(await $p.first));
    final $k = const jni.JObjectType().jClass.reference.pointer;
    if (!jni.Jni.env.IsInstanceOf($o.pointer, $k)) {
      throw 'Failed';
    }
    return const jni.JObjectType().fromReference($o);
  }

  static final _id_getBucketLifecycleConfiguration = _class.instanceMethodId(
    r'getBucketLifecycleConfiguration',
    r'(Laws/sdk/kotlin/services/s3/model/GetBucketLifecycleConfigurationRequest;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;',
  );

  static final _getBucketLifecycleConfiguration = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.lang.Object getBucketLifecycleConfiguration(aws.sdk.kotlin.services.s3.model.GetBucketLifecycleConfigurationRequest getBucketLifecycleConfigurationRequest, kotlin.coroutines.Continuation continuation)
  /// The returned object must be released after use, by calling the [release] method.
  Future<jni.JObject> getBucketLifecycleConfiguration(
    jni.JObject getBucketLifecycleConfigurationRequest,
  ) async {
    final $p = ReceivePort();
    final $c = jni.JObject.fromReference(
        ProtectedJniExtensions.newPortContinuation($p));
    _getBucketLifecycleConfiguration(
            reference.pointer,
            _id_getBucketLifecycleConfiguration as jni.JMethodIDPtr,
            getBucketLifecycleConfigurationRequest.reference.pointer,
            $c.reference.pointer)
        .object(const jni.JObjectType());
    final $o = jni.JGlobalReference(jni.JObjectPtr.fromAddress(await $p.first));
    final $k = const jni.JObjectType().jClass.reference.pointer;
    if (!jni.Jni.env.IsInstanceOf($o.pointer, $k)) {
      throw 'Failed';
    }
    return const jni.JObjectType().fromReference($o);
  }

  static final _id_getBucketLocation = _class.instanceMethodId(
    r'getBucketLocation',
    r'(Laws/sdk/kotlin/services/s3/model/GetBucketLocationRequest;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;',
  );

  static final _getBucketLocation = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.lang.Object getBucketLocation(aws.sdk.kotlin.services.s3.model.GetBucketLocationRequest getBucketLocationRequest, kotlin.coroutines.Continuation continuation)
  /// The returned object must be released after use, by calling the [release] method.
  Future<jni.JObject> getBucketLocation(
    jni.JObject getBucketLocationRequest,
  ) async {
    final $p = ReceivePort();
    final $c = jni.JObject.fromReference(
        ProtectedJniExtensions.newPortContinuation($p));
    _getBucketLocation(
            reference.pointer,
            _id_getBucketLocation as jni.JMethodIDPtr,
            getBucketLocationRequest.reference.pointer,
            $c.reference.pointer)
        .object(const jni.JObjectType());
    final $o = jni.JGlobalReference(jni.JObjectPtr.fromAddress(await $p.first));
    final $k = const jni.JObjectType().jClass.reference.pointer;
    if (!jni.Jni.env.IsInstanceOf($o.pointer, $k)) {
      throw 'Failed';
    }
    return const jni.JObjectType().fromReference($o);
  }

  static final _id_getBucketLogging = _class.instanceMethodId(
    r'getBucketLogging',
    r'(Laws/sdk/kotlin/services/s3/model/GetBucketLoggingRequest;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;',
  );

  static final _getBucketLogging = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.lang.Object getBucketLogging(aws.sdk.kotlin.services.s3.model.GetBucketLoggingRequest getBucketLoggingRequest, kotlin.coroutines.Continuation continuation)
  /// The returned object must be released after use, by calling the [release] method.
  Future<jni.JObject> getBucketLogging(
    jni.JObject getBucketLoggingRequest,
  ) async {
    final $p = ReceivePort();
    final $c = jni.JObject.fromReference(
        ProtectedJniExtensions.newPortContinuation($p));
    _getBucketLogging(
            reference.pointer,
            _id_getBucketLogging as jni.JMethodIDPtr,
            getBucketLoggingRequest.reference.pointer,
            $c.reference.pointer)
        .object(const jni.JObjectType());
    final $o = jni.JGlobalReference(jni.JObjectPtr.fromAddress(await $p.first));
    final $k = const jni.JObjectType().jClass.reference.pointer;
    if (!jni.Jni.env.IsInstanceOf($o.pointer, $k)) {
      throw 'Failed';
    }
    return const jni.JObjectType().fromReference($o);
  }

  static final _id_getBucketMetricsConfiguration = _class.instanceMethodId(
    r'getBucketMetricsConfiguration',
    r'(Laws/sdk/kotlin/services/s3/model/GetBucketMetricsConfigurationRequest;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;',
  );

  static final _getBucketMetricsConfiguration = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.lang.Object getBucketMetricsConfiguration(aws.sdk.kotlin.services.s3.model.GetBucketMetricsConfigurationRequest getBucketMetricsConfigurationRequest, kotlin.coroutines.Continuation continuation)
  /// The returned object must be released after use, by calling the [release] method.
  Future<jni.JObject> getBucketMetricsConfiguration(
    jni.JObject getBucketMetricsConfigurationRequest,
  ) async {
    final $p = ReceivePort();
    final $c = jni.JObject.fromReference(
        ProtectedJniExtensions.newPortContinuation($p));
    _getBucketMetricsConfiguration(
            reference.pointer,
            _id_getBucketMetricsConfiguration as jni.JMethodIDPtr,
            getBucketMetricsConfigurationRequest.reference.pointer,
            $c.reference.pointer)
        .object(const jni.JObjectType());
    final $o = jni.JGlobalReference(jni.JObjectPtr.fromAddress(await $p.first));
    final $k = const jni.JObjectType().jClass.reference.pointer;
    if (!jni.Jni.env.IsInstanceOf($o.pointer, $k)) {
      throw 'Failed';
    }
    return const jni.JObjectType().fromReference($o);
  }

  static final _id_getBucketNotificationConfiguration = _class.instanceMethodId(
    r'getBucketNotificationConfiguration',
    r'(Laws/sdk/kotlin/services/s3/model/GetBucketNotificationConfigurationRequest;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;',
  );

  static final _getBucketNotificationConfiguration =
      ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<
                          (
                            ffi.Pointer<ffi.Void>,
                            ffi.Pointer<ffi.Void>
                          )>)>>('globalEnv_CallObjectMethod')
          .asFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.lang.Object getBucketNotificationConfiguration(aws.sdk.kotlin.services.s3.model.GetBucketNotificationConfigurationRequest getBucketNotificationConfigurationRequest, kotlin.coroutines.Continuation continuation)
  /// The returned object must be released after use, by calling the [release] method.
  Future<jni.JObject> getBucketNotificationConfiguration(
    jni.JObject getBucketNotificationConfigurationRequest,
  ) async {
    final $p = ReceivePort();
    final $c = jni.JObject.fromReference(
        ProtectedJniExtensions.newPortContinuation($p));
    _getBucketNotificationConfiguration(
            reference.pointer,
            _id_getBucketNotificationConfiguration as jni.JMethodIDPtr,
            getBucketNotificationConfigurationRequest.reference.pointer,
            $c.reference.pointer)
        .object(const jni.JObjectType());
    final $o = jni.JGlobalReference(jni.JObjectPtr.fromAddress(await $p.first));
    final $k = const jni.JObjectType().jClass.reference.pointer;
    if (!jni.Jni.env.IsInstanceOf($o.pointer, $k)) {
      throw 'Failed';
    }
    return const jni.JObjectType().fromReference($o);
  }

  static final _id_getBucketOwnershipControls = _class.instanceMethodId(
    r'getBucketOwnershipControls',
    r'(Laws/sdk/kotlin/services/s3/model/GetBucketOwnershipControlsRequest;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;',
  );

  static final _getBucketOwnershipControls = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.lang.Object getBucketOwnershipControls(aws.sdk.kotlin.services.s3.model.GetBucketOwnershipControlsRequest getBucketOwnershipControlsRequest, kotlin.coroutines.Continuation continuation)
  /// The returned object must be released after use, by calling the [release] method.
  Future<jni.JObject> getBucketOwnershipControls(
    jni.JObject getBucketOwnershipControlsRequest,
  ) async {
    final $p = ReceivePort();
    final $c = jni.JObject.fromReference(
        ProtectedJniExtensions.newPortContinuation($p));
    _getBucketOwnershipControls(
            reference.pointer,
            _id_getBucketOwnershipControls as jni.JMethodIDPtr,
            getBucketOwnershipControlsRequest.reference.pointer,
            $c.reference.pointer)
        .object(const jni.JObjectType());
    final $o = jni.JGlobalReference(jni.JObjectPtr.fromAddress(await $p.first));
    final $k = const jni.JObjectType().jClass.reference.pointer;
    if (!jni.Jni.env.IsInstanceOf($o.pointer, $k)) {
      throw 'Failed';
    }
    return const jni.JObjectType().fromReference($o);
  }

  static final _id_getBucketPolicy = _class.instanceMethodId(
    r'getBucketPolicy',
    r'(Laws/sdk/kotlin/services/s3/model/GetBucketPolicyRequest;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;',
  );

  static final _getBucketPolicy = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.lang.Object getBucketPolicy(aws.sdk.kotlin.services.s3.model.GetBucketPolicyRequest getBucketPolicyRequest, kotlin.coroutines.Continuation continuation)
  /// The returned object must be released after use, by calling the [release] method.
  Future<jni.JObject> getBucketPolicy(
    jni.JObject getBucketPolicyRequest,
  ) async {
    final $p = ReceivePort();
    final $c = jni.JObject.fromReference(
        ProtectedJniExtensions.newPortContinuation($p));
    _getBucketPolicy(reference.pointer, _id_getBucketPolicy as jni.JMethodIDPtr,
            getBucketPolicyRequest.reference.pointer, $c.reference.pointer)
        .object(const jni.JObjectType());
    final $o = jni.JGlobalReference(jni.JObjectPtr.fromAddress(await $p.first));
    final $k = const jni.JObjectType().jClass.reference.pointer;
    if (!jni.Jni.env.IsInstanceOf($o.pointer, $k)) {
      throw 'Failed';
    }
    return const jni.JObjectType().fromReference($o);
  }

  static final _id_getBucketPolicyStatus = _class.instanceMethodId(
    r'getBucketPolicyStatus',
    r'(Laws/sdk/kotlin/services/s3/model/GetBucketPolicyStatusRequest;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;',
  );

  static final _getBucketPolicyStatus = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.lang.Object getBucketPolicyStatus(aws.sdk.kotlin.services.s3.model.GetBucketPolicyStatusRequest getBucketPolicyStatusRequest, kotlin.coroutines.Continuation continuation)
  /// The returned object must be released after use, by calling the [release] method.
  Future<jni.JObject> getBucketPolicyStatus(
    jni.JObject getBucketPolicyStatusRequest,
  ) async {
    final $p = ReceivePort();
    final $c = jni.JObject.fromReference(
        ProtectedJniExtensions.newPortContinuation($p));
    _getBucketPolicyStatus(
            reference.pointer,
            _id_getBucketPolicyStatus as jni.JMethodIDPtr,
            getBucketPolicyStatusRequest.reference.pointer,
            $c.reference.pointer)
        .object(const jni.JObjectType());
    final $o = jni.JGlobalReference(jni.JObjectPtr.fromAddress(await $p.first));
    final $k = const jni.JObjectType().jClass.reference.pointer;
    if (!jni.Jni.env.IsInstanceOf($o.pointer, $k)) {
      throw 'Failed';
    }
    return const jni.JObjectType().fromReference($o);
  }

  static final _id_getBucketReplication = _class.instanceMethodId(
    r'getBucketReplication',
    r'(Laws/sdk/kotlin/services/s3/model/GetBucketReplicationRequest;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;',
  );

  static final _getBucketReplication = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.lang.Object getBucketReplication(aws.sdk.kotlin.services.s3.model.GetBucketReplicationRequest getBucketReplicationRequest, kotlin.coroutines.Continuation continuation)
  /// The returned object must be released after use, by calling the [release] method.
  Future<jni.JObject> getBucketReplication(
    jni.JObject getBucketReplicationRequest,
  ) async {
    final $p = ReceivePort();
    final $c = jni.JObject.fromReference(
        ProtectedJniExtensions.newPortContinuation($p));
    _getBucketReplication(
            reference.pointer,
            _id_getBucketReplication as jni.JMethodIDPtr,
            getBucketReplicationRequest.reference.pointer,
            $c.reference.pointer)
        .object(const jni.JObjectType());
    final $o = jni.JGlobalReference(jni.JObjectPtr.fromAddress(await $p.first));
    final $k = const jni.JObjectType().jClass.reference.pointer;
    if (!jni.Jni.env.IsInstanceOf($o.pointer, $k)) {
      throw 'Failed';
    }
    return const jni.JObjectType().fromReference($o);
  }

  static final _id_getBucketRequestPayment = _class.instanceMethodId(
    r'getBucketRequestPayment',
    r'(Laws/sdk/kotlin/services/s3/model/GetBucketRequestPaymentRequest;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;',
  );

  static final _getBucketRequestPayment = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.lang.Object getBucketRequestPayment(aws.sdk.kotlin.services.s3.model.GetBucketRequestPaymentRequest getBucketRequestPaymentRequest, kotlin.coroutines.Continuation continuation)
  /// The returned object must be released after use, by calling the [release] method.
  Future<jni.JObject> getBucketRequestPayment(
    jni.JObject getBucketRequestPaymentRequest,
  ) async {
    final $p = ReceivePort();
    final $c = jni.JObject.fromReference(
        ProtectedJniExtensions.newPortContinuation($p));
    _getBucketRequestPayment(
            reference.pointer,
            _id_getBucketRequestPayment as jni.JMethodIDPtr,
            getBucketRequestPaymentRequest.reference.pointer,
            $c.reference.pointer)
        .object(const jni.JObjectType());
    final $o = jni.JGlobalReference(jni.JObjectPtr.fromAddress(await $p.first));
    final $k = const jni.JObjectType().jClass.reference.pointer;
    if (!jni.Jni.env.IsInstanceOf($o.pointer, $k)) {
      throw 'Failed';
    }
    return const jni.JObjectType().fromReference($o);
  }

  static final _id_getBucketTagging = _class.instanceMethodId(
    r'getBucketTagging',
    r'(Laws/sdk/kotlin/services/s3/model/GetBucketTaggingRequest;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;',
  );

  static final _getBucketTagging = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.lang.Object getBucketTagging(aws.sdk.kotlin.services.s3.model.GetBucketTaggingRequest getBucketTaggingRequest, kotlin.coroutines.Continuation continuation)
  /// The returned object must be released after use, by calling the [release] method.
  Future<jni.JObject> getBucketTagging(
    jni.JObject getBucketTaggingRequest,
  ) async {
    final $p = ReceivePort();
    final $c = jni.JObject.fromReference(
        ProtectedJniExtensions.newPortContinuation($p));
    _getBucketTagging(
            reference.pointer,
            _id_getBucketTagging as jni.JMethodIDPtr,
            getBucketTaggingRequest.reference.pointer,
            $c.reference.pointer)
        .object(const jni.JObjectType());
    final $o = jni.JGlobalReference(jni.JObjectPtr.fromAddress(await $p.first));
    final $k = const jni.JObjectType().jClass.reference.pointer;
    if (!jni.Jni.env.IsInstanceOf($o.pointer, $k)) {
      throw 'Failed';
    }
    return const jni.JObjectType().fromReference($o);
  }

  static final _id_getBucketVersioning = _class.instanceMethodId(
    r'getBucketVersioning',
    r'(Laws/sdk/kotlin/services/s3/model/GetBucketVersioningRequest;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;',
  );

  static final _getBucketVersioning = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.lang.Object getBucketVersioning(aws.sdk.kotlin.services.s3.model.GetBucketVersioningRequest getBucketVersioningRequest, kotlin.coroutines.Continuation continuation)
  /// The returned object must be released after use, by calling the [release] method.
  Future<jni.JObject> getBucketVersioning(
    jni.JObject getBucketVersioningRequest,
  ) async {
    final $p = ReceivePort();
    final $c = jni.JObject.fromReference(
        ProtectedJniExtensions.newPortContinuation($p));
    _getBucketVersioning(
            reference.pointer,
            _id_getBucketVersioning as jni.JMethodIDPtr,
            getBucketVersioningRequest.reference.pointer,
            $c.reference.pointer)
        .object(const jni.JObjectType());
    final $o = jni.JGlobalReference(jni.JObjectPtr.fromAddress(await $p.first));
    final $k = const jni.JObjectType().jClass.reference.pointer;
    if (!jni.Jni.env.IsInstanceOf($o.pointer, $k)) {
      throw 'Failed';
    }
    return const jni.JObjectType().fromReference($o);
  }

  static final _id_getBucketWebsite = _class.instanceMethodId(
    r'getBucketWebsite',
    r'(Laws/sdk/kotlin/services/s3/model/GetBucketWebsiteRequest;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;',
  );

  static final _getBucketWebsite = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.lang.Object getBucketWebsite(aws.sdk.kotlin.services.s3.model.GetBucketWebsiteRequest getBucketWebsiteRequest, kotlin.coroutines.Continuation continuation)
  /// The returned object must be released after use, by calling the [release] method.
  Future<jni.JObject> getBucketWebsite(
    jni.JObject getBucketWebsiteRequest,
  ) async {
    final $p = ReceivePort();
    final $c = jni.JObject.fromReference(
        ProtectedJniExtensions.newPortContinuation($p));
    _getBucketWebsite(
            reference.pointer,
            _id_getBucketWebsite as jni.JMethodIDPtr,
            getBucketWebsiteRequest.reference.pointer,
            $c.reference.pointer)
        .object(const jni.JObjectType());
    final $o = jni.JGlobalReference(jni.JObjectPtr.fromAddress(await $p.first));
    final $k = const jni.JObjectType().jClass.reference.pointer;
    if (!jni.Jni.env.IsInstanceOf($o.pointer, $k)) {
      throw 'Failed';
    }
    return const jni.JObjectType().fromReference($o);
  }

  static final _id_getObject = _class.instanceMethodId(
    r'getObject',
    r'(Laws/sdk/kotlin/services/s3/model/GetObjectRequest;Lkotlin/jvm/functions/Function2;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;',
  );

  static final _getObject = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.lang.Object getObject(aws.sdk.kotlin.services.s3.model.GetObjectRequest getObjectRequest, kotlin.jvm.functions.Function2 function2, kotlin.coroutines.Continuation continuation)
  /// The returned object must be released after use, by calling the [release] method.
  Future<$T> getObject<$T extends jni.JObject>(
    jni.JObject getObjectRequest,
    jni.JObject function2, {
    required jni.JObjType<$T> T,
  }) async {
    final $p = ReceivePort();
    final $c = jni.JObject.fromReference(
        ProtectedJniExtensions.newPortContinuation($p));
    _getObject(
            reference.pointer,
            _id_getObject as jni.JMethodIDPtr,
            getObjectRequest.reference.pointer,
            function2.reference.pointer,
            $c.reference.pointer)
        .object(const jni.JObjectType());
    final $o = jni.JGlobalReference(jni.JObjectPtr.fromAddress(await $p.first));
    final $k = T.jClass.reference.pointer;
    if (!jni.Jni.env.IsInstanceOf($o.pointer, $k)) {
      throw 'Failed';
    }
    return T.fromReference($o);
  }

  static final _id_getObjectAcl = _class.instanceMethodId(
    r'getObjectAcl',
    r'(Laws/sdk/kotlin/services/s3/model/GetObjectAclRequest;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;',
  );

  static final _getObjectAcl = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.lang.Object getObjectAcl(aws.sdk.kotlin.services.s3.model.GetObjectAclRequest getObjectAclRequest, kotlin.coroutines.Continuation continuation)
  /// The returned object must be released after use, by calling the [release] method.
  Future<jni.JObject> getObjectAcl(
    jni.JObject getObjectAclRequest,
  ) async {
    final $p = ReceivePort();
    final $c = jni.JObject.fromReference(
        ProtectedJniExtensions.newPortContinuation($p));
    _getObjectAcl(reference.pointer, _id_getObjectAcl as jni.JMethodIDPtr,
            getObjectAclRequest.reference.pointer, $c.reference.pointer)
        .object(const jni.JObjectType());
    final $o = jni.JGlobalReference(jni.JObjectPtr.fromAddress(await $p.first));
    final $k = const jni.JObjectType().jClass.reference.pointer;
    if (!jni.Jni.env.IsInstanceOf($o.pointer, $k)) {
      throw 'Failed';
    }
    return const jni.JObjectType().fromReference($o);
  }

  static final _id_getObjectAttributes = _class.instanceMethodId(
    r'getObjectAttributes',
    r'(Laws/sdk/kotlin/services/s3/model/GetObjectAttributesRequest;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;',
  );

  static final _getObjectAttributes = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.lang.Object getObjectAttributes(aws.sdk.kotlin.services.s3.model.GetObjectAttributesRequest getObjectAttributesRequest, kotlin.coroutines.Continuation continuation)
  /// The returned object must be released after use, by calling the [release] method.
  Future<jni.JObject> getObjectAttributes(
    jni.JObject getObjectAttributesRequest,
  ) async {
    final $p = ReceivePort();
    final $c = jni.JObject.fromReference(
        ProtectedJniExtensions.newPortContinuation($p));
    _getObjectAttributes(
            reference.pointer,
            _id_getObjectAttributes as jni.JMethodIDPtr,
            getObjectAttributesRequest.reference.pointer,
            $c.reference.pointer)
        .object(const jni.JObjectType());
    final $o = jni.JGlobalReference(jni.JObjectPtr.fromAddress(await $p.first));
    final $k = const jni.JObjectType().jClass.reference.pointer;
    if (!jni.Jni.env.IsInstanceOf($o.pointer, $k)) {
      throw 'Failed';
    }
    return const jni.JObjectType().fromReference($o);
  }

  static final _id_getObjectLegalHold = _class.instanceMethodId(
    r'getObjectLegalHold',
    r'(Laws/sdk/kotlin/services/s3/model/GetObjectLegalHoldRequest;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;',
  );

  static final _getObjectLegalHold = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.lang.Object getObjectLegalHold(aws.sdk.kotlin.services.s3.model.GetObjectLegalHoldRequest getObjectLegalHoldRequest, kotlin.coroutines.Continuation continuation)
  /// The returned object must be released after use, by calling the [release] method.
  Future<jni.JObject> getObjectLegalHold(
    jni.JObject getObjectLegalHoldRequest,
  ) async {
    final $p = ReceivePort();
    final $c = jni.JObject.fromReference(
        ProtectedJniExtensions.newPortContinuation($p));
    _getObjectLegalHold(
            reference.pointer,
            _id_getObjectLegalHold as jni.JMethodIDPtr,
            getObjectLegalHoldRequest.reference.pointer,
            $c.reference.pointer)
        .object(const jni.JObjectType());
    final $o = jni.JGlobalReference(jni.JObjectPtr.fromAddress(await $p.first));
    final $k = const jni.JObjectType().jClass.reference.pointer;
    if (!jni.Jni.env.IsInstanceOf($o.pointer, $k)) {
      throw 'Failed';
    }
    return const jni.JObjectType().fromReference($o);
  }

  static final _id_getObjectLockConfiguration = _class.instanceMethodId(
    r'getObjectLockConfiguration',
    r'(Laws/sdk/kotlin/services/s3/model/GetObjectLockConfigurationRequest;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;',
  );

  static final _getObjectLockConfiguration = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.lang.Object getObjectLockConfiguration(aws.sdk.kotlin.services.s3.model.GetObjectLockConfigurationRequest getObjectLockConfigurationRequest, kotlin.coroutines.Continuation continuation)
  /// The returned object must be released after use, by calling the [release] method.
  Future<jni.JObject> getObjectLockConfiguration(
    jni.JObject getObjectLockConfigurationRequest,
  ) async {
    final $p = ReceivePort();
    final $c = jni.JObject.fromReference(
        ProtectedJniExtensions.newPortContinuation($p));
    _getObjectLockConfiguration(
            reference.pointer,
            _id_getObjectLockConfiguration as jni.JMethodIDPtr,
            getObjectLockConfigurationRequest.reference.pointer,
            $c.reference.pointer)
        .object(const jni.JObjectType());
    final $o = jni.JGlobalReference(jni.JObjectPtr.fromAddress(await $p.first));
    final $k = const jni.JObjectType().jClass.reference.pointer;
    if (!jni.Jni.env.IsInstanceOf($o.pointer, $k)) {
      throw 'Failed';
    }
    return const jni.JObjectType().fromReference($o);
  }

  static final _id_getObjectRetention = _class.instanceMethodId(
    r'getObjectRetention',
    r'(Laws/sdk/kotlin/services/s3/model/GetObjectRetentionRequest;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;',
  );

  static final _getObjectRetention = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.lang.Object getObjectRetention(aws.sdk.kotlin.services.s3.model.GetObjectRetentionRequest getObjectRetentionRequest, kotlin.coroutines.Continuation continuation)
  /// The returned object must be released after use, by calling the [release] method.
  Future<jni.JObject> getObjectRetention(
    jni.JObject getObjectRetentionRequest,
  ) async {
    final $p = ReceivePort();
    final $c = jni.JObject.fromReference(
        ProtectedJniExtensions.newPortContinuation($p));
    _getObjectRetention(
            reference.pointer,
            _id_getObjectRetention as jni.JMethodIDPtr,
            getObjectRetentionRequest.reference.pointer,
            $c.reference.pointer)
        .object(const jni.JObjectType());
    final $o = jni.JGlobalReference(jni.JObjectPtr.fromAddress(await $p.first));
    final $k = const jni.JObjectType().jClass.reference.pointer;
    if (!jni.Jni.env.IsInstanceOf($o.pointer, $k)) {
      throw 'Failed';
    }
    return const jni.JObjectType().fromReference($o);
  }

  static final _id_getObjectTagging = _class.instanceMethodId(
    r'getObjectTagging',
    r'(Laws/sdk/kotlin/services/s3/model/GetObjectTaggingRequest;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;',
  );

  static final _getObjectTagging = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.lang.Object getObjectTagging(aws.sdk.kotlin.services.s3.model.GetObjectTaggingRequest getObjectTaggingRequest, kotlin.coroutines.Continuation continuation)
  /// The returned object must be released after use, by calling the [release] method.
  Future<jni.JObject> getObjectTagging(
    jni.JObject getObjectTaggingRequest,
  ) async {
    final $p = ReceivePort();
    final $c = jni.JObject.fromReference(
        ProtectedJniExtensions.newPortContinuation($p));
    _getObjectTagging(
            reference.pointer,
            _id_getObjectTagging as jni.JMethodIDPtr,
            getObjectTaggingRequest.reference.pointer,
            $c.reference.pointer)
        .object(const jni.JObjectType());
    final $o = jni.JGlobalReference(jni.JObjectPtr.fromAddress(await $p.first));
    final $k = const jni.JObjectType().jClass.reference.pointer;
    if (!jni.Jni.env.IsInstanceOf($o.pointer, $k)) {
      throw 'Failed';
    }
    return const jni.JObjectType().fromReference($o);
  }

  static final _id_getObjectTorrent = _class.instanceMethodId(
    r'getObjectTorrent',
    r'(Laws/sdk/kotlin/services/s3/model/GetObjectTorrentRequest;Lkotlin/jvm/functions/Function2;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;',
  );

  static final _getObjectTorrent = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.lang.Object getObjectTorrent(aws.sdk.kotlin.services.s3.model.GetObjectTorrentRequest getObjectTorrentRequest, kotlin.jvm.functions.Function2 function2, kotlin.coroutines.Continuation continuation)
  /// The returned object must be released after use, by calling the [release] method.
  Future<$T> getObjectTorrent<$T extends jni.JObject>(
    jni.JObject getObjectTorrentRequest,
    jni.JObject function2, {
    required jni.JObjType<$T> T,
  }) async {
    final $p = ReceivePort();
    final $c = jni.JObject.fromReference(
        ProtectedJniExtensions.newPortContinuation($p));
    _getObjectTorrent(
            reference.pointer,
            _id_getObjectTorrent as jni.JMethodIDPtr,
            getObjectTorrentRequest.reference.pointer,
            function2.reference.pointer,
            $c.reference.pointer)
        .object(const jni.JObjectType());
    final $o = jni.JGlobalReference(jni.JObjectPtr.fromAddress(await $p.first));
    final $k = T.jClass.reference.pointer;
    if (!jni.Jni.env.IsInstanceOf($o.pointer, $k)) {
      throw 'Failed';
    }
    return T.fromReference($o);
  }

  static final _id_getPublicAccessBlock = _class.instanceMethodId(
    r'getPublicAccessBlock',
    r'(Laws/sdk/kotlin/services/s3/model/GetPublicAccessBlockRequest;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;',
  );

  static final _getPublicAccessBlock = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.lang.Object getPublicAccessBlock(aws.sdk.kotlin.services.s3.model.GetPublicAccessBlockRequest getPublicAccessBlockRequest, kotlin.coroutines.Continuation continuation)
  /// The returned object must be released after use, by calling the [release] method.
  Future<jni.JObject> getPublicAccessBlock(
    jni.JObject getPublicAccessBlockRequest,
  ) async {
    final $p = ReceivePort();
    final $c = jni.JObject.fromReference(
        ProtectedJniExtensions.newPortContinuation($p));
    _getPublicAccessBlock(
            reference.pointer,
            _id_getPublicAccessBlock as jni.JMethodIDPtr,
            getPublicAccessBlockRequest.reference.pointer,
            $c.reference.pointer)
        .object(const jni.JObjectType());
    final $o = jni.JGlobalReference(jni.JObjectPtr.fromAddress(await $p.first));
    final $k = const jni.JObjectType().jClass.reference.pointer;
    if (!jni.Jni.env.IsInstanceOf($o.pointer, $k)) {
      throw 'Failed';
    }
    return const jni.JObjectType().fromReference($o);
  }

  static final _id_headBucket = _class.instanceMethodId(
    r'headBucket',
    r'(Laws/sdk/kotlin/services/s3/model/HeadBucketRequest;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;',
  );

  static final _headBucket = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.lang.Object headBucket(aws.sdk.kotlin.services.s3.model.HeadBucketRequest headBucketRequest, kotlin.coroutines.Continuation continuation)
  /// The returned object must be released after use, by calling the [release] method.
  Future<jni.JObject> headBucket(
    jni.JObject headBucketRequest,
  ) async {
    final $p = ReceivePort();
    final $c = jni.JObject.fromReference(
        ProtectedJniExtensions.newPortContinuation($p));
    _headBucket(reference.pointer, _id_headBucket as jni.JMethodIDPtr,
            headBucketRequest.reference.pointer, $c.reference.pointer)
        .object(const jni.JObjectType());
    final $o = jni.JGlobalReference(jni.JObjectPtr.fromAddress(await $p.first));
    final $k = const jni.JObjectType().jClass.reference.pointer;
    if (!jni.Jni.env.IsInstanceOf($o.pointer, $k)) {
      throw 'Failed';
    }
    return const jni.JObjectType().fromReference($o);
  }

  static final _id_headObject = _class.instanceMethodId(
    r'headObject',
    r'(Laws/sdk/kotlin/services/s3/model/HeadObjectRequest;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;',
  );

  static final _headObject = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.lang.Object headObject(aws.sdk.kotlin.services.s3.model.HeadObjectRequest headObjectRequest, kotlin.coroutines.Continuation continuation)
  /// The returned object must be released after use, by calling the [release] method.
  Future<jni.JObject> headObject(
    jni.JObject headObjectRequest,
  ) async {
    final $p = ReceivePort();
    final $c = jni.JObject.fromReference(
        ProtectedJniExtensions.newPortContinuation($p));
    _headObject(reference.pointer, _id_headObject as jni.JMethodIDPtr,
            headObjectRequest.reference.pointer, $c.reference.pointer)
        .object(const jni.JObjectType());
    final $o = jni.JGlobalReference(jni.JObjectPtr.fromAddress(await $p.first));
    final $k = const jni.JObjectType().jClass.reference.pointer;
    if (!jni.Jni.env.IsInstanceOf($o.pointer, $k)) {
      throw 'Failed';
    }
    return const jni.JObjectType().fromReference($o);
  }

  static final _id_listBucketAnalyticsConfigurations = _class.instanceMethodId(
    r'listBucketAnalyticsConfigurations',
    r'(Laws/sdk/kotlin/services/s3/model/ListBucketAnalyticsConfigurationsRequest;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;',
  );

  static final _listBucketAnalyticsConfigurations =
      ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<
                          (
                            ffi.Pointer<ffi.Void>,
                            ffi.Pointer<ffi.Void>
                          )>)>>('globalEnv_CallObjectMethod')
          .asFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.lang.Object listBucketAnalyticsConfigurations(aws.sdk.kotlin.services.s3.model.ListBucketAnalyticsConfigurationsRequest listBucketAnalyticsConfigurationsRequest, kotlin.coroutines.Continuation continuation)
  /// The returned object must be released after use, by calling the [release] method.
  Future<jni.JObject> listBucketAnalyticsConfigurations(
    jni.JObject listBucketAnalyticsConfigurationsRequest,
  ) async {
    final $p = ReceivePort();
    final $c = jni.JObject.fromReference(
        ProtectedJniExtensions.newPortContinuation($p));
    _listBucketAnalyticsConfigurations(
            reference.pointer,
            _id_listBucketAnalyticsConfigurations as jni.JMethodIDPtr,
            listBucketAnalyticsConfigurationsRequest.reference.pointer,
            $c.reference.pointer)
        .object(const jni.JObjectType());
    final $o = jni.JGlobalReference(jni.JObjectPtr.fromAddress(await $p.first));
    final $k = const jni.JObjectType().jClass.reference.pointer;
    if (!jni.Jni.env.IsInstanceOf($o.pointer, $k)) {
      throw 'Failed';
    }
    return const jni.JObjectType().fromReference($o);
  }

  static final _id_listBucketIntelligentTieringConfigurations =
      _class.instanceMethodId(
    r'listBucketIntelligentTieringConfigurations',
    r'(Laws/sdk/kotlin/services/s3/model/ListBucketIntelligentTieringConfigurationsRequest;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;',
  );

  static final _listBucketIntelligentTieringConfigurations =
      ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<
                          (
                            ffi.Pointer<ffi.Void>,
                            ffi.Pointer<ffi.Void>
                          )>)>>('globalEnv_CallObjectMethod')
          .asFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.lang.Object listBucketIntelligentTieringConfigurations(aws.sdk.kotlin.services.s3.model.ListBucketIntelligentTieringConfigurationsRequest listBucketIntelligentTieringConfigurationsRequest, kotlin.coroutines.Continuation continuation)
  /// The returned object must be released after use, by calling the [release] method.
  Future<jni.JObject> listBucketIntelligentTieringConfigurations(
    jni.JObject listBucketIntelligentTieringConfigurationsRequest,
  ) async {
    final $p = ReceivePort();
    final $c = jni.JObject.fromReference(
        ProtectedJniExtensions.newPortContinuation($p));
    _listBucketIntelligentTieringConfigurations(
            reference.pointer,
            _id_listBucketIntelligentTieringConfigurations as jni.JMethodIDPtr,
            listBucketIntelligentTieringConfigurationsRequest.reference.pointer,
            $c.reference.pointer)
        .object(const jni.JObjectType());
    final $o = jni.JGlobalReference(jni.JObjectPtr.fromAddress(await $p.first));
    final $k = const jni.JObjectType().jClass.reference.pointer;
    if (!jni.Jni.env.IsInstanceOf($o.pointer, $k)) {
      throw 'Failed';
    }
    return const jni.JObjectType().fromReference($o);
  }

  static final _id_listBucketInventoryConfigurations = _class.instanceMethodId(
    r'listBucketInventoryConfigurations',
    r'(Laws/sdk/kotlin/services/s3/model/ListBucketInventoryConfigurationsRequest;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;',
  );

  static final _listBucketInventoryConfigurations =
      ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<
                          (
                            ffi.Pointer<ffi.Void>,
                            ffi.Pointer<ffi.Void>
                          )>)>>('globalEnv_CallObjectMethod')
          .asFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.lang.Object listBucketInventoryConfigurations(aws.sdk.kotlin.services.s3.model.ListBucketInventoryConfigurationsRequest listBucketInventoryConfigurationsRequest, kotlin.coroutines.Continuation continuation)
  /// The returned object must be released after use, by calling the [release] method.
  Future<jni.JObject> listBucketInventoryConfigurations(
    jni.JObject listBucketInventoryConfigurationsRequest,
  ) async {
    final $p = ReceivePort();
    final $c = jni.JObject.fromReference(
        ProtectedJniExtensions.newPortContinuation($p));
    _listBucketInventoryConfigurations(
            reference.pointer,
            _id_listBucketInventoryConfigurations as jni.JMethodIDPtr,
            listBucketInventoryConfigurationsRequest.reference.pointer,
            $c.reference.pointer)
        .object(const jni.JObjectType());
    final $o = jni.JGlobalReference(jni.JObjectPtr.fromAddress(await $p.first));
    final $k = const jni.JObjectType().jClass.reference.pointer;
    if (!jni.Jni.env.IsInstanceOf($o.pointer, $k)) {
      throw 'Failed';
    }
    return const jni.JObjectType().fromReference($o);
  }

  static final _id_listBucketMetricsConfigurations = _class.instanceMethodId(
    r'listBucketMetricsConfigurations',
    r'(Laws/sdk/kotlin/services/s3/model/ListBucketMetricsConfigurationsRequest;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;',
  );

  static final _listBucketMetricsConfigurations = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.lang.Object listBucketMetricsConfigurations(aws.sdk.kotlin.services.s3.model.ListBucketMetricsConfigurationsRequest listBucketMetricsConfigurationsRequest, kotlin.coroutines.Continuation continuation)
  /// The returned object must be released after use, by calling the [release] method.
  Future<jni.JObject> listBucketMetricsConfigurations(
    jni.JObject listBucketMetricsConfigurationsRequest,
  ) async {
    final $p = ReceivePort();
    final $c = jni.JObject.fromReference(
        ProtectedJniExtensions.newPortContinuation($p));
    _listBucketMetricsConfigurations(
            reference.pointer,
            _id_listBucketMetricsConfigurations as jni.JMethodIDPtr,
            listBucketMetricsConfigurationsRequest.reference.pointer,
            $c.reference.pointer)
        .object(const jni.JObjectType());
    final $o = jni.JGlobalReference(jni.JObjectPtr.fromAddress(await $p.first));
    final $k = const jni.JObjectType().jClass.reference.pointer;
    if (!jni.Jni.env.IsInstanceOf($o.pointer, $k)) {
      throw 'Failed';
    }
    return const jni.JObjectType().fromReference($o);
  }

  static final _id_listBuckets = _class.instanceMethodId(
    r'listBuckets',
    r'(Laws/sdk/kotlin/services/s3/model/ListBucketsRequest;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;',
  );

  static final _listBuckets = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.lang.Object listBuckets(aws.sdk.kotlin.services.s3.model.ListBucketsRequest listBucketsRequest, kotlin.coroutines.Continuation continuation)
  /// The returned object must be released after use, by calling the [release] method.
  Future<jni.JObject> listBuckets(
    jni.JObject listBucketsRequest,
  ) async {
    final $p = ReceivePort();
    final $c = jni.JObject.fromReference(
        ProtectedJniExtensions.newPortContinuation($p));
    _listBuckets(reference.pointer, _id_listBuckets as jni.JMethodIDPtr,
            listBucketsRequest.reference.pointer, $c.reference.pointer)
        .object(const jni.JObjectType());
    final $o = jni.JGlobalReference(jni.JObjectPtr.fromAddress(await $p.first));
    final $k = const jni.JObjectType().jClass.reference.pointer;
    if (!jni.Jni.env.IsInstanceOf($o.pointer, $k)) {
      throw 'Failed';
    }
    return const jni.JObjectType().fromReference($o);
  }

  static final _id_listDirectoryBuckets = _class.instanceMethodId(
    r'listDirectoryBuckets',
    r'(Laws/sdk/kotlin/services/s3/model/ListDirectoryBucketsRequest;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;',
  );

  static final _listDirectoryBuckets = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.lang.Object listDirectoryBuckets(aws.sdk.kotlin.services.s3.model.ListDirectoryBucketsRequest listDirectoryBucketsRequest, kotlin.coroutines.Continuation continuation)
  /// The returned object must be released after use, by calling the [release] method.
  Future<jni.JObject> listDirectoryBuckets(
    jni.JObject listDirectoryBucketsRequest,
  ) async {
    final $p = ReceivePort();
    final $c = jni.JObject.fromReference(
        ProtectedJniExtensions.newPortContinuation($p));
    _listDirectoryBuckets(
            reference.pointer,
            _id_listDirectoryBuckets as jni.JMethodIDPtr,
            listDirectoryBucketsRequest.reference.pointer,
            $c.reference.pointer)
        .object(const jni.JObjectType());
    final $o = jni.JGlobalReference(jni.JObjectPtr.fromAddress(await $p.first));
    final $k = const jni.JObjectType().jClass.reference.pointer;
    if (!jni.Jni.env.IsInstanceOf($o.pointer, $k)) {
      throw 'Failed';
    }
    return const jni.JObjectType().fromReference($o);
  }

  static final _id_listMultipartUploads = _class.instanceMethodId(
    r'listMultipartUploads',
    r'(Laws/sdk/kotlin/services/s3/model/ListMultipartUploadsRequest;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;',
  );

  static final _listMultipartUploads = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.lang.Object listMultipartUploads(aws.sdk.kotlin.services.s3.model.ListMultipartUploadsRequest listMultipartUploadsRequest, kotlin.coroutines.Continuation continuation)
  /// The returned object must be released after use, by calling the [release] method.
  Future<jni.JObject> listMultipartUploads(
    jni.JObject listMultipartUploadsRequest,
  ) async {
    final $p = ReceivePort();
    final $c = jni.JObject.fromReference(
        ProtectedJniExtensions.newPortContinuation($p));
    _listMultipartUploads(
            reference.pointer,
            _id_listMultipartUploads as jni.JMethodIDPtr,
            listMultipartUploadsRequest.reference.pointer,
            $c.reference.pointer)
        .object(const jni.JObjectType());
    final $o = jni.JGlobalReference(jni.JObjectPtr.fromAddress(await $p.first));
    final $k = const jni.JObjectType().jClass.reference.pointer;
    if (!jni.Jni.env.IsInstanceOf($o.pointer, $k)) {
      throw 'Failed';
    }
    return const jni.JObjectType().fromReference($o);
  }

  static final _id_listObjectVersions = _class.instanceMethodId(
    r'listObjectVersions',
    r'(Laws/sdk/kotlin/services/s3/model/ListObjectVersionsRequest;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;',
  );

  static final _listObjectVersions = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.lang.Object listObjectVersions(aws.sdk.kotlin.services.s3.model.ListObjectVersionsRequest listObjectVersionsRequest, kotlin.coroutines.Continuation continuation)
  /// The returned object must be released after use, by calling the [release] method.
  Future<jni.JObject> listObjectVersions(
    jni.JObject listObjectVersionsRequest,
  ) async {
    final $p = ReceivePort();
    final $c = jni.JObject.fromReference(
        ProtectedJniExtensions.newPortContinuation($p));
    _listObjectVersions(
            reference.pointer,
            _id_listObjectVersions as jni.JMethodIDPtr,
            listObjectVersionsRequest.reference.pointer,
            $c.reference.pointer)
        .object(const jni.JObjectType());
    final $o = jni.JGlobalReference(jni.JObjectPtr.fromAddress(await $p.first));
    final $k = const jni.JObjectType().jClass.reference.pointer;
    if (!jni.Jni.env.IsInstanceOf($o.pointer, $k)) {
      throw 'Failed';
    }
    return const jni.JObjectType().fromReference($o);
  }

  static final _id_listObjects = _class.instanceMethodId(
    r'listObjects',
    r'(Laws/sdk/kotlin/services/s3/model/ListObjectsRequest;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;',
  );

  static final _listObjects = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.lang.Object listObjects(aws.sdk.kotlin.services.s3.model.ListObjectsRequest listObjectsRequest, kotlin.coroutines.Continuation continuation)
  /// The returned object must be released after use, by calling the [release] method.
  Future<jni.JObject> listObjects(
    jni.JObject listObjectsRequest,
  ) async {
    final $p = ReceivePort();
    final $c = jni.JObject.fromReference(
        ProtectedJniExtensions.newPortContinuation($p));
    _listObjects(reference.pointer, _id_listObjects as jni.JMethodIDPtr,
            listObjectsRequest.reference.pointer, $c.reference.pointer)
        .object(const jni.JObjectType());
    final $o = jni.JGlobalReference(jni.JObjectPtr.fromAddress(await $p.first));
    final $k = const jni.JObjectType().jClass.reference.pointer;
    if (!jni.Jni.env.IsInstanceOf($o.pointer, $k)) {
      throw 'Failed';
    }
    return const jni.JObjectType().fromReference($o);
  }

  static final _id_listObjectsV2 = _class.instanceMethodId(
    r'listObjectsV2',
    r'(Laws/sdk/kotlin/services/s3/model/ListObjectsV2Request;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;',
  );

  static final _listObjectsV2 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.lang.Object listObjectsV2(aws.sdk.kotlin.services.s3.model.ListObjectsV2Request listObjectsV2Request, kotlin.coroutines.Continuation continuation)
  /// The returned object must be released after use, by calling the [release] method.
  Future<jni.JObject> listObjectsV2(
    jni.JObject listObjectsV2Request,
  ) async {
    final $p = ReceivePort();
    final $c = jni.JObject.fromReference(
        ProtectedJniExtensions.newPortContinuation($p));
    _listObjectsV2(reference.pointer, _id_listObjectsV2 as jni.JMethodIDPtr,
            listObjectsV2Request.reference.pointer, $c.reference.pointer)
        .object(const jni.JObjectType());
    final $o = jni.JGlobalReference(jni.JObjectPtr.fromAddress(await $p.first));
    final $k = const jni.JObjectType().jClass.reference.pointer;
    if (!jni.Jni.env.IsInstanceOf($o.pointer, $k)) {
      throw 'Failed';
    }
    return const jni.JObjectType().fromReference($o);
  }

  static final _id_listParts = _class.instanceMethodId(
    r'listParts',
    r'(Laws/sdk/kotlin/services/s3/model/ListPartsRequest;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;',
  );

  static final _listParts = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.lang.Object listParts(aws.sdk.kotlin.services.s3.model.ListPartsRequest listPartsRequest, kotlin.coroutines.Continuation continuation)
  /// The returned object must be released after use, by calling the [release] method.
  Future<jni.JObject> listParts(
    jni.JObject listPartsRequest,
  ) async {
    final $p = ReceivePort();
    final $c = jni.JObject.fromReference(
        ProtectedJniExtensions.newPortContinuation($p));
    _listParts(reference.pointer, _id_listParts as jni.JMethodIDPtr,
            listPartsRequest.reference.pointer, $c.reference.pointer)
        .object(const jni.JObjectType());
    final $o = jni.JGlobalReference(jni.JObjectPtr.fromAddress(await $p.first));
    final $k = const jni.JObjectType().jClass.reference.pointer;
    if (!jni.Jni.env.IsInstanceOf($o.pointer, $k)) {
      throw 'Failed';
    }
    return const jni.JObjectType().fromReference($o);
  }

  static final _id_putBucketAccelerateConfiguration = _class.instanceMethodId(
    r'putBucketAccelerateConfiguration',
    r'(Laws/sdk/kotlin/services/s3/model/PutBucketAccelerateConfigurationRequest;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;',
  );

  static final _putBucketAccelerateConfiguration =
      ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<
                          (
                            ffi.Pointer<ffi.Void>,
                            ffi.Pointer<ffi.Void>
                          )>)>>('globalEnv_CallObjectMethod')
          .asFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.lang.Object putBucketAccelerateConfiguration(aws.sdk.kotlin.services.s3.model.PutBucketAccelerateConfigurationRequest putBucketAccelerateConfigurationRequest, kotlin.coroutines.Continuation continuation)
  /// The returned object must be released after use, by calling the [release] method.
  Future<jni.JObject> putBucketAccelerateConfiguration(
    jni.JObject putBucketAccelerateConfigurationRequest,
  ) async {
    final $p = ReceivePort();
    final $c = jni.JObject.fromReference(
        ProtectedJniExtensions.newPortContinuation($p));
    _putBucketAccelerateConfiguration(
            reference.pointer,
            _id_putBucketAccelerateConfiguration as jni.JMethodIDPtr,
            putBucketAccelerateConfigurationRequest.reference.pointer,
            $c.reference.pointer)
        .object(const jni.JObjectType());
    final $o = jni.JGlobalReference(jni.JObjectPtr.fromAddress(await $p.first));
    final $k = const jni.JObjectType().jClass.reference.pointer;
    if (!jni.Jni.env.IsInstanceOf($o.pointer, $k)) {
      throw 'Failed';
    }
    return const jni.JObjectType().fromReference($o);
  }

  static final _id_putBucketAcl = _class.instanceMethodId(
    r'putBucketAcl',
    r'(Laws/sdk/kotlin/services/s3/model/PutBucketAclRequest;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;',
  );

  static final _putBucketAcl = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.lang.Object putBucketAcl(aws.sdk.kotlin.services.s3.model.PutBucketAclRequest putBucketAclRequest, kotlin.coroutines.Continuation continuation)
  /// The returned object must be released after use, by calling the [release] method.
  Future<jni.JObject> putBucketAcl(
    jni.JObject putBucketAclRequest,
  ) async {
    final $p = ReceivePort();
    final $c = jni.JObject.fromReference(
        ProtectedJniExtensions.newPortContinuation($p));
    _putBucketAcl(reference.pointer, _id_putBucketAcl as jni.JMethodIDPtr,
            putBucketAclRequest.reference.pointer, $c.reference.pointer)
        .object(const jni.JObjectType());
    final $o = jni.JGlobalReference(jni.JObjectPtr.fromAddress(await $p.first));
    final $k = const jni.JObjectType().jClass.reference.pointer;
    if (!jni.Jni.env.IsInstanceOf($o.pointer, $k)) {
      throw 'Failed';
    }
    return const jni.JObjectType().fromReference($o);
  }

  static final _id_putBucketAnalyticsConfiguration = _class.instanceMethodId(
    r'putBucketAnalyticsConfiguration',
    r'(Laws/sdk/kotlin/services/s3/model/PutBucketAnalyticsConfigurationRequest;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;',
  );

  static final _putBucketAnalyticsConfiguration = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.lang.Object putBucketAnalyticsConfiguration(aws.sdk.kotlin.services.s3.model.PutBucketAnalyticsConfigurationRequest putBucketAnalyticsConfigurationRequest, kotlin.coroutines.Continuation continuation)
  /// The returned object must be released after use, by calling the [release] method.
  Future<jni.JObject> putBucketAnalyticsConfiguration(
    jni.JObject putBucketAnalyticsConfigurationRequest,
  ) async {
    final $p = ReceivePort();
    final $c = jni.JObject.fromReference(
        ProtectedJniExtensions.newPortContinuation($p));
    _putBucketAnalyticsConfiguration(
            reference.pointer,
            _id_putBucketAnalyticsConfiguration as jni.JMethodIDPtr,
            putBucketAnalyticsConfigurationRequest.reference.pointer,
            $c.reference.pointer)
        .object(const jni.JObjectType());
    final $o = jni.JGlobalReference(jni.JObjectPtr.fromAddress(await $p.first));
    final $k = const jni.JObjectType().jClass.reference.pointer;
    if (!jni.Jni.env.IsInstanceOf($o.pointer, $k)) {
      throw 'Failed';
    }
    return const jni.JObjectType().fromReference($o);
  }

  static final _id_putBucketCors = _class.instanceMethodId(
    r'putBucketCors',
    r'(Laws/sdk/kotlin/services/s3/model/PutBucketCorsRequest;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;',
  );

  static final _putBucketCors = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.lang.Object putBucketCors(aws.sdk.kotlin.services.s3.model.PutBucketCorsRequest putBucketCorsRequest, kotlin.coroutines.Continuation continuation)
  /// The returned object must be released after use, by calling the [release] method.
  Future<jni.JObject> putBucketCors(
    jni.JObject putBucketCorsRequest,
  ) async {
    final $p = ReceivePort();
    final $c = jni.JObject.fromReference(
        ProtectedJniExtensions.newPortContinuation($p));
    _putBucketCors(reference.pointer, _id_putBucketCors as jni.JMethodIDPtr,
            putBucketCorsRequest.reference.pointer, $c.reference.pointer)
        .object(const jni.JObjectType());
    final $o = jni.JGlobalReference(jni.JObjectPtr.fromAddress(await $p.first));
    final $k = const jni.JObjectType().jClass.reference.pointer;
    if (!jni.Jni.env.IsInstanceOf($o.pointer, $k)) {
      throw 'Failed';
    }
    return const jni.JObjectType().fromReference($o);
  }

  static final _id_putBucketEncryption = _class.instanceMethodId(
    r'putBucketEncryption',
    r'(Laws/sdk/kotlin/services/s3/model/PutBucketEncryptionRequest;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;',
  );

  static final _putBucketEncryption = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.lang.Object putBucketEncryption(aws.sdk.kotlin.services.s3.model.PutBucketEncryptionRequest putBucketEncryptionRequest, kotlin.coroutines.Continuation continuation)
  /// The returned object must be released after use, by calling the [release] method.
  Future<jni.JObject> putBucketEncryption(
    jni.JObject putBucketEncryptionRequest,
  ) async {
    final $p = ReceivePort();
    final $c = jni.JObject.fromReference(
        ProtectedJniExtensions.newPortContinuation($p));
    _putBucketEncryption(
            reference.pointer,
            _id_putBucketEncryption as jni.JMethodIDPtr,
            putBucketEncryptionRequest.reference.pointer,
            $c.reference.pointer)
        .object(const jni.JObjectType());
    final $o = jni.JGlobalReference(jni.JObjectPtr.fromAddress(await $p.first));
    final $k = const jni.JObjectType().jClass.reference.pointer;
    if (!jni.Jni.env.IsInstanceOf($o.pointer, $k)) {
      throw 'Failed';
    }
    return const jni.JObjectType().fromReference($o);
  }

  static final _id_putBucketIntelligentTieringConfiguration =
      _class.instanceMethodId(
    r'putBucketIntelligentTieringConfiguration',
    r'(Laws/sdk/kotlin/services/s3/model/PutBucketIntelligentTieringConfigurationRequest;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;',
  );

  static final _putBucketIntelligentTieringConfiguration =
      ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<
                          (
                            ffi.Pointer<ffi.Void>,
                            ffi.Pointer<ffi.Void>
                          )>)>>('globalEnv_CallObjectMethod')
          .asFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.lang.Object putBucketIntelligentTieringConfiguration(aws.sdk.kotlin.services.s3.model.PutBucketIntelligentTieringConfigurationRequest putBucketIntelligentTieringConfigurationRequest, kotlin.coroutines.Continuation continuation)
  /// The returned object must be released after use, by calling the [release] method.
  Future<jni.JObject> putBucketIntelligentTieringConfiguration(
    jni.JObject putBucketIntelligentTieringConfigurationRequest,
  ) async {
    final $p = ReceivePort();
    final $c = jni.JObject.fromReference(
        ProtectedJniExtensions.newPortContinuation($p));
    _putBucketIntelligentTieringConfiguration(
            reference.pointer,
            _id_putBucketIntelligentTieringConfiguration as jni.JMethodIDPtr,
            putBucketIntelligentTieringConfigurationRequest.reference.pointer,
            $c.reference.pointer)
        .object(const jni.JObjectType());
    final $o = jni.JGlobalReference(jni.JObjectPtr.fromAddress(await $p.first));
    final $k = const jni.JObjectType().jClass.reference.pointer;
    if (!jni.Jni.env.IsInstanceOf($o.pointer, $k)) {
      throw 'Failed';
    }
    return const jni.JObjectType().fromReference($o);
  }

  static final _id_putBucketInventoryConfiguration = _class.instanceMethodId(
    r'putBucketInventoryConfiguration',
    r'(Laws/sdk/kotlin/services/s3/model/PutBucketInventoryConfigurationRequest;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;',
  );

  static final _putBucketInventoryConfiguration = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.lang.Object putBucketInventoryConfiguration(aws.sdk.kotlin.services.s3.model.PutBucketInventoryConfigurationRequest putBucketInventoryConfigurationRequest, kotlin.coroutines.Continuation continuation)
  /// The returned object must be released after use, by calling the [release] method.
  Future<jni.JObject> putBucketInventoryConfiguration(
    jni.JObject putBucketInventoryConfigurationRequest,
  ) async {
    final $p = ReceivePort();
    final $c = jni.JObject.fromReference(
        ProtectedJniExtensions.newPortContinuation($p));
    _putBucketInventoryConfiguration(
            reference.pointer,
            _id_putBucketInventoryConfiguration as jni.JMethodIDPtr,
            putBucketInventoryConfigurationRequest.reference.pointer,
            $c.reference.pointer)
        .object(const jni.JObjectType());
    final $o = jni.JGlobalReference(jni.JObjectPtr.fromAddress(await $p.first));
    final $k = const jni.JObjectType().jClass.reference.pointer;
    if (!jni.Jni.env.IsInstanceOf($o.pointer, $k)) {
      throw 'Failed';
    }
    return const jni.JObjectType().fromReference($o);
  }

  static final _id_putBucketLifecycleConfiguration = _class.instanceMethodId(
    r'putBucketLifecycleConfiguration',
    r'(Laws/sdk/kotlin/services/s3/model/PutBucketLifecycleConfigurationRequest;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;',
  );

  static final _putBucketLifecycleConfiguration = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.lang.Object putBucketLifecycleConfiguration(aws.sdk.kotlin.services.s3.model.PutBucketLifecycleConfigurationRequest putBucketLifecycleConfigurationRequest, kotlin.coroutines.Continuation continuation)
  /// The returned object must be released after use, by calling the [release] method.
  Future<jni.JObject> putBucketLifecycleConfiguration(
    jni.JObject putBucketLifecycleConfigurationRequest,
  ) async {
    final $p = ReceivePort();
    final $c = jni.JObject.fromReference(
        ProtectedJniExtensions.newPortContinuation($p));
    _putBucketLifecycleConfiguration(
            reference.pointer,
            _id_putBucketLifecycleConfiguration as jni.JMethodIDPtr,
            putBucketLifecycleConfigurationRequest.reference.pointer,
            $c.reference.pointer)
        .object(const jni.JObjectType());
    final $o = jni.JGlobalReference(jni.JObjectPtr.fromAddress(await $p.first));
    final $k = const jni.JObjectType().jClass.reference.pointer;
    if (!jni.Jni.env.IsInstanceOf($o.pointer, $k)) {
      throw 'Failed';
    }
    return const jni.JObjectType().fromReference($o);
  }

  static final _id_putBucketLogging = _class.instanceMethodId(
    r'putBucketLogging',
    r'(Laws/sdk/kotlin/services/s3/model/PutBucketLoggingRequest;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;',
  );

  static final _putBucketLogging = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.lang.Object putBucketLogging(aws.sdk.kotlin.services.s3.model.PutBucketLoggingRequest putBucketLoggingRequest, kotlin.coroutines.Continuation continuation)
  /// The returned object must be released after use, by calling the [release] method.
  Future<jni.JObject> putBucketLogging(
    jni.JObject putBucketLoggingRequest,
  ) async {
    final $p = ReceivePort();
    final $c = jni.JObject.fromReference(
        ProtectedJniExtensions.newPortContinuation($p));
    _putBucketLogging(
            reference.pointer,
            _id_putBucketLogging as jni.JMethodIDPtr,
            putBucketLoggingRequest.reference.pointer,
            $c.reference.pointer)
        .object(const jni.JObjectType());
    final $o = jni.JGlobalReference(jni.JObjectPtr.fromAddress(await $p.first));
    final $k = const jni.JObjectType().jClass.reference.pointer;
    if (!jni.Jni.env.IsInstanceOf($o.pointer, $k)) {
      throw 'Failed';
    }
    return const jni.JObjectType().fromReference($o);
  }

  static final _id_putBucketMetricsConfiguration = _class.instanceMethodId(
    r'putBucketMetricsConfiguration',
    r'(Laws/sdk/kotlin/services/s3/model/PutBucketMetricsConfigurationRequest;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;',
  );

  static final _putBucketMetricsConfiguration = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.lang.Object putBucketMetricsConfiguration(aws.sdk.kotlin.services.s3.model.PutBucketMetricsConfigurationRequest putBucketMetricsConfigurationRequest, kotlin.coroutines.Continuation continuation)
  /// The returned object must be released after use, by calling the [release] method.
  Future<jni.JObject> putBucketMetricsConfiguration(
    jni.JObject putBucketMetricsConfigurationRequest,
  ) async {
    final $p = ReceivePort();
    final $c = jni.JObject.fromReference(
        ProtectedJniExtensions.newPortContinuation($p));
    _putBucketMetricsConfiguration(
            reference.pointer,
            _id_putBucketMetricsConfiguration as jni.JMethodIDPtr,
            putBucketMetricsConfigurationRequest.reference.pointer,
            $c.reference.pointer)
        .object(const jni.JObjectType());
    final $o = jni.JGlobalReference(jni.JObjectPtr.fromAddress(await $p.first));
    final $k = const jni.JObjectType().jClass.reference.pointer;
    if (!jni.Jni.env.IsInstanceOf($o.pointer, $k)) {
      throw 'Failed';
    }
    return const jni.JObjectType().fromReference($o);
  }

  static final _id_putBucketNotificationConfiguration = _class.instanceMethodId(
    r'putBucketNotificationConfiguration',
    r'(Laws/sdk/kotlin/services/s3/model/PutBucketNotificationConfigurationRequest;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;',
  );

  static final _putBucketNotificationConfiguration =
      ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<
                          (
                            ffi.Pointer<ffi.Void>,
                            ffi.Pointer<ffi.Void>
                          )>)>>('globalEnv_CallObjectMethod')
          .asFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.lang.Object putBucketNotificationConfiguration(aws.sdk.kotlin.services.s3.model.PutBucketNotificationConfigurationRequest putBucketNotificationConfigurationRequest, kotlin.coroutines.Continuation continuation)
  /// The returned object must be released after use, by calling the [release] method.
  Future<jni.JObject> putBucketNotificationConfiguration(
    jni.JObject putBucketNotificationConfigurationRequest,
  ) async {
    final $p = ReceivePort();
    final $c = jni.JObject.fromReference(
        ProtectedJniExtensions.newPortContinuation($p));
    _putBucketNotificationConfiguration(
            reference.pointer,
            _id_putBucketNotificationConfiguration as jni.JMethodIDPtr,
            putBucketNotificationConfigurationRequest.reference.pointer,
            $c.reference.pointer)
        .object(const jni.JObjectType());
    final $o = jni.JGlobalReference(jni.JObjectPtr.fromAddress(await $p.first));
    final $k = const jni.JObjectType().jClass.reference.pointer;
    if (!jni.Jni.env.IsInstanceOf($o.pointer, $k)) {
      throw 'Failed';
    }
    return const jni.JObjectType().fromReference($o);
  }

  static final _id_putBucketOwnershipControls = _class.instanceMethodId(
    r'putBucketOwnershipControls',
    r'(Laws/sdk/kotlin/services/s3/model/PutBucketOwnershipControlsRequest;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;',
  );

  static final _putBucketOwnershipControls = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.lang.Object putBucketOwnershipControls(aws.sdk.kotlin.services.s3.model.PutBucketOwnershipControlsRequest putBucketOwnershipControlsRequest, kotlin.coroutines.Continuation continuation)
  /// The returned object must be released after use, by calling the [release] method.
  Future<jni.JObject> putBucketOwnershipControls(
    jni.JObject putBucketOwnershipControlsRequest,
  ) async {
    final $p = ReceivePort();
    final $c = jni.JObject.fromReference(
        ProtectedJniExtensions.newPortContinuation($p));
    _putBucketOwnershipControls(
            reference.pointer,
            _id_putBucketOwnershipControls as jni.JMethodIDPtr,
            putBucketOwnershipControlsRequest.reference.pointer,
            $c.reference.pointer)
        .object(const jni.JObjectType());
    final $o = jni.JGlobalReference(jni.JObjectPtr.fromAddress(await $p.first));
    final $k = const jni.JObjectType().jClass.reference.pointer;
    if (!jni.Jni.env.IsInstanceOf($o.pointer, $k)) {
      throw 'Failed';
    }
    return const jni.JObjectType().fromReference($o);
  }

  static final _id_putBucketPolicy = _class.instanceMethodId(
    r'putBucketPolicy',
    r'(Laws/sdk/kotlin/services/s3/model/PutBucketPolicyRequest;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;',
  );

  static final _putBucketPolicy = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.lang.Object putBucketPolicy(aws.sdk.kotlin.services.s3.model.PutBucketPolicyRequest putBucketPolicyRequest, kotlin.coroutines.Continuation continuation)
  /// The returned object must be released after use, by calling the [release] method.
  Future<jni.JObject> putBucketPolicy(
    jni.JObject putBucketPolicyRequest,
  ) async {
    final $p = ReceivePort();
    final $c = jni.JObject.fromReference(
        ProtectedJniExtensions.newPortContinuation($p));
    _putBucketPolicy(reference.pointer, _id_putBucketPolicy as jni.JMethodIDPtr,
            putBucketPolicyRequest.reference.pointer, $c.reference.pointer)
        .object(const jni.JObjectType());
    final $o = jni.JGlobalReference(jni.JObjectPtr.fromAddress(await $p.first));
    final $k = const jni.JObjectType().jClass.reference.pointer;
    if (!jni.Jni.env.IsInstanceOf($o.pointer, $k)) {
      throw 'Failed';
    }
    return const jni.JObjectType().fromReference($o);
  }

  static final _id_putBucketReplication = _class.instanceMethodId(
    r'putBucketReplication',
    r'(Laws/sdk/kotlin/services/s3/model/PutBucketReplicationRequest;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;',
  );

  static final _putBucketReplication = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.lang.Object putBucketReplication(aws.sdk.kotlin.services.s3.model.PutBucketReplicationRequest putBucketReplicationRequest, kotlin.coroutines.Continuation continuation)
  /// The returned object must be released after use, by calling the [release] method.
  Future<jni.JObject> putBucketReplication(
    jni.JObject putBucketReplicationRequest,
  ) async {
    final $p = ReceivePort();
    final $c = jni.JObject.fromReference(
        ProtectedJniExtensions.newPortContinuation($p));
    _putBucketReplication(
            reference.pointer,
            _id_putBucketReplication as jni.JMethodIDPtr,
            putBucketReplicationRequest.reference.pointer,
            $c.reference.pointer)
        .object(const jni.JObjectType());
    final $o = jni.JGlobalReference(jni.JObjectPtr.fromAddress(await $p.first));
    final $k = const jni.JObjectType().jClass.reference.pointer;
    if (!jni.Jni.env.IsInstanceOf($o.pointer, $k)) {
      throw 'Failed';
    }
    return const jni.JObjectType().fromReference($o);
  }

  static final _id_putBucketRequestPayment = _class.instanceMethodId(
    r'putBucketRequestPayment',
    r'(Laws/sdk/kotlin/services/s3/model/PutBucketRequestPaymentRequest;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;',
  );

  static final _putBucketRequestPayment = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.lang.Object putBucketRequestPayment(aws.sdk.kotlin.services.s3.model.PutBucketRequestPaymentRequest putBucketRequestPaymentRequest, kotlin.coroutines.Continuation continuation)
  /// The returned object must be released after use, by calling the [release] method.
  Future<jni.JObject> putBucketRequestPayment(
    jni.JObject putBucketRequestPaymentRequest,
  ) async {
    final $p = ReceivePort();
    final $c = jni.JObject.fromReference(
        ProtectedJniExtensions.newPortContinuation($p));
    _putBucketRequestPayment(
            reference.pointer,
            _id_putBucketRequestPayment as jni.JMethodIDPtr,
            putBucketRequestPaymentRequest.reference.pointer,
            $c.reference.pointer)
        .object(const jni.JObjectType());
    final $o = jni.JGlobalReference(jni.JObjectPtr.fromAddress(await $p.first));
    final $k = const jni.JObjectType().jClass.reference.pointer;
    if (!jni.Jni.env.IsInstanceOf($o.pointer, $k)) {
      throw 'Failed';
    }
    return const jni.JObjectType().fromReference($o);
  }

  static final _id_putBucketTagging = _class.instanceMethodId(
    r'putBucketTagging',
    r'(Laws/sdk/kotlin/services/s3/model/PutBucketTaggingRequest;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;',
  );

  static final _putBucketTagging = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.lang.Object putBucketTagging(aws.sdk.kotlin.services.s3.model.PutBucketTaggingRequest putBucketTaggingRequest, kotlin.coroutines.Continuation continuation)
  /// The returned object must be released after use, by calling the [release] method.
  Future<jni.JObject> putBucketTagging(
    jni.JObject putBucketTaggingRequest,
  ) async {
    final $p = ReceivePort();
    final $c = jni.JObject.fromReference(
        ProtectedJniExtensions.newPortContinuation($p));
    _putBucketTagging(
            reference.pointer,
            _id_putBucketTagging as jni.JMethodIDPtr,
            putBucketTaggingRequest.reference.pointer,
            $c.reference.pointer)
        .object(const jni.JObjectType());
    final $o = jni.JGlobalReference(jni.JObjectPtr.fromAddress(await $p.first));
    final $k = const jni.JObjectType().jClass.reference.pointer;
    if (!jni.Jni.env.IsInstanceOf($o.pointer, $k)) {
      throw 'Failed';
    }
    return const jni.JObjectType().fromReference($o);
  }

  static final _id_putBucketVersioning = _class.instanceMethodId(
    r'putBucketVersioning',
    r'(Laws/sdk/kotlin/services/s3/model/PutBucketVersioningRequest;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;',
  );

  static final _putBucketVersioning = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.lang.Object putBucketVersioning(aws.sdk.kotlin.services.s3.model.PutBucketVersioningRequest putBucketVersioningRequest, kotlin.coroutines.Continuation continuation)
  /// The returned object must be released after use, by calling the [release] method.
  Future<jni.JObject> putBucketVersioning(
    jni.JObject putBucketVersioningRequest,
  ) async {
    final $p = ReceivePort();
    final $c = jni.JObject.fromReference(
        ProtectedJniExtensions.newPortContinuation($p));
    _putBucketVersioning(
            reference.pointer,
            _id_putBucketVersioning as jni.JMethodIDPtr,
            putBucketVersioningRequest.reference.pointer,
            $c.reference.pointer)
        .object(const jni.JObjectType());
    final $o = jni.JGlobalReference(jni.JObjectPtr.fromAddress(await $p.first));
    final $k = const jni.JObjectType().jClass.reference.pointer;
    if (!jni.Jni.env.IsInstanceOf($o.pointer, $k)) {
      throw 'Failed';
    }
    return const jni.JObjectType().fromReference($o);
  }

  static final _id_putBucketWebsite = _class.instanceMethodId(
    r'putBucketWebsite',
    r'(Laws/sdk/kotlin/services/s3/model/PutBucketWebsiteRequest;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;',
  );

  static final _putBucketWebsite = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.lang.Object putBucketWebsite(aws.sdk.kotlin.services.s3.model.PutBucketWebsiteRequest putBucketWebsiteRequest, kotlin.coroutines.Continuation continuation)
  /// The returned object must be released after use, by calling the [release] method.
  Future<jni.JObject> putBucketWebsite(
    jni.JObject putBucketWebsiteRequest,
  ) async {
    final $p = ReceivePort();
    final $c = jni.JObject.fromReference(
        ProtectedJniExtensions.newPortContinuation($p));
    _putBucketWebsite(
            reference.pointer,
            _id_putBucketWebsite as jni.JMethodIDPtr,
            putBucketWebsiteRequest.reference.pointer,
            $c.reference.pointer)
        .object(const jni.JObjectType());
    final $o = jni.JGlobalReference(jni.JObjectPtr.fromAddress(await $p.first));
    final $k = const jni.JObjectType().jClass.reference.pointer;
    if (!jni.Jni.env.IsInstanceOf($o.pointer, $k)) {
      throw 'Failed';
    }
    return const jni.JObjectType().fromReference($o);
  }

  static final _id_putObject = _class.instanceMethodId(
    r'putObject',
    r'(Laws/sdk/kotlin/services/s3/model/PutObjectRequest;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;',
  );

  static final _putObject = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.lang.Object putObject(aws.sdk.kotlin.services.s3.model.PutObjectRequest putObjectRequest, kotlin.coroutines.Continuation continuation)
  /// The returned object must be released after use, by calling the [release] method.
  Future<putobjectresponse_.PutObjectResponse> putObject(
    putobjectrequest_.PutObjectRequest putObjectRequest,
  ) async {
    final $p = ReceivePort();
    final $c = jni.JObject.fromReference(
        ProtectedJniExtensions.newPortContinuation($p));
    _putObject(reference.pointer, _id_putObject as jni.JMethodIDPtr,
            putObjectRequest.reference.pointer, $c.reference.pointer)
        .object(const jni.JObjectType());
    final $o = jni.JGlobalReference(jni.JObjectPtr.fromAddress(await $p.first));
    final $k = const putobjectresponse_.$PutObjectResponseType()
        .jClass
        .reference
        .pointer;
    if (!jni.Jni.env.IsInstanceOf($o.pointer, $k)) {
      throw 'Failed';
    }
    return const putobjectresponse_.$PutObjectResponseType().fromReference($o);
  }

  static final _id_putObjectAcl = _class.instanceMethodId(
    r'putObjectAcl',
    r'(Laws/sdk/kotlin/services/s3/model/PutObjectAclRequest;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;',
  );

  static final _putObjectAcl = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.lang.Object putObjectAcl(aws.sdk.kotlin.services.s3.model.PutObjectAclRequest putObjectAclRequest, kotlin.coroutines.Continuation continuation)
  /// The returned object must be released after use, by calling the [release] method.
  Future<jni.JObject> putObjectAcl(
    jni.JObject putObjectAclRequest,
  ) async {
    final $p = ReceivePort();
    final $c = jni.JObject.fromReference(
        ProtectedJniExtensions.newPortContinuation($p));
    _putObjectAcl(reference.pointer, _id_putObjectAcl as jni.JMethodIDPtr,
            putObjectAclRequest.reference.pointer, $c.reference.pointer)
        .object(const jni.JObjectType());
    final $o = jni.JGlobalReference(jni.JObjectPtr.fromAddress(await $p.first));
    final $k = const jni.JObjectType().jClass.reference.pointer;
    if (!jni.Jni.env.IsInstanceOf($o.pointer, $k)) {
      throw 'Failed';
    }
    return const jni.JObjectType().fromReference($o);
  }

  static final _id_putObjectLegalHold = _class.instanceMethodId(
    r'putObjectLegalHold',
    r'(Laws/sdk/kotlin/services/s3/model/PutObjectLegalHoldRequest;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;',
  );

  static final _putObjectLegalHold = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.lang.Object putObjectLegalHold(aws.sdk.kotlin.services.s3.model.PutObjectLegalHoldRequest putObjectLegalHoldRequest, kotlin.coroutines.Continuation continuation)
  /// The returned object must be released after use, by calling the [release] method.
  Future<jni.JObject> putObjectLegalHold(
    jni.JObject putObjectLegalHoldRequest,
  ) async {
    final $p = ReceivePort();
    final $c = jni.JObject.fromReference(
        ProtectedJniExtensions.newPortContinuation($p));
    _putObjectLegalHold(
            reference.pointer,
            _id_putObjectLegalHold as jni.JMethodIDPtr,
            putObjectLegalHoldRequest.reference.pointer,
            $c.reference.pointer)
        .object(const jni.JObjectType());
    final $o = jni.JGlobalReference(jni.JObjectPtr.fromAddress(await $p.first));
    final $k = const jni.JObjectType().jClass.reference.pointer;
    if (!jni.Jni.env.IsInstanceOf($o.pointer, $k)) {
      throw 'Failed';
    }
    return const jni.JObjectType().fromReference($o);
  }

  static final _id_putObjectLockConfiguration = _class.instanceMethodId(
    r'putObjectLockConfiguration',
    r'(Laws/sdk/kotlin/services/s3/model/PutObjectLockConfigurationRequest;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;',
  );

  static final _putObjectLockConfiguration = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.lang.Object putObjectLockConfiguration(aws.sdk.kotlin.services.s3.model.PutObjectLockConfigurationRequest putObjectLockConfigurationRequest, kotlin.coroutines.Continuation continuation)
  /// The returned object must be released after use, by calling the [release] method.
  Future<jni.JObject> putObjectLockConfiguration(
    jni.JObject putObjectLockConfigurationRequest,
  ) async {
    final $p = ReceivePort();
    final $c = jni.JObject.fromReference(
        ProtectedJniExtensions.newPortContinuation($p));
    _putObjectLockConfiguration(
            reference.pointer,
            _id_putObjectLockConfiguration as jni.JMethodIDPtr,
            putObjectLockConfigurationRequest.reference.pointer,
            $c.reference.pointer)
        .object(const jni.JObjectType());
    final $o = jni.JGlobalReference(jni.JObjectPtr.fromAddress(await $p.first));
    final $k = const jni.JObjectType().jClass.reference.pointer;
    if (!jni.Jni.env.IsInstanceOf($o.pointer, $k)) {
      throw 'Failed';
    }
    return const jni.JObjectType().fromReference($o);
  }

  static final _id_putObjectRetention = _class.instanceMethodId(
    r'putObjectRetention',
    r'(Laws/sdk/kotlin/services/s3/model/PutObjectRetentionRequest;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;',
  );

  static final _putObjectRetention = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.lang.Object putObjectRetention(aws.sdk.kotlin.services.s3.model.PutObjectRetentionRequest putObjectRetentionRequest, kotlin.coroutines.Continuation continuation)
  /// The returned object must be released after use, by calling the [release] method.
  Future<jni.JObject> putObjectRetention(
    jni.JObject putObjectRetentionRequest,
  ) async {
    final $p = ReceivePort();
    final $c = jni.JObject.fromReference(
        ProtectedJniExtensions.newPortContinuation($p));
    _putObjectRetention(
            reference.pointer,
            _id_putObjectRetention as jni.JMethodIDPtr,
            putObjectRetentionRequest.reference.pointer,
            $c.reference.pointer)
        .object(const jni.JObjectType());
    final $o = jni.JGlobalReference(jni.JObjectPtr.fromAddress(await $p.first));
    final $k = const jni.JObjectType().jClass.reference.pointer;
    if (!jni.Jni.env.IsInstanceOf($o.pointer, $k)) {
      throw 'Failed';
    }
    return const jni.JObjectType().fromReference($o);
  }

  static final _id_putObjectTagging = _class.instanceMethodId(
    r'putObjectTagging',
    r'(Laws/sdk/kotlin/services/s3/model/PutObjectTaggingRequest;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;',
  );

  static final _putObjectTagging = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.lang.Object putObjectTagging(aws.sdk.kotlin.services.s3.model.PutObjectTaggingRequest putObjectTaggingRequest, kotlin.coroutines.Continuation continuation)
  /// The returned object must be released after use, by calling the [release] method.
  Future<jni.JObject> putObjectTagging(
    jni.JObject putObjectTaggingRequest,
  ) async {
    final $p = ReceivePort();
    final $c = jni.JObject.fromReference(
        ProtectedJniExtensions.newPortContinuation($p));
    _putObjectTagging(
            reference.pointer,
            _id_putObjectTagging as jni.JMethodIDPtr,
            putObjectTaggingRequest.reference.pointer,
            $c.reference.pointer)
        .object(const jni.JObjectType());
    final $o = jni.JGlobalReference(jni.JObjectPtr.fromAddress(await $p.first));
    final $k = const jni.JObjectType().jClass.reference.pointer;
    if (!jni.Jni.env.IsInstanceOf($o.pointer, $k)) {
      throw 'Failed';
    }
    return const jni.JObjectType().fromReference($o);
  }

  static final _id_putPublicAccessBlock = _class.instanceMethodId(
    r'putPublicAccessBlock',
    r'(Laws/sdk/kotlin/services/s3/model/PutPublicAccessBlockRequest;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;',
  );

  static final _putPublicAccessBlock = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.lang.Object putPublicAccessBlock(aws.sdk.kotlin.services.s3.model.PutPublicAccessBlockRequest putPublicAccessBlockRequest, kotlin.coroutines.Continuation continuation)
  /// The returned object must be released after use, by calling the [release] method.
  Future<jni.JObject> putPublicAccessBlock(
    jni.JObject putPublicAccessBlockRequest,
  ) async {
    final $p = ReceivePort();
    final $c = jni.JObject.fromReference(
        ProtectedJniExtensions.newPortContinuation($p));
    _putPublicAccessBlock(
            reference.pointer,
            _id_putPublicAccessBlock as jni.JMethodIDPtr,
            putPublicAccessBlockRequest.reference.pointer,
            $c.reference.pointer)
        .object(const jni.JObjectType());
    final $o = jni.JGlobalReference(jni.JObjectPtr.fromAddress(await $p.first));
    final $k = const jni.JObjectType().jClass.reference.pointer;
    if (!jni.Jni.env.IsInstanceOf($o.pointer, $k)) {
      throw 'Failed';
    }
    return const jni.JObjectType().fromReference($o);
  }

  static final _id_restoreObject = _class.instanceMethodId(
    r'restoreObject',
    r'(Laws/sdk/kotlin/services/s3/model/RestoreObjectRequest;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;',
  );

  static final _restoreObject = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.lang.Object restoreObject(aws.sdk.kotlin.services.s3.model.RestoreObjectRequest restoreObjectRequest, kotlin.coroutines.Continuation continuation)
  /// The returned object must be released after use, by calling the [release] method.
  Future<jni.JObject> restoreObject(
    jni.JObject restoreObjectRequest,
  ) async {
    final $p = ReceivePort();
    final $c = jni.JObject.fromReference(
        ProtectedJniExtensions.newPortContinuation($p));
    _restoreObject(reference.pointer, _id_restoreObject as jni.JMethodIDPtr,
            restoreObjectRequest.reference.pointer, $c.reference.pointer)
        .object(const jni.JObjectType());
    final $o = jni.JGlobalReference(jni.JObjectPtr.fromAddress(await $p.first));
    final $k = const jni.JObjectType().jClass.reference.pointer;
    if (!jni.Jni.env.IsInstanceOf($o.pointer, $k)) {
      throw 'Failed';
    }
    return const jni.JObjectType().fromReference($o);
  }

  static final _id_selectObjectContent = _class.instanceMethodId(
    r'selectObjectContent',
    r'(Laws/sdk/kotlin/services/s3/model/SelectObjectContentRequest;Lkotlin/jvm/functions/Function2;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;',
  );

  static final _selectObjectContent = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.lang.Object selectObjectContent(aws.sdk.kotlin.services.s3.model.SelectObjectContentRequest selectObjectContentRequest, kotlin.jvm.functions.Function2 function2, kotlin.coroutines.Continuation continuation)
  /// The returned object must be released after use, by calling the [release] method.
  Future<$T> selectObjectContent<$T extends jni.JObject>(
    jni.JObject selectObjectContentRequest,
    jni.JObject function2, {
    required jni.JObjType<$T> T,
  }) async {
    final $p = ReceivePort();
    final $c = jni.JObject.fromReference(
        ProtectedJniExtensions.newPortContinuation($p));
    _selectObjectContent(
            reference.pointer,
            _id_selectObjectContent as jni.JMethodIDPtr,
            selectObjectContentRequest.reference.pointer,
            function2.reference.pointer,
            $c.reference.pointer)
        .object(const jni.JObjectType());
    final $o = jni.JGlobalReference(jni.JObjectPtr.fromAddress(await $p.first));
    final $k = T.jClass.reference.pointer;
    if (!jni.Jni.env.IsInstanceOf($o.pointer, $k)) {
      throw 'Failed';
    }
    return T.fromReference($o);
  }

  static final _id_uploadPart = _class.instanceMethodId(
    r'uploadPart',
    r'(Laws/sdk/kotlin/services/s3/model/UploadPartRequest;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;',
  );

  static final _uploadPart = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.lang.Object uploadPart(aws.sdk.kotlin.services.s3.model.UploadPartRequest uploadPartRequest, kotlin.coroutines.Continuation continuation)
  /// The returned object must be released after use, by calling the [release] method.
  Future<jni.JObject> uploadPart(
    jni.JObject uploadPartRequest,
  ) async {
    final $p = ReceivePort();
    final $c = jni.JObject.fromReference(
        ProtectedJniExtensions.newPortContinuation($p));
    _uploadPart(reference.pointer, _id_uploadPart as jni.JMethodIDPtr,
            uploadPartRequest.reference.pointer, $c.reference.pointer)
        .object(const jni.JObjectType());
    final $o = jni.JGlobalReference(jni.JObjectPtr.fromAddress(await $p.first));
    final $k = const jni.JObjectType().jClass.reference.pointer;
    if (!jni.Jni.env.IsInstanceOf($o.pointer, $k)) {
      throw 'Failed';
    }
    return const jni.JObjectType().fromReference($o);
  }

  static final _id_uploadPartCopy = _class.instanceMethodId(
    r'uploadPartCopy',
    r'(Laws/sdk/kotlin/services/s3/model/UploadPartCopyRequest;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;',
  );

  static final _uploadPartCopy = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.lang.Object uploadPartCopy(aws.sdk.kotlin.services.s3.model.UploadPartCopyRequest uploadPartCopyRequest, kotlin.coroutines.Continuation continuation)
  /// The returned object must be released after use, by calling the [release] method.
  Future<jni.JObject> uploadPartCopy(
    jni.JObject uploadPartCopyRequest,
  ) async {
    final $p = ReceivePort();
    final $c = jni.JObject.fromReference(
        ProtectedJniExtensions.newPortContinuation($p));
    _uploadPartCopy(reference.pointer, _id_uploadPartCopy as jni.JMethodIDPtr,
            uploadPartCopyRequest.reference.pointer, $c.reference.pointer)
        .object(const jni.JObjectType());
    final $o = jni.JGlobalReference(jni.JObjectPtr.fromAddress(await $p.first));
    final $k = const jni.JObjectType().jClass.reference.pointer;
    if (!jni.Jni.env.IsInstanceOf($o.pointer, $k)) {
      throw 'Failed';
    }
    return const jni.JObjectType().fromReference($o);
  }

  static final _id_writeGetObjectResponse = _class.instanceMethodId(
    r'writeGetObjectResponse',
    r'(Laws/sdk/kotlin/services/s3/model/WriteGetObjectResponseRequest;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;',
  );

  static final _writeGetObjectResponse = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.lang.Object writeGetObjectResponse(aws.sdk.kotlin.services.s3.model.WriteGetObjectResponseRequest writeGetObjectResponseRequest, kotlin.coroutines.Continuation continuation)
  /// The returned object must be released after use, by calling the [release] method.
  Future<jni.JObject> writeGetObjectResponse(
    jni.JObject writeGetObjectResponseRequest,
  ) async {
    final $p = ReceivePort();
    final $c = jni.JObject.fromReference(
        ProtectedJniExtensions.newPortContinuation($p));
    _writeGetObjectResponse(
            reference.pointer,
            _id_writeGetObjectResponse as jni.JMethodIDPtr,
            writeGetObjectResponseRequest.reference.pointer,
            $c.reference.pointer)
        .object(const jni.JObjectType());
    final $o = jni.JGlobalReference(jni.JObjectPtr.fromAddress(await $p.first));
    final $k = const jni.JObjectType().jClass.reference.pointer;
    if (!jni.Jni.env.IsInstanceOf($o.pointer, $k)) {
      throw 'Failed';
    }
    return const jni.JObjectType().fromReference($o);
  }

  static final _id_builder = _class.staticMethodId(
    r'builder',
    r'()Laws/sdk/kotlin/services/s3/S3Client$Builder;',
  );

  static final _builder = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: static public aws.sdk.kotlin.services.s3.S3Client$Builder builder()
  /// The returned object must be released after use, by calling the [release] method.
  static S3Client_Builder builder() {
    return _builder(_class.reference.pointer, _id_builder as jni.JMethodIDPtr)
        .object(const $S3Client_BuilderType());
  }

  /// Maps a specific port to the implemented interface.
  static final Map<int, $S3ClientImpl> _$impls = {};
  ReceivePort? _$p;

  static jni.JObjectPtr _$invoke(
    int port,
    jni.JObjectPtr descriptor,
    jni.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      $MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final ffi.Pointer<
          ffi.NativeFunction<
              jni.JObjectPtr Function(
                  ffi.Uint64, jni.JObjectPtr, jni.JObjectPtr)>>
      _$invokePointer = ffi.Pointer.fromFunction(_$invoke);

  static ffi.Pointer<ffi.Void> _$invokeMethod(
    int $p,
    $MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
      if ($d == r'getConfig()Laws/sdk/kotlin/services/s3/S3Client$Config;') {
        final $r = _$impls[$p]!.getConfig();
        return ($r as jni.JObject)
            .castTo(const jni.JObjectType())
            .reference
            .toPointer();
      }
      if ($d ==
          r'abortMultipartUpload(Laws/sdk/kotlin/services/s3/model/AbortMultipartUploadRequest;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;') {
        final $r = _$impls[$p]!.abortMultipartUpload(
          $a[0].castTo(const jni.JObjectType(), releaseOriginal: true),
          $a[1].castTo(const jni.JObjectType(), releaseOriginal: true),
        );
        return ($r as jni.JObject)
            .castTo(const jni.JObjectType())
            .reference
            .toPointer();
      }
      if ($d ==
          r'completeMultipartUpload(Laws/sdk/kotlin/services/s3/model/CompleteMultipartUploadRequest;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;') {
        final $r = _$impls[$p]!.completeMultipartUpload(
          $a[0].castTo(const jni.JObjectType(), releaseOriginal: true),
          $a[1].castTo(const jni.JObjectType(), releaseOriginal: true),
        );
        return ($r as jni.JObject)
            .castTo(const jni.JObjectType())
            .reference
            .toPointer();
      }
      if ($d ==
          r'copyObject(Laws/sdk/kotlin/services/s3/model/CopyObjectRequest;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;') {
        final $r = _$impls[$p]!.copyObject(
          $a[0].castTo(const jni.JObjectType(), releaseOriginal: true),
          $a[1].castTo(const jni.JObjectType(), releaseOriginal: true),
        );
        return ($r as jni.JObject)
            .castTo(const jni.JObjectType())
            .reference
            .toPointer();
      }
      if ($d ==
          r'createBucket(Laws/sdk/kotlin/services/s3/model/CreateBucketRequest;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;') {
        final $r = _$impls[$p]!.createBucket(
          $a[0].castTo(const jni.JObjectType(), releaseOriginal: true),
          $a[1].castTo(const jni.JObjectType(), releaseOriginal: true),
        );
        return ($r as jni.JObject)
            .castTo(const jni.JObjectType())
            .reference
            .toPointer();
      }
      if ($d ==
          r'createMultipartUpload(Laws/sdk/kotlin/services/s3/model/CreateMultipartUploadRequest;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;') {
        final $r = _$impls[$p]!.createMultipartUpload(
          $a[0].castTo(const jni.JObjectType(), releaseOriginal: true),
          $a[1].castTo(const jni.JObjectType(), releaseOriginal: true),
        );
        return ($r as jni.JObject)
            .castTo(const jni.JObjectType())
            .reference
            .toPointer();
      }
      if ($d ==
          r'createSession(Laws/sdk/kotlin/services/s3/model/CreateSessionRequest;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;') {
        final $r = _$impls[$p]!.createSession(
          $a[0].castTo(const jni.JObjectType(), releaseOriginal: true),
          $a[1].castTo(const jni.JObjectType(), releaseOriginal: true),
        );
        return ($r as jni.JObject)
            .castTo(const jni.JObjectType())
            .reference
            .toPointer();
      }
      if ($d ==
          r'deleteBucket(Laws/sdk/kotlin/services/s3/model/DeleteBucketRequest;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;') {
        final $r = _$impls[$p]!.deleteBucket(
          $a[0].castTo(const jni.JObjectType(), releaseOriginal: true),
          $a[1].castTo(const jni.JObjectType(), releaseOriginal: true),
        );
        return ($r as jni.JObject)
            .castTo(const jni.JObjectType())
            .reference
            .toPointer();
      }
      if ($d ==
          r'deleteBucketAnalyticsConfiguration(Laws/sdk/kotlin/services/s3/model/DeleteBucketAnalyticsConfigurationRequest;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;') {
        final $r = _$impls[$p]!.deleteBucketAnalyticsConfiguration(
          $a[0].castTo(const jni.JObjectType(), releaseOriginal: true),
          $a[1].castTo(const jni.JObjectType(), releaseOriginal: true),
        );
        return ($r as jni.JObject)
            .castTo(const jni.JObjectType())
            .reference
            .toPointer();
      }
      if ($d ==
          r'deleteBucketCors(Laws/sdk/kotlin/services/s3/model/DeleteBucketCorsRequest;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;') {
        final $r = _$impls[$p]!.deleteBucketCors(
          $a[0].castTo(const jni.JObjectType(), releaseOriginal: true),
          $a[1].castTo(const jni.JObjectType(), releaseOriginal: true),
        );
        return ($r as jni.JObject)
            .castTo(const jni.JObjectType())
            .reference
            .toPointer();
      }
      if ($d ==
          r'deleteBucketEncryption(Laws/sdk/kotlin/services/s3/model/DeleteBucketEncryptionRequest;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;') {
        final $r = _$impls[$p]!.deleteBucketEncryption(
          $a[0].castTo(const jni.JObjectType(), releaseOriginal: true),
          $a[1].castTo(const jni.JObjectType(), releaseOriginal: true),
        );
        return ($r as jni.JObject)
            .castTo(const jni.JObjectType())
            .reference
            .toPointer();
      }
      if ($d ==
          r'deleteBucketIntelligentTieringConfiguration(Laws/sdk/kotlin/services/s3/model/DeleteBucketIntelligentTieringConfigurationRequest;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;') {
        final $r = _$impls[$p]!.deleteBucketIntelligentTieringConfiguration(
          $a[0].castTo(const jni.JObjectType(), releaseOriginal: true),
          $a[1].castTo(const jni.JObjectType(), releaseOriginal: true),
        );
        return ($r as jni.JObject)
            .castTo(const jni.JObjectType())
            .reference
            .toPointer();
      }
      if ($d ==
          r'deleteBucketInventoryConfiguration(Laws/sdk/kotlin/services/s3/model/DeleteBucketInventoryConfigurationRequest;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;') {
        final $r = _$impls[$p]!.deleteBucketInventoryConfiguration(
          $a[0].castTo(const jni.JObjectType(), releaseOriginal: true),
          $a[1].castTo(const jni.JObjectType(), releaseOriginal: true),
        );
        return ($r as jni.JObject)
            .castTo(const jni.JObjectType())
            .reference
            .toPointer();
      }
      if ($d ==
          r'deleteBucketLifecycle(Laws/sdk/kotlin/services/s3/model/DeleteBucketLifecycleRequest;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;') {
        final $r = _$impls[$p]!.deleteBucketLifecycle(
          $a[0].castTo(const jni.JObjectType(), releaseOriginal: true),
          $a[1].castTo(const jni.JObjectType(), releaseOriginal: true),
        );
        return ($r as jni.JObject)
            .castTo(const jni.JObjectType())
            .reference
            .toPointer();
      }
      if ($d ==
          r'deleteBucketMetricsConfiguration(Laws/sdk/kotlin/services/s3/model/DeleteBucketMetricsConfigurationRequest;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;') {
        final $r = _$impls[$p]!.deleteBucketMetricsConfiguration(
          $a[0].castTo(const jni.JObjectType(), releaseOriginal: true),
          $a[1].castTo(const jni.JObjectType(), releaseOriginal: true),
        );
        return ($r as jni.JObject)
            .castTo(const jni.JObjectType())
            .reference
            .toPointer();
      }
      if ($d ==
          r'deleteBucketOwnershipControls(Laws/sdk/kotlin/services/s3/model/DeleteBucketOwnershipControlsRequest;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;') {
        final $r = _$impls[$p]!.deleteBucketOwnershipControls(
          $a[0].castTo(const jni.JObjectType(), releaseOriginal: true),
          $a[1].castTo(const jni.JObjectType(), releaseOriginal: true),
        );
        return ($r as jni.JObject)
            .castTo(const jni.JObjectType())
            .reference
            .toPointer();
      }
      if ($d ==
          r'deleteBucketPolicy(Laws/sdk/kotlin/services/s3/model/DeleteBucketPolicyRequest;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;') {
        final $r = _$impls[$p]!.deleteBucketPolicy(
          $a[0].castTo(const jni.JObjectType(), releaseOriginal: true),
          $a[1].castTo(const jni.JObjectType(), releaseOriginal: true),
        );
        return ($r as jni.JObject)
            .castTo(const jni.JObjectType())
            .reference
            .toPointer();
      }
      if ($d ==
          r'deleteBucketReplication(Laws/sdk/kotlin/services/s3/model/DeleteBucketReplicationRequest;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;') {
        final $r = _$impls[$p]!.deleteBucketReplication(
          $a[0].castTo(const jni.JObjectType(), releaseOriginal: true),
          $a[1].castTo(const jni.JObjectType(), releaseOriginal: true),
        );
        return ($r as jni.JObject)
            .castTo(const jni.JObjectType())
            .reference
            .toPointer();
      }
      if ($d ==
          r'deleteBucketTagging(Laws/sdk/kotlin/services/s3/model/DeleteBucketTaggingRequest;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;') {
        final $r = _$impls[$p]!.deleteBucketTagging(
          $a[0].castTo(const jni.JObjectType(), releaseOriginal: true),
          $a[1].castTo(const jni.JObjectType(), releaseOriginal: true),
        );
        return ($r as jni.JObject)
            .castTo(const jni.JObjectType())
            .reference
            .toPointer();
      }
      if ($d ==
          r'deleteBucketWebsite(Laws/sdk/kotlin/services/s3/model/DeleteBucketWebsiteRequest;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;') {
        final $r = _$impls[$p]!.deleteBucketWebsite(
          $a[0].castTo(const jni.JObjectType(), releaseOriginal: true),
          $a[1].castTo(const jni.JObjectType(), releaseOriginal: true),
        );
        return ($r as jni.JObject)
            .castTo(const jni.JObjectType())
            .reference
            .toPointer();
      }
      if ($d ==
          r'deleteObject(Laws/sdk/kotlin/services/s3/model/DeleteObjectRequest;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;') {
        final $r = _$impls[$p]!.deleteObject(
          $a[0].castTo(const jni.JObjectType(), releaseOriginal: true),
          $a[1].castTo(const jni.JObjectType(), releaseOriginal: true),
        );
        return ($r as jni.JObject)
            .castTo(const jni.JObjectType())
            .reference
            .toPointer();
      }
      if ($d ==
          r'deleteObjectTagging(Laws/sdk/kotlin/services/s3/model/DeleteObjectTaggingRequest;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;') {
        final $r = _$impls[$p]!.deleteObjectTagging(
          $a[0].castTo(const jni.JObjectType(), releaseOriginal: true),
          $a[1].castTo(const jni.JObjectType(), releaseOriginal: true),
        );
        return ($r as jni.JObject)
            .castTo(const jni.JObjectType())
            .reference
            .toPointer();
      }
      if ($d ==
          r'deleteObjects(Laws/sdk/kotlin/services/s3/model/DeleteObjectsRequest;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;') {
        final $r = _$impls[$p]!.deleteObjects(
          $a[0].castTo(const jni.JObjectType(), releaseOriginal: true),
          $a[1].castTo(const jni.JObjectType(), releaseOriginal: true),
        );
        return ($r as jni.JObject)
            .castTo(const jni.JObjectType())
            .reference
            .toPointer();
      }
      if ($d ==
          r'deletePublicAccessBlock(Laws/sdk/kotlin/services/s3/model/DeletePublicAccessBlockRequest;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;') {
        final $r = _$impls[$p]!.deletePublicAccessBlock(
          $a[0].castTo(const jni.JObjectType(), releaseOriginal: true),
          $a[1].castTo(const jni.JObjectType(), releaseOriginal: true),
        );
        return ($r as jni.JObject)
            .castTo(const jni.JObjectType())
            .reference
            .toPointer();
      }
      if ($d ==
          r'getBucketAccelerateConfiguration(Laws/sdk/kotlin/services/s3/model/GetBucketAccelerateConfigurationRequest;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;') {
        final $r = _$impls[$p]!.getBucketAccelerateConfiguration(
          $a[0].castTo(const jni.JObjectType(), releaseOriginal: true),
          $a[1].castTo(const jni.JObjectType(), releaseOriginal: true),
        );
        return ($r as jni.JObject)
            .castTo(const jni.JObjectType())
            .reference
            .toPointer();
      }
      if ($d ==
          r'getBucketAcl(Laws/sdk/kotlin/services/s3/model/GetBucketAclRequest;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;') {
        final $r = _$impls[$p]!.getBucketAcl(
          $a[0].castTo(const jni.JObjectType(), releaseOriginal: true),
          $a[1].castTo(const jni.JObjectType(), releaseOriginal: true),
        );
        return ($r as jni.JObject)
            .castTo(const jni.JObjectType())
            .reference
            .toPointer();
      }
      if ($d ==
          r'getBucketAnalyticsConfiguration(Laws/sdk/kotlin/services/s3/model/GetBucketAnalyticsConfigurationRequest;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;') {
        final $r = _$impls[$p]!.getBucketAnalyticsConfiguration(
          $a[0].castTo(const jni.JObjectType(), releaseOriginal: true),
          $a[1].castTo(const jni.JObjectType(), releaseOriginal: true),
        );
        return ($r as jni.JObject)
            .castTo(const jni.JObjectType())
            .reference
            .toPointer();
      }
      if ($d ==
          r'getBucketCors(Laws/sdk/kotlin/services/s3/model/GetBucketCorsRequest;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;') {
        final $r = _$impls[$p]!.getBucketCors(
          $a[0].castTo(const jni.JObjectType(), releaseOriginal: true),
          $a[1].castTo(const jni.JObjectType(), releaseOriginal: true),
        );
        return ($r as jni.JObject)
            .castTo(const jni.JObjectType())
            .reference
            .toPointer();
      }
      if ($d ==
          r'getBucketEncryption(Laws/sdk/kotlin/services/s3/model/GetBucketEncryptionRequest;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;') {
        final $r = _$impls[$p]!.getBucketEncryption(
          $a[0].castTo(const jni.JObjectType(), releaseOriginal: true),
          $a[1].castTo(const jni.JObjectType(), releaseOriginal: true),
        );
        return ($r as jni.JObject)
            .castTo(const jni.JObjectType())
            .reference
            .toPointer();
      }
      if ($d ==
          r'getBucketIntelligentTieringConfiguration(Laws/sdk/kotlin/services/s3/model/GetBucketIntelligentTieringConfigurationRequest;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;') {
        final $r = _$impls[$p]!.getBucketIntelligentTieringConfiguration(
          $a[0].castTo(const jni.JObjectType(), releaseOriginal: true),
          $a[1].castTo(const jni.JObjectType(), releaseOriginal: true),
        );
        return ($r as jni.JObject)
            .castTo(const jni.JObjectType())
            .reference
            .toPointer();
      }
      if ($d ==
          r'getBucketInventoryConfiguration(Laws/sdk/kotlin/services/s3/model/GetBucketInventoryConfigurationRequest;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;') {
        final $r = _$impls[$p]!.getBucketInventoryConfiguration(
          $a[0].castTo(const jni.JObjectType(), releaseOriginal: true),
          $a[1].castTo(const jni.JObjectType(), releaseOriginal: true),
        );
        return ($r as jni.JObject)
            .castTo(const jni.JObjectType())
            .reference
            .toPointer();
      }
      if ($d ==
          r'getBucketLifecycleConfiguration(Laws/sdk/kotlin/services/s3/model/GetBucketLifecycleConfigurationRequest;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;') {
        final $r = _$impls[$p]!.getBucketLifecycleConfiguration(
          $a[0].castTo(const jni.JObjectType(), releaseOriginal: true),
          $a[1].castTo(const jni.JObjectType(), releaseOriginal: true),
        );
        return ($r as jni.JObject)
            .castTo(const jni.JObjectType())
            .reference
            .toPointer();
      }
      if ($d ==
          r'getBucketLocation(Laws/sdk/kotlin/services/s3/model/GetBucketLocationRequest;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;') {
        final $r = _$impls[$p]!.getBucketLocation(
          $a[0].castTo(const jni.JObjectType(), releaseOriginal: true),
          $a[1].castTo(const jni.JObjectType(), releaseOriginal: true),
        );
        return ($r as jni.JObject)
            .castTo(const jni.JObjectType())
            .reference
            .toPointer();
      }
      if ($d ==
          r'getBucketLogging(Laws/sdk/kotlin/services/s3/model/GetBucketLoggingRequest;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;') {
        final $r = _$impls[$p]!.getBucketLogging(
          $a[0].castTo(const jni.JObjectType(), releaseOriginal: true),
          $a[1].castTo(const jni.JObjectType(), releaseOriginal: true),
        );
        return ($r as jni.JObject)
            .castTo(const jni.JObjectType())
            .reference
            .toPointer();
      }
      if ($d ==
          r'getBucketMetricsConfiguration(Laws/sdk/kotlin/services/s3/model/GetBucketMetricsConfigurationRequest;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;') {
        final $r = _$impls[$p]!.getBucketMetricsConfiguration(
          $a[0].castTo(const jni.JObjectType(), releaseOriginal: true),
          $a[1].castTo(const jni.JObjectType(), releaseOriginal: true),
        );
        return ($r as jni.JObject)
            .castTo(const jni.JObjectType())
            .reference
            .toPointer();
      }
      if ($d ==
          r'getBucketNotificationConfiguration(Laws/sdk/kotlin/services/s3/model/GetBucketNotificationConfigurationRequest;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;') {
        final $r = _$impls[$p]!.getBucketNotificationConfiguration(
          $a[0].castTo(const jni.JObjectType(), releaseOriginal: true),
          $a[1].castTo(const jni.JObjectType(), releaseOriginal: true),
        );
        return ($r as jni.JObject)
            .castTo(const jni.JObjectType())
            .reference
            .toPointer();
      }
      if ($d ==
          r'getBucketOwnershipControls(Laws/sdk/kotlin/services/s3/model/GetBucketOwnershipControlsRequest;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;') {
        final $r = _$impls[$p]!.getBucketOwnershipControls(
          $a[0].castTo(const jni.JObjectType(), releaseOriginal: true),
          $a[1].castTo(const jni.JObjectType(), releaseOriginal: true),
        );
        return ($r as jni.JObject)
            .castTo(const jni.JObjectType())
            .reference
            .toPointer();
      }
      if ($d ==
          r'getBucketPolicy(Laws/sdk/kotlin/services/s3/model/GetBucketPolicyRequest;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;') {
        final $r = _$impls[$p]!.getBucketPolicy(
          $a[0].castTo(const jni.JObjectType(), releaseOriginal: true),
          $a[1].castTo(const jni.JObjectType(), releaseOriginal: true),
        );
        return ($r as jni.JObject)
            .castTo(const jni.JObjectType())
            .reference
            .toPointer();
      }
      if ($d ==
          r'getBucketPolicyStatus(Laws/sdk/kotlin/services/s3/model/GetBucketPolicyStatusRequest;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;') {
        final $r = _$impls[$p]!.getBucketPolicyStatus(
          $a[0].castTo(const jni.JObjectType(), releaseOriginal: true),
          $a[1].castTo(const jni.JObjectType(), releaseOriginal: true),
        );
        return ($r as jni.JObject)
            .castTo(const jni.JObjectType())
            .reference
            .toPointer();
      }
      if ($d ==
          r'getBucketReplication(Laws/sdk/kotlin/services/s3/model/GetBucketReplicationRequest;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;') {
        final $r = _$impls[$p]!.getBucketReplication(
          $a[0].castTo(const jni.JObjectType(), releaseOriginal: true),
          $a[1].castTo(const jni.JObjectType(), releaseOriginal: true),
        );
        return ($r as jni.JObject)
            .castTo(const jni.JObjectType())
            .reference
            .toPointer();
      }
      if ($d ==
          r'getBucketRequestPayment(Laws/sdk/kotlin/services/s3/model/GetBucketRequestPaymentRequest;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;') {
        final $r = _$impls[$p]!.getBucketRequestPayment(
          $a[0].castTo(const jni.JObjectType(), releaseOriginal: true),
          $a[1].castTo(const jni.JObjectType(), releaseOriginal: true),
        );
        return ($r as jni.JObject)
            .castTo(const jni.JObjectType())
            .reference
            .toPointer();
      }
      if ($d ==
          r'getBucketTagging(Laws/sdk/kotlin/services/s3/model/GetBucketTaggingRequest;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;') {
        final $r = _$impls[$p]!.getBucketTagging(
          $a[0].castTo(const jni.JObjectType(), releaseOriginal: true),
          $a[1].castTo(const jni.JObjectType(), releaseOriginal: true),
        );
        return ($r as jni.JObject)
            .castTo(const jni.JObjectType())
            .reference
            .toPointer();
      }
      if ($d ==
          r'getBucketVersioning(Laws/sdk/kotlin/services/s3/model/GetBucketVersioningRequest;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;') {
        final $r = _$impls[$p]!.getBucketVersioning(
          $a[0].castTo(const jni.JObjectType(), releaseOriginal: true),
          $a[1].castTo(const jni.JObjectType(), releaseOriginal: true),
        );
        return ($r as jni.JObject)
            .castTo(const jni.JObjectType())
            .reference
            .toPointer();
      }
      if ($d ==
          r'getBucketWebsite(Laws/sdk/kotlin/services/s3/model/GetBucketWebsiteRequest;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;') {
        final $r = _$impls[$p]!.getBucketWebsite(
          $a[0].castTo(const jni.JObjectType(), releaseOriginal: true),
          $a[1].castTo(const jni.JObjectType(), releaseOriginal: true),
        );
        return ($r as jni.JObject)
            .castTo(const jni.JObjectType())
            .reference
            .toPointer();
      }
      if ($d ==
          r'getObject(Laws/sdk/kotlin/services/s3/model/GetObjectRequest;Lkotlin/jvm/functions/Function2;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;') {
        final $r = _$impls[$p]!.getObject(
          $a[0].castTo(const jni.JObjectType(), releaseOriginal: true),
          $a[1].castTo(const jni.JObjectType(), releaseOriginal: true),
          $a[2].castTo(const jni.JObjectType(), releaseOriginal: true),
        );
        return ($r as jni.JObject)
            .castTo(const jni.JObjectType())
            .reference
            .toPointer();
      }
      if ($d ==
          r'getObjectAcl(Laws/sdk/kotlin/services/s3/model/GetObjectAclRequest;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;') {
        final $r = _$impls[$p]!.getObjectAcl(
          $a[0].castTo(const jni.JObjectType(), releaseOriginal: true),
          $a[1].castTo(const jni.JObjectType(), releaseOriginal: true),
        );
        return ($r as jni.JObject)
            .castTo(const jni.JObjectType())
            .reference
            .toPointer();
      }
      if ($d ==
          r'getObjectAttributes(Laws/sdk/kotlin/services/s3/model/GetObjectAttributesRequest;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;') {
        final $r = _$impls[$p]!.getObjectAttributes(
          $a[0].castTo(const jni.JObjectType(), releaseOriginal: true),
          $a[1].castTo(const jni.JObjectType(), releaseOriginal: true),
        );
        return ($r as jni.JObject)
            .castTo(const jni.JObjectType())
            .reference
            .toPointer();
      }
      if ($d ==
          r'getObjectLegalHold(Laws/sdk/kotlin/services/s3/model/GetObjectLegalHoldRequest;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;') {
        final $r = _$impls[$p]!.getObjectLegalHold(
          $a[0].castTo(const jni.JObjectType(), releaseOriginal: true),
          $a[1].castTo(const jni.JObjectType(), releaseOriginal: true),
        );
        return ($r as jni.JObject)
            .castTo(const jni.JObjectType())
            .reference
            .toPointer();
      }
      if ($d ==
          r'getObjectLockConfiguration(Laws/sdk/kotlin/services/s3/model/GetObjectLockConfigurationRequest;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;') {
        final $r = _$impls[$p]!.getObjectLockConfiguration(
          $a[0].castTo(const jni.JObjectType(), releaseOriginal: true),
          $a[1].castTo(const jni.JObjectType(), releaseOriginal: true),
        );
        return ($r as jni.JObject)
            .castTo(const jni.JObjectType())
            .reference
            .toPointer();
      }
      if ($d ==
          r'getObjectRetention(Laws/sdk/kotlin/services/s3/model/GetObjectRetentionRequest;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;') {
        final $r = _$impls[$p]!.getObjectRetention(
          $a[0].castTo(const jni.JObjectType(), releaseOriginal: true),
          $a[1].castTo(const jni.JObjectType(), releaseOriginal: true),
        );
        return ($r as jni.JObject)
            .castTo(const jni.JObjectType())
            .reference
            .toPointer();
      }
      if ($d ==
          r'getObjectTagging(Laws/sdk/kotlin/services/s3/model/GetObjectTaggingRequest;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;') {
        final $r = _$impls[$p]!.getObjectTagging(
          $a[0].castTo(const jni.JObjectType(), releaseOriginal: true),
          $a[1].castTo(const jni.JObjectType(), releaseOriginal: true),
        );
        return ($r as jni.JObject)
            .castTo(const jni.JObjectType())
            .reference
            .toPointer();
      }
      if ($d ==
          r'getObjectTorrent(Laws/sdk/kotlin/services/s3/model/GetObjectTorrentRequest;Lkotlin/jvm/functions/Function2;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;') {
        final $r = _$impls[$p]!.getObjectTorrent(
          $a[0].castTo(const jni.JObjectType(), releaseOriginal: true),
          $a[1].castTo(const jni.JObjectType(), releaseOriginal: true),
          $a[2].castTo(const jni.JObjectType(), releaseOriginal: true),
        );
        return ($r as jni.JObject)
            .castTo(const jni.JObjectType())
            .reference
            .toPointer();
      }
      if ($d ==
          r'getPublicAccessBlock(Laws/sdk/kotlin/services/s3/model/GetPublicAccessBlockRequest;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;') {
        final $r = _$impls[$p]!.getPublicAccessBlock(
          $a[0].castTo(const jni.JObjectType(), releaseOriginal: true),
          $a[1].castTo(const jni.JObjectType(), releaseOriginal: true),
        );
        return ($r as jni.JObject)
            .castTo(const jni.JObjectType())
            .reference
            .toPointer();
      }
      if ($d ==
          r'headBucket(Laws/sdk/kotlin/services/s3/model/HeadBucketRequest;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;') {
        final $r = _$impls[$p]!.headBucket(
          $a[0].castTo(const jni.JObjectType(), releaseOriginal: true),
          $a[1].castTo(const jni.JObjectType(), releaseOriginal: true),
        );
        return ($r as jni.JObject)
            .castTo(const jni.JObjectType())
            .reference
            .toPointer();
      }
      if ($d ==
          r'headObject(Laws/sdk/kotlin/services/s3/model/HeadObjectRequest;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;') {
        final $r = _$impls[$p]!.headObject(
          $a[0].castTo(const jni.JObjectType(), releaseOriginal: true),
          $a[1].castTo(const jni.JObjectType(), releaseOriginal: true),
        );
        return ($r as jni.JObject)
            .castTo(const jni.JObjectType())
            .reference
            .toPointer();
      }
      if ($d ==
          r'listBucketAnalyticsConfigurations(Laws/sdk/kotlin/services/s3/model/ListBucketAnalyticsConfigurationsRequest;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;') {
        final $r = _$impls[$p]!.listBucketAnalyticsConfigurations(
          $a[0].castTo(const jni.JObjectType(), releaseOriginal: true),
          $a[1].castTo(const jni.JObjectType(), releaseOriginal: true),
        );
        return ($r as jni.JObject)
            .castTo(const jni.JObjectType())
            .reference
            .toPointer();
      }
      if ($d ==
          r'listBucketIntelligentTieringConfigurations(Laws/sdk/kotlin/services/s3/model/ListBucketIntelligentTieringConfigurationsRequest;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;') {
        final $r = _$impls[$p]!.listBucketIntelligentTieringConfigurations(
          $a[0].castTo(const jni.JObjectType(), releaseOriginal: true),
          $a[1].castTo(const jni.JObjectType(), releaseOriginal: true),
        );
        return ($r as jni.JObject)
            .castTo(const jni.JObjectType())
            .reference
            .toPointer();
      }
      if ($d ==
          r'listBucketInventoryConfigurations(Laws/sdk/kotlin/services/s3/model/ListBucketInventoryConfigurationsRequest;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;') {
        final $r = _$impls[$p]!.listBucketInventoryConfigurations(
          $a[0].castTo(const jni.JObjectType(), releaseOriginal: true),
          $a[1].castTo(const jni.JObjectType(), releaseOriginal: true),
        );
        return ($r as jni.JObject)
            .castTo(const jni.JObjectType())
            .reference
            .toPointer();
      }
      if ($d ==
          r'listBucketMetricsConfigurations(Laws/sdk/kotlin/services/s3/model/ListBucketMetricsConfigurationsRequest;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;') {
        final $r = _$impls[$p]!.listBucketMetricsConfigurations(
          $a[0].castTo(const jni.JObjectType(), releaseOriginal: true),
          $a[1].castTo(const jni.JObjectType(), releaseOriginal: true),
        );
        return ($r as jni.JObject)
            .castTo(const jni.JObjectType())
            .reference
            .toPointer();
      }
      if ($d ==
          r'listBuckets(Laws/sdk/kotlin/services/s3/model/ListBucketsRequest;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;') {
        final $r = _$impls[$p]!.listBuckets(
          $a[0].castTo(const jni.JObjectType(), releaseOriginal: true),
          $a[1].castTo(const jni.JObjectType(), releaseOriginal: true),
        );
        return ($r as jni.JObject)
            .castTo(const jni.JObjectType())
            .reference
            .toPointer();
      }
      if ($d ==
          r'listDirectoryBuckets(Laws/sdk/kotlin/services/s3/model/ListDirectoryBucketsRequest;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;') {
        final $r = _$impls[$p]!.listDirectoryBuckets(
          $a[0].castTo(const jni.JObjectType(), releaseOriginal: true),
          $a[1].castTo(const jni.JObjectType(), releaseOriginal: true),
        );
        return ($r as jni.JObject)
            .castTo(const jni.JObjectType())
            .reference
            .toPointer();
      }
      if ($d ==
          r'listMultipartUploads(Laws/sdk/kotlin/services/s3/model/ListMultipartUploadsRequest;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;') {
        final $r = _$impls[$p]!.listMultipartUploads(
          $a[0].castTo(const jni.JObjectType(), releaseOriginal: true),
          $a[1].castTo(const jni.JObjectType(), releaseOriginal: true),
        );
        return ($r as jni.JObject)
            .castTo(const jni.JObjectType())
            .reference
            .toPointer();
      }
      if ($d ==
          r'listObjectVersions(Laws/sdk/kotlin/services/s3/model/ListObjectVersionsRequest;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;') {
        final $r = _$impls[$p]!.listObjectVersions(
          $a[0].castTo(const jni.JObjectType(), releaseOriginal: true),
          $a[1].castTo(const jni.JObjectType(), releaseOriginal: true),
        );
        return ($r as jni.JObject)
            .castTo(const jni.JObjectType())
            .reference
            .toPointer();
      }
      if ($d ==
          r'listObjects(Laws/sdk/kotlin/services/s3/model/ListObjectsRequest;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;') {
        final $r = _$impls[$p]!.listObjects(
          $a[0].castTo(const jni.JObjectType(), releaseOriginal: true),
          $a[1].castTo(const jni.JObjectType(), releaseOriginal: true),
        );
        return ($r as jni.JObject)
            .castTo(const jni.JObjectType())
            .reference
            .toPointer();
      }
      if ($d ==
          r'listObjectsV2(Laws/sdk/kotlin/services/s3/model/ListObjectsV2Request;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;') {
        final $r = _$impls[$p]!.listObjectsV2(
          $a[0].castTo(const jni.JObjectType(), releaseOriginal: true),
          $a[1].castTo(const jni.JObjectType(), releaseOriginal: true),
        );
        return ($r as jni.JObject)
            .castTo(const jni.JObjectType())
            .reference
            .toPointer();
      }
      if ($d ==
          r'listParts(Laws/sdk/kotlin/services/s3/model/ListPartsRequest;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;') {
        final $r = _$impls[$p]!.listParts(
          $a[0].castTo(const jni.JObjectType(), releaseOriginal: true),
          $a[1].castTo(const jni.JObjectType(), releaseOriginal: true),
        );
        return ($r as jni.JObject)
            .castTo(const jni.JObjectType())
            .reference
            .toPointer();
      }
      if ($d ==
          r'putBucketAccelerateConfiguration(Laws/sdk/kotlin/services/s3/model/PutBucketAccelerateConfigurationRequest;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;') {
        final $r = _$impls[$p]!.putBucketAccelerateConfiguration(
          $a[0].castTo(const jni.JObjectType(), releaseOriginal: true),
          $a[1].castTo(const jni.JObjectType(), releaseOriginal: true),
        );
        return ($r as jni.JObject)
            .castTo(const jni.JObjectType())
            .reference
            .toPointer();
      }
      if ($d ==
          r'putBucketAcl(Laws/sdk/kotlin/services/s3/model/PutBucketAclRequest;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;') {
        final $r = _$impls[$p]!.putBucketAcl(
          $a[0].castTo(const jni.JObjectType(), releaseOriginal: true),
          $a[1].castTo(const jni.JObjectType(), releaseOriginal: true),
        );
        return ($r as jni.JObject)
            .castTo(const jni.JObjectType())
            .reference
            .toPointer();
      }
      if ($d ==
          r'putBucketAnalyticsConfiguration(Laws/sdk/kotlin/services/s3/model/PutBucketAnalyticsConfigurationRequest;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;') {
        final $r = _$impls[$p]!.putBucketAnalyticsConfiguration(
          $a[0].castTo(const jni.JObjectType(), releaseOriginal: true),
          $a[1].castTo(const jni.JObjectType(), releaseOriginal: true),
        );
        return ($r as jni.JObject)
            .castTo(const jni.JObjectType())
            .reference
            .toPointer();
      }
      if ($d ==
          r'putBucketCors(Laws/sdk/kotlin/services/s3/model/PutBucketCorsRequest;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;') {
        final $r = _$impls[$p]!.putBucketCors(
          $a[0].castTo(const jni.JObjectType(), releaseOriginal: true),
          $a[1].castTo(const jni.JObjectType(), releaseOriginal: true),
        );
        return ($r as jni.JObject)
            .castTo(const jni.JObjectType())
            .reference
            .toPointer();
      }
      if ($d ==
          r'putBucketEncryption(Laws/sdk/kotlin/services/s3/model/PutBucketEncryptionRequest;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;') {
        final $r = _$impls[$p]!.putBucketEncryption(
          $a[0].castTo(const jni.JObjectType(), releaseOriginal: true),
          $a[1].castTo(const jni.JObjectType(), releaseOriginal: true),
        );
        return ($r as jni.JObject)
            .castTo(const jni.JObjectType())
            .reference
            .toPointer();
      }
      if ($d ==
          r'putBucketIntelligentTieringConfiguration(Laws/sdk/kotlin/services/s3/model/PutBucketIntelligentTieringConfigurationRequest;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;') {
        final $r = _$impls[$p]!.putBucketIntelligentTieringConfiguration(
          $a[0].castTo(const jni.JObjectType(), releaseOriginal: true),
          $a[1].castTo(const jni.JObjectType(), releaseOriginal: true),
        );
        return ($r as jni.JObject)
            .castTo(const jni.JObjectType())
            .reference
            .toPointer();
      }
      if ($d ==
          r'putBucketInventoryConfiguration(Laws/sdk/kotlin/services/s3/model/PutBucketInventoryConfigurationRequest;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;') {
        final $r = _$impls[$p]!.putBucketInventoryConfiguration(
          $a[0].castTo(const jni.JObjectType(), releaseOriginal: true),
          $a[1].castTo(const jni.JObjectType(), releaseOriginal: true),
        );
        return ($r as jni.JObject)
            .castTo(const jni.JObjectType())
            .reference
            .toPointer();
      }
      if ($d ==
          r'putBucketLifecycleConfiguration(Laws/sdk/kotlin/services/s3/model/PutBucketLifecycleConfigurationRequest;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;') {
        final $r = _$impls[$p]!.putBucketLifecycleConfiguration(
          $a[0].castTo(const jni.JObjectType(), releaseOriginal: true),
          $a[1].castTo(const jni.JObjectType(), releaseOriginal: true),
        );
        return ($r as jni.JObject)
            .castTo(const jni.JObjectType())
            .reference
            .toPointer();
      }
      if ($d ==
          r'putBucketLogging(Laws/sdk/kotlin/services/s3/model/PutBucketLoggingRequest;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;') {
        final $r = _$impls[$p]!.putBucketLogging(
          $a[0].castTo(const jni.JObjectType(), releaseOriginal: true),
          $a[1].castTo(const jni.JObjectType(), releaseOriginal: true),
        );
        return ($r as jni.JObject)
            .castTo(const jni.JObjectType())
            .reference
            .toPointer();
      }
      if ($d ==
          r'putBucketMetricsConfiguration(Laws/sdk/kotlin/services/s3/model/PutBucketMetricsConfigurationRequest;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;') {
        final $r = _$impls[$p]!.putBucketMetricsConfiguration(
          $a[0].castTo(const jni.JObjectType(), releaseOriginal: true),
          $a[1].castTo(const jni.JObjectType(), releaseOriginal: true),
        );
        return ($r as jni.JObject)
            .castTo(const jni.JObjectType())
            .reference
            .toPointer();
      }
      if ($d ==
          r'putBucketNotificationConfiguration(Laws/sdk/kotlin/services/s3/model/PutBucketNotificationConfigurationRequest;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;') {
        final $r = _$impls[$p]!.putBucketNotificationConfiguration(
          $a[0].castTo(const jni.JObjectType(), releaseOriginal: true),
          $a[1].castTo(const jni.JObjectType(), releaseOriginal: true),
        );
        return ($r as jni.JObject)
            .castTo(const jni.JObjectType())
            .reference
            .toPointer();
      }
      if ($d ==
          r'putBucketOwnershipControls(Laws/sdk/kotlin/services/s3/model/PutBucketOwnershipControlsRequest;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;') {
        final $r = _$impls[$p]!.putBucketOwnershipControls(
          $a[0].castTo(const jni.JObjectType(), releaseOriginal: true),
          $a[1].castTo(const jni.JObjectType(), releaseOriginal: true),
        );
        return ($r as jni.JObject)
            .castTo(const jni.JObjectType())
            .reference
            .toPointer();
      }
      if ($d ==
          r'putBucketPolicy(Laws/sdk/kotlin/services/s3/model/PutBucketPolicyRequest;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;') {
        final $r = _$impls[$p]!.putBucketPolicy(
          $a[0].castTo(const jni.JObjectType(), releaseOriginal: true),
          $a[1].castTo(const jni.JObjectType(), releaseOriginal: true),
        );
        return ($r as jni.JObject)
            .castTo(const jni.JObjectType())
            .reference
            .toPointer();
      }
      if ($d ==
          r'putBucketReplication(Laws/sdk/kotlin/services/s3/model/PutBucketReplicationRequest;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;') {
        final $r = _$impls[$p]!.putBucketReplication(
          $a[0].castTo(const jni.JObjectType(), releaseOriginal: true),
          $a[1].castTo(const jni.JObjectType(), releaseOriginal: true),
        );
        return ($r as jni.JObject)
            .castTo(const jni.JObjectType())
            .reference
            .toPointer();
      }
      if ($d ==
          r'putBucketRequestPayment(Laws/sdk/kotlin/services/s3/model/PutBucketRequestPaymentRequest;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;') {
        final $r = _$impls[$p]!.putBucketRequestPayment(
          $a[0].castTo(const jni.JObjectType(), releaseOriginal: true),
          $a[1].castTo(const jni.JObjectType(), releaseOriginal: true),
        );
        return ($r as jni.JObject)
            .castTo(const jni.JObjectType())
            .reference
            .toPointer();
      }
      if ($d ==
          r'putBucketTagging(Laws/sdk/kotlin/services/s3/model/PutBucketTaggingRequest;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;') {
        final $r = _$impls[$p]!.putBucketTagging(
          $a[0].castTo(const jni.JObjectType(), releaseOriginal: true),
          $a[1].castTo(const jni.JObjectType(), releaseOriginal: true),
        );
        return ($r as jni.JObject)
            .castTo(const jni.JObjectType())
            .reference
            .toPointer();
      }
      if ($d ==
          r'putBucketVersioning(Laws/sdk/kotlin/services/s3/model/PutBucketVersioningRequest;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;') {
        final $r = _$impls[$p]!.putBucketVersioning(
          $a[0].castTo(const jni.JObjectType(), releaseOriginal: true),
          $a[1].castTo(const jni.JObjectType(), releaseOriginal: true),
        );
        return ($r as jni.JObject)
            .castTo(const jni.JObjectType())
            .reference
            .toPointer();
      }
      if ($d ==
          r'putBucketWebsite(Laws/sdk/kotlin/services/s3/model/PutBucketWebsiteRequest;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;') {
        final $r = _$impls[$p]!.putBucketWebsite(
          $a[0].castTo(const jni.JObjectType(), releaseOriginal: true),
          $a[1].castTo(const jni.JObjectType(), releaseOriginal: true),
        );
        return ($r as jni.JObject)
            .castTo(const jni.JObjectType())
            .reference
            .toPointer();
      }
      if ($d ==
          r'putObject(Laws/sdk/kotlin/services/s3/model/PutObjectRequest;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;') {
        final $r = _$impls[$p]!.putObject(
          $a[0].castTo(const putobjectrequest_.$PutObjectRequestType(),
              releaseOriginal: true),
          $a[1].castTo(const jni.JObjectType(), releaseOriginal: true),
        );
        return ($r as jni.JObject)
            .castTo(const jni.JObjectType())
            .reference
            .toPointer();
      }
      if ($d ==
          r'putObjectAcl(Laws/sdk/kotlin/services/s3/model/PutObjectAclRequest;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;') {
        final $r = _$impls[$p]!.putObjectAcl(
          $a[0].castTo(const jni.JObjectType(), releaseOriginal: true),
          $a[1].castTo(const jni.JObjectType(), releaseOriginal: true),
        );
        return ($r as jni.JObject)
            .castTo(const jni.JObjectType())
            .reference
            .toPointer();
      }
      if ($d ==
          r'putObjectLegalHold(Laws/sdk/kotlin/services/s3/model/PutObjectLegalHoldRequest;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;') {
        final $r = _$impls[$p]!.putObjectLegalHold(
          $a[0].castTo(const jni.JObjectType(), releaseOriginal: true),
          $a[1].castTo(const jni.JObjectType(), releaseOriginal: true),
        );
        return ($r as jni.JObject)
            .castTo(const jni.JObjectType())
            .reference
            .toPointer();
      }
      if ($d ==
          r'putObjectLockConfiguration(Laws/sdk/kotlin/services/s3/model/PutObjectLockConfigurationRequest;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;') {
        final $r = _$impls[$p]!.putObjectLockConfiguration(
          $a[0].castTo(const jni.JObjectType(), releaseOriginal: true),
          $a[1].castTo(const jni.JObjectType(), releaseOriginal: true),
        );
        return ($r as jni.JObject)
            .castTo(const jni.JObjectType())
            .reference
            .toPointer();
      }
      if ($d ==
          r'putObjectRetention(Laws/sdk/kotlin/services/s3/model/PutObjectRetentionRequest;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;') {
        final $r = _$impls[$p]!.putObjectRetention(
          $a[0].castTo(const jni.JObjectType(), releaseOriginal: true),
          $a[1].castTo(const jni.JObjectType(), releaseOriginal: true),
        );
        return ($r as jni.JObject)
            .castTo(const jni.JObjectType())
            .reference
            .toPointer();
      }
      if ($d ==
          r'putObjectTagging(Laws/sdk/kotlin/services/s3/model/PutObjectTaggingRequest;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;') {
        final $r = _$impls[$p]!.putObjectTagging(
          $a[0].castTo(const jni.JObjectType(), releaseOriginal: true),
          $a[1].castTo(const jni.JObjectType(), releaseOriginal: true),
        );
        return ($r as jni.JObject)
            .castTo(const jni.JObjectType())
            .reference
            .toPointer();
      }
      if ($d ==
          r'putPublicAccessBlock(Laws/sdk/kotlin/services/s3/model/PutPublicAccessBlockRequest;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;') {
        final $r = _$impls[$p]!.putPublicAccessBlock(
          $a[0].castTo(const jni.JObjectType(), releaseOriginal: true),
          $a[1].castTo(const jni.JObjectType(), releaseOriginal: true),
        );
        return ($r as jni.JObject)
            .castTo(const jni.JObjectType())
            .reference
            .toPointer();
      }
      if ($d ==
          r'restoreObject(Laws/sdk/kotlin/services/s3/model/RestoreObjectRequest;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;') {
        final $r = _$impls[$p]!.restoreObject(
          $a[0].castTo(const jni.JObjectType(), releaseOriginal: true),
          $a[1].castTo(const jni.JObjectType(), releaseOriginal: true),
        );
        return ($r as jni.JObject)
            .castTo(const jni.JObjectType())
            .reference
            .toPointer();
      }
      if ($d ==
          r'selectObjectContent(Laws/sdk/kotlin/services/s3/model/SelectObjectContentRequest;Lkotlin/jvm/functions/Function2;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;') {
        final $r = _$impls[$p]!.selectObjectContent(
          $a[0].castTo(const jni.JObjectType(), releaseOriginal: true),
          $a[1].castTo(const jni.JObjectType(), releaseOriginal: true),
          $a[2].castTo(const jni.JObjectType(), releaseOriginal: true),
        );
        return ($r as jni.JObject)
            .castTo(const jni.JObjectType())
            .reference
            .toPointer();
      }
      if ($d ==
          r'uploadPart(Laws/sdk/kotlin/services/s3/model/UploadPartRequest;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;') {
        final $r = _$impls[$p]!.uploadPart(
          $a[0].castTo(const jni.JObjectType(), releaseOriginal: true),
          $a[1].castTo(const jni.JObjectType(), releaseOriginal: true),
        );
        return ($r as jni.JObject)
            .castTo(const jni.JObjectType())
            .reference
            .toPointer();
      }
      if ($d ==
          r'uploadPartCopy(Laws/sdk/kotlin/services/s3/model/UploadPartCopyRequest;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;') {
        final $r = _$impls[$p]!.uploadPartCopy(
          $a[0].castTo(const jni.JObjectType(), releaseOriginal: true),
          $a[1].castTo(const jni.JObjectType(), releaseOriginal: true),
        );
        return ($r as jni.JObject)
            .castTo(const jni.JObjectType())
            .reference
            .toPointer();
      }
      if ($d ==
          r'writeGetObjectResponse(Laws/sdk/kotlin/services/s3/model/WriteGetObjectResponseRequest;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;') {
        final $r = _$impls[$p]!.writeGetObjectResponse(
          $a[0].castTo(const jni.JObjectType(), releaseOriginal: true),
          $a[1].castTo(const jni.JObjectType(), releaseOriginal: true),
        );
        return ($r as jni.JObject)
            .castTo(const jni.JObjectType())
            .reference
            .toPointer();
      }
      if ($d == r'builder()Laws/sdk/kotlin/services/s3/S3Client$Builder;') {
        final $r = _$impls[$p]!.builder();
        return ($r as jni.JObject)
            .castTo(const jni.JObjectType())
            .reference
            .toPointer();
      }
    } catch (e) {
      return ProtectedJniExtensions.newDartException(e);
    }
    return jni.nullptr;
  }

  factory S3Client.implement(
    $S3ClientImpl $impl,
  ) {
    final $p = ReceivePort();
    final $x = S3Client.fromReference(
      ProtectedJniExtensions.newPortProxy(
        r'aws.sdk.kotlin.services.s3.S3Client',
        $p,
        _$invokePointer,
      ),
    ).._$p = $p;
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
    $p.listen(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = $MethodInvocation.fromMessage($m as List<dynamic>);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      ProtectedJniExtensions.returnResult($i.result, $r);
    });
    return $x;
  }
}

abstract interface class $S3ClientImpl {
  factory $S3ClientImpl({
    required S3Client_Config Function() getConfig,
    required jni.JObject Function(
            jni.JObject abortMultipartUploadRequest, jni.JObject $c)
        abortMultipartUpload,
    required jni.JObject Function(
            jni.JObject completeMultipartUploadRequest, jni.JObject $c)
        completeMultipartUpload,
    required jni.JObject Function(jni.JObject copyObjectRequest, jni.JObject $c)
        copyObject,
    required jni.JObject Function(
            jni.JObject createBucketRequest, jni.JObject $c)
        createBucket,
    required jni.JObject Function(
            jni.JObject createMultipartUploadRequest, jni.JObject $c)
        createMultipartUpload,
    required jni.JObject Function(
            jni.JObject createSessionRequest, jni.JObject $c)
        createSession,
    required jni.JObject Function(
            jni.JObject deleteBucketRequest, jni.JObject $c)
        deleteBucket,
    required jni.JObject Function(
            jni.JObject deleteBucketAnalyticsConfigurationRequest,
            jni.JObject $c)
        deleteBucketAnalyticsConfiguration,
    required jni.JObject Function(
            jni.JObject deleteBucketCorsRequest, jni.JObject $c)
        deleteBucketCors,
    required jni.JObject Function(
            jni.JObject deleteBucketEncryptionRequest, jni.JObject $c)
        deleteBucketEncryption,
    required jni.JObject Function(
            jni.JObject deleteBucketIntelligentTieringConfigurationRequest,
            jni.JObject $c)
        deleteBucketIntelligentTieringConfiguration,
    required jni.JObject Function(
            jni.JObject deleteBucketInventoryConfigurationRequest,
            jni.JObject $c)
        deleteBucketInventoryConfiguration,
    required jni.JObject Function(
            jni.JObject deleteBucketLifecycleRequest, jni.JObject $c)
        deleteBucketLifecycle,
    required jni.JObject Function(
            jni.JObject deleteBucketMetricsConfigurationRequest, jni.JObject $c)
        deleteBucketMetricsConfiguration,
    required jni.JObject Function(
            jni.JObject deleteBucketOwnershipControlsRequest, jni.JObject $c)
        deleteBucketOwnershipControls,
    required jni.JObject Function(
            jni.JObject deleteBucketPolicyRequest, jni.JObject $c)
        deleteBucketPolicy,
    required jni.JObject Function(
            jni.JObject deleteBucketReplicationRequest, jni.JObject $c)
        deleteBucketReplication,
    required jni.JObject Function(
            jni.JObject deleteBucketTaggingRequest, jni.JObject $c)
        deleteBucketTagging,
    required jni.JObject Function(
            jni.JObject deleteBucketWebsiteRequest, jni.JObject $c)
        deleteBucketWebsite,
    required jni.JObject Function(
            jni.JObject deleteObjectRequest, jni.JObject $c)
        deleteObject,
    required jni.JObject Function(
            jni.JObject deleteObjectTaggingRequest, jni.JObject $c)
        deleteObjectTagging,
    required jni.JObject Function(
            jni.JObject deleteObjectsRequest, jni.JObject $c)
        deleteObjects,
    required jni.JObject Function(
            jni.JObject deletePublicAccessBlockRequest, jni.JObject $c)
        deletePublicAccessBlock,
    required jni.JObject Function(
            jni.JObject getBucketAccelerateConfigurationRequest, jni.JObject $c)
        getBucketAccelerateConfiguration,
    required jni.JObject Function(
            jni.JObject getBucketAclRequest, jni.JObject $c)
        getBucketAcl,
    required jni.JObject Function(
            jni.JObject getBucketAnalyticsConfigurationRequest, jni.JObject $c)
        getBucketAnalyticsConfiguration,
    required jni.JObject Function(
            jni.JObject getBucketCorsRequest, jni.JObject $c)
        getBucketCors,
    required jni.JObject Function(
            jni.JObject getBucketEncryptionRequest, jni.JObject $c)
        getBucketEncryption,
    required jni.JObject Function(
            jni.JObject getBucketIntelligentTieringConfigurationRequest,
            jni.JObject $c)
        getBucketIntelligentTieringConfiguration,
    required jni.JObject Function(
            jni.JObject getBucketInventoryConfigurationRequest, jni.JObject $c)
        getBucketInventoryConfiguration,
    required jni.JObject Function(
            jni.JObject getBucketLifecycleConfigurationRequest, jni.JObject $c)
        getBucketLifecycleConfiguration,
    required jni.JObject Function(
            jni.JObject getBucketLocationRequest, jni.JObject $c)
        getBucketLocation,
    required jni.JObject Function(
            jni.JObject getBucketLoggingRequest, jni.JObject $c)
        getBucketLogging,
    required jni.JObject Function(
            jni.JObject getBucketMetricsConfigurationRequest, jni.JObject $c)
        getBucketMetricsConfiguration,
    required jni.JObject Function(
            jni.JObject getBucketNotificationConfigurationRequest,
            jni.JObject $c)
        getBucketNotificationConfiguration,
    required jni.JObject Function(
            jni.JObject getBucketOwnershipControlsRequest, jni.JObject $c)
        getBucketOwnershipControls,
    required jni.JObject Function(
            jni.JObject getBucketPolicyRequest, jni.JObject $c)
        getBucketPolicy,
    required jni.JObject Function(
            jni.JObject getBucketPolicyStatusRequest, jni.JObject $c)
        getBucketPolicyStatus,
    required jni.JObject Function(
            jni.JObject getBucketReplicationRequest, jni.JObject $c)
        getBucketReplication,
    required jni.JObject Function(
            jni.JObject getBucketRequestPaymentRequest, jni.JObject $c)
        getBucketRequestPayment,
    required jni.JObject Function(
            jni.JObject getBucketTaggingRequest, jni.JObject $c)
        getBucketTagging,
    required jni.JObject Function(
            jni.JObject getBucketVersioningRequest, jni.JObject $c)
        getBucketVersioning,
    required jni.JObject Function(
            jni.JObject getBucketWebsiteRequest, jni.JObject $c)
        getBucketWebsite,
    required jni.JObject Function(
            jni.JObject getObjectRequest, jni.JObject function2, jni.JObject $c)
        getObject,
    required jni.JObject Function(
            jni.JObject getObjectAclRequest, jni.JObject $c)
        getObjectAcl,
    required jni.JObject Function(
            jni.JObject getObjectAttributesRequest, jni.JObject $c)
        getObjectAttributes,
    required jni.JObject Function(
            jni.JObject getObjectLegalHoldRequest, jni.JObject $c)
        getObjectLegalHold,
    required jni.JObject Function(
            jni.JObject getObjectLockConfigurationRequest, jni.JObject $c)
        getObjectLockConfiguration,
    required jni.JObject Function(
            jni.JObject getObjectRetentionRequest, jni.JObject $c)
        getObjectRetention,
    required jni.JObject Function(
            jni.JObject getObjectTaggingRequest, jni.JObject $c)
        getObjectTagging,
    required jni.JObject Function(jni.JObject getObjectTorrentRequest,
            jni.JObject function2, jni.JObject $c)
        getObjectTorrent,
    required jni.JObject Function(
            jni.JObject getPublicAccessBlockRequest, jni.JObject $c)
        getPublicAccessBlock,
    required jni.JObject Function(jni.JObject headBucketRequest, jni.JObject $c)
        headBucket,
    required jni.JObject Function(jni.JObject headObjectRequest, jni.JObject $c)
        headObject,
    required jni.JObject Function(
            jni.JObject listBucketAnalyticsConfigurationsRequest,
            jni.JObject $c)
        listBucketAnalyticsConfigurations,
    required jni.JObject Function(
            jni.JObject listBucketIntelligentTieringConfigurationsRequest,
            jni.JObject $c)
        listBucketIntelligentTieringConfigurations,
    required jni.JObject Function(
            jni.JObject listBucketInventoryConfigurationsRequest,
            jni.JObject $c)
        listBucketInventoryConfigurations,
    required jni.JObject Function(
            jni.JObject listBucketMetricsConfigurationsRequest, jni.JObject $c)
        listBucketMetricsConfigurations,
    required jni.JObject Function(
            jni.JObject listBucketsRequest, jni.JObject $c)
        listBuckets,
    required jni.JObject Function(
            jni.JObject listDirectoryBucketsRequest, jni.JObject $c)
        listDirectoryBuckets,
    required jni.JObject Function(
            jni.JObject listMultipartUploadsRequest, jni.JObject $c)
        listMultipartUploads,
    required jni.JObject Function(
            jni.JObject listObjectVersionsRequest, jni.JObject $c)
        listObjectVersions,
    required jni.JObject Function(
            jni.JObject listObjectsRequest, jni.JObject $c)
        listObjects,
    required jni.JObject Function(
            jni.JObject listObjectsV2Request, jni.JObject $c)
        listObjectsV2,
    required jni.JObject Function(jni.JObject listPartsRequest, jni.JObject $c)
        listParts,
    required jni.JObject Function(
            jni.JObject putBucketAccelerateConfigurationRequest, jni.JObject $c)
        putBucketAccelerateConfiguration,
    required jni.JObject Function(
            jni.JObject putBucketAclRequest, jni.JObject $c)
        putBucketAcl,
    required jni.JObject Function(
            jni.JObject putBucketAnalyticsConfigurationRequest, jni.JObject $c)
        putBucketAnalyticsConfiguration,
    required jni.JObject Function(
            jni.JObject putBucketCorsRequest, jni.JObject $c)
        putBucketCors,
    required jni.JObject Function(
            jni.JObject putBucketEncryptionRequest, jni.JObject $c)
        putBucketEncryption,
    required jni.JObject Function(
            jni.JObject putBucketIntelligentTieringConfigurationRequest,
            jni.JObject $c)
        putBucketIntelligentTieringConfiguration,
    required jni.JObject Function(
            jni.JObject putBucketInventoryConfigurationRequest, jni.JObject $c)
        putBucketInventoryConfiguration,
    required jni.JObject Function(
            jni.JObject putBucketLifecycleConfigurationRequest, jni.JObject $c)
        putBucketLifecycleConfiguration,
    required jni.JObject Function(
            jni.JObject putBucketLoggingRequest, jni.JObject $c)
        putBucketLogging,
    required jni.JObject Function(
            jni.JObject putBucketMetricsConfigurationRequest, jni.JObject $c)
        putBucketMetricsConfiguration,
    required jni.JObject Function(
            jni.JObject putBucketNotificationConfigurationRequest,
            jni.JObject $c)
        putBucketNotificationConfiguration,
    required jni.JObject Function(
            jni.JObject putBucketOwnershipControlsRequest, jni.JObject $c)
        putBucketOwnershipControls,
    required jni.JObject Function(
            jni.JObject putBucketPolicyRequest, jni.JObject $c)
        putBucketPolicy,
    required jni.JObject Function(
            jni.JObject putBucketReplicationRequest, jni.JObject $c)
        putBucketReplication,
    required jni.JObject Function(
            jni.JObject putBucketRequestPaymentRequest, jni.JObject $c)
        putBucketRequestPayment,
    required jni.JObject Function(
            jni.JObject putBucketTaggingRequest, jni.JObject $c)
        putBucketTagging,
    required jni.JObject Function(
            jni.JObject putBucketVersioningRequest, jni.JObject $c)
        putBucketVersioning,
    required jni.JObject Function(
            jni.JObject putBucketWebsiteRequest, jni.JObject $c)
        putBucketWebsite,
    required jni.JObject Function(
            putobjectrequest_.PutObjectRequest putObjectRequest, jni.JObject $c)
        putObject,
    required jni.JObject Function(
            jni.JObject putObjectAclRequest, jni.JObject $c)
        putObjectAcl,
    required jni.JObject Function(
            jni.JObject putObjectLegalHoldRequest, jni.JObject $c)
        putObjectLegalHold,
    required jni.JObject Function(
            jni.JObject putObjectLockConfigurationRequest, jni.JObject $c)
        putObjectLockConfiguration,
    required jni.JObject Function(
            jni.JObject putObjectRetentionRequest, jni.JObject $c)
        putObjectRetention,
    required jni.JObject Function(
            jni.JObject putObjectTaggingRequest, jni.JObject $c)
        putObjectTagging,
    required jni.JObject Function(
            jni.JObject putPublicAccessBlockRequest, jni.JObject $c)
        putPublicAccessBlock,
    required jni.JObject Function(
            jni.JObject restoreObjectRequest, jni.JObject $c)
        restoreObject,
    required jni.JObject Function(jni.JObject selectObjectContentRequest,
            jni.JObject function2, jni.JObject $c)
        selectObjectContent,
    required jni.JObject Function(jni.JObject uploadPartRequest, jni.JObject $c)
        uploadPart,
    required jni.JObject Function(
            jni.JObject uploadPartCopyRequest, jni.JObject $c)
        uploadPartCopy,
    required jni.JObject Function(
            jni.JObject writeGetObjectResponseRequest, jni.JObject $c)
        writeGetObjectResponse,
    required S3Client_Builder Function() builder,
  }) = _$S3ClientImpl;

  S3Client_Config getConfig();
  jni.JObject abortMultipartUpload(
      jni.JObject abortMultipartUploadRequest, jni.JObject $c);
  jni.JObject completeMultipartUpload(
      jni.JObject completeMultipartUploadRequest, jni.JObject $c);
  jni.JObject copyObject(jni.JObject copyObjectRequest, jni.JObject $c);
  jni.JObject createBucket(jni.JObject createBucketRequest, jni.JObject $c);
  jni.JObject createMultipartUpload(
      jni.JObject createMultipartUploadRequest, jni.JObject $c);
  jni.JObject createSession(jni.JObject createSessionRequest, jni.JObject $c);
  jni.JObject deleteBucket(jni.JObject deleteBucketRequest, jni.JObject $c);
  jni.JObject deleteBucketAnalyticsConfiguration(
      jni.JObject deleteBucketAnalyticsConfigurationRequest, jni.JObject $c);
  jni.JObject deleteBucketCors(
      jni.JObject deleteBucketCorsRequest, jni.JObject $c);
  jni.JObject deleteBucketEncryption(
      jni.JObject deleteBucketEncryptionRequest, jni.JObject $c);
  jni.JObject deleteBucketIntelligentTieringConfiguration(
      jni.JObject deleteBucketIntelligentTieringConfigurationRequest,
      jni.JObject $c);
  jni.JObject deleteBucketInventoryConfiguration(
      jni.JObject deleteBucketInventoryConfigurationRequest, jni.JObject $c);
  jni.JObject deleteBucketLifecycle(
      jni.JObject deleteBucketLifecycleRequest, jni.JObject $c);
  jni.JObject deleteBucketMetricsConfiguration(
      jni.JObject deleteBucketMetricsConfigurationRequest, jni.JObject $c);
  jni.JObject deleteBucketOwnershipControls(
      jni.JObject deleteBucketOwnershipControlsRequest, jni.JObject $c);
  jni.JObject deleteBucketPolicy(
      jni.JObject deleteBucketPolicyRequest, jni.JObject $c);
  jni.JObject deleteBucketReplication(
      jni.JObject deleteBucketReplicationRequest, jni.JObject $c);
  jni.JObject deleteBucketTagging(
      jni.JObject deleteBucketTaggingRequest, jni.JObject $c);
  jni.JObject deleteBucketWebsite(
      jni.JObject deleteBucketWebsiteRequest, jni.JObject $c);
  jni.JObject deleteObject(jni.JObject deleteObjectRequest, jni.JObject $c);
  jni.JObject deleteObjectTagging(
      jni.JObject deleteObjectTaggingRequest, jni.JObject $c);
  jni.JObject deleteObjects(jni.JObject deleteObjectsRequest, jni.JObject $c);
  jni.JObject deletePublicAccessBlock(
      jni.JObject deletePublicAccessBlockRequest, jni.JObject $c);
  jni.JObject getBucketAccelerateConfiguration(
      jni.JObject getBucketAccelerateConfigurationRequest, jni.JObject $c);
  jni.JObject getBucketAcl(jni.JObject getBucketAclRequest, jni.JObject $c);
  jni.JObject getBucketAnalyticsConfiguration(
      jni.JObject getBucketAnalyticsConfigurationRequest, jni.JObject $c);
  jni.JObject getBucketCors(jni.JObject getBucketCorsRequest, jni.JObject $c);
  jni.JObject getBucketEncryption(
      jni.JObject getBucketEncryptionRequest, jni.JObject $c);
  jni.JObject getBucketIntelligentTieringConfiguration(
      jni.JObject getBucketIntelligentTieringConfigurationRequest,
      jni.JObject $c);
  jni.JObject getBucketInventoryConfiguration(
      jni.JObject getBucketInventoryConfigurationRequest, jni.JObject $c);
  jni.JObject getBucketLifecycleConfiguration(
      jni.JObject getBucketLifecycleConfigurationRequest, jni.JObject $c);
  jni.JObject getBucketLocation(
      jni.JObject getBucketLocationRequest, jni.JObject $c);
  jni.JObject getBucketLogging(
      jni.JObject getBucketLoggingRequest, jni.JObject $c);
  jni.JObject getBucketMetricsConfiguration(
      jni.JObject getBucketMetricsConfigurationRequest, jni.JObject $c);
  jni.JObject getBucketNotificationConfiguration(
      jni.JObject getBucketNotificationConfigurationRequest, jni.JObject $c);
  jni.JObject getBucketOwnershipControls(
      jni.JObject getBucketOwnershipControlsRequest, jni.JObject $c);
  jni.JObject getBucketPolicy(
      jni.JObject getBucketPolicyRequest, jni.JObject $c);
  jni.JObject getBucketPolicyStatus(
      jni.JObject getBucketPolicyStatusRequest, jni.JObject $c);
  jni.JObject getBucketReplication(
      jni.JObject getBucketReplicationRequest, jni.JObject $c);
  jni.JObject getBucketRequestPayment(
      jni.JObject getBucketRequestPaymentRequest, jni.JObject $c);
  jni.JObject getBucketTagging(
      jni.JObject getBucketTaggingRequest, jni.JObject $c);
  jni.JObject getBucketVersioning(
      jni.JObject getBucketVersioningRequest, jni.JObject $c);
  jni.JObject getBucketWebsite(
      jni.JObject getBucketWebsiteRequest, jni.JObject $c);
  jni.JObject getObject(
      jni.JObject getObjectRequest, jni.JObject function2, jni.JObject $c);
  jni.JObject getObjectAcl(jni.JObject getObjectAclRequest, jni.JObject $c);
  jni.JObject getObjectAttributes(
      jni.JObject getObjectAttributesRequest, jni.JObject $c);
  jni.JObject getObjectLegalHold(
      jni.JObject getObjectLegalHoldRequest, jni.JObject $c);
  jni.JObject getObjectLockConfiguration(
      jni.JObject getObjectLockConfigurationRequest, jni.JObject $c);
  jni.JObject getObjectRetention(
      jni.JObject getObjectRetentionRequest, jni.JObject $c);
  jni.JObject getObjectTagging(
      jni.JObject getObjectTaggingRequest, jni.JObject $c);
  jni.JObject getObjectTorrent(jni.JObject getObjectTorrentRequest,
      jni.JObject function2, jni.JObject $c);
  jni.JObject getPublicAccessBlock(
      jni.JObject getPublicAccessBlockRequest, jni.JObject $c);
  jni.JObject headBucket(jni.JObject headBucketRequest, jni.JObject $c);
  jni.JObject headObject(jni.JObject headObjectRequest, jni.JObject $c);
  jni.JObject listBucketAnalyticsConfigurations(
      jni.JObject listBucketAnalyticsConfigurationsRequest, jni.JObject $c);
  jni.JObject listBucketIntelligentTieringConfigurations(
      jni.JObject listBucketIntelligentTieringConfigurationsRequest,
      jni.JObject $c);
  jni.JObject listBucketInventoryConfigurations(
      jni.JObject listBucketInventoryConfigurationsRequest, jni.JObject $c);
  jni.JObject listBucketMetricsConfigurations(
      jni.JObject listBucketMetricsConfigurationsRequest, jni.JObject $c);
  jni.JObject listBuckets(jni.JObject listBucketsRequest, jni.JObject $c);
  jni.JObject listDirectoryBuckets(
      jni.JObject listDirectoryBucketsRequest, jni.JObject $c);
  jni.JObject listMultipartUploads(
      jni.JObject listMultipartUploadsRequest, jni.JObject $c);
  jni.JObject listObjectVersions(
      jni.JObject listObjectVersionsRequest, jni.JObject $c);
  jni.JObject listObjects(jni.JObject listObjectsRequest, jni.JObject $c);
  jni.JObject listObjectsV2(jni.JObject listObjectsV2Request, jni.JObject $c);
  jni.JObject listParts(jni.JObject listPartsRequest, jni.JObject $c);
  jni.JObject putBucketAccelerateConfiguration(
      jni.JObject putBucketAccelerateConfigurationRequest, jni.JObject $c);
  jni.JObject putBucketAcl(jni.JObject putBucketAclRequest, jni.JObject $c);
  jni.JObject putBucketAnalyticsConfiguration(
      jni.JObject putBucketAnalyticsConfigurationRequest, jni.JObject $c);
  jni.JObject putBucketCors(jni.JObject putBucketCorsRequest, jni.JObject $c);
  jni.JObject putBucketEncryption(
      jni.JObject putBucketEncryptionRequest, jni.JObject $c);
  jni.JObject putBucketIntelligentTieringConfiguration(
      jni.JObject putBucketIntelligentTieringConfigurationRequest,
      jni.JObject $c);
  jni.JObject putBucketInventoryConfiguration(
      jni.JObject putBucketInventoryConfigurationRequest, jni.JObject $c);
  jni.JObject putBucketLifecycleConfiguration(
      jni.JObject putBucketLifecycleConfigurationRequest, jni.JObject $c);
  jni.JObject putBucketLogging(
      jni.JObject putBucketLoggingRequest, jni.JObject $c);
  jni.JObject putBucketMetricsConfiguration(
      jni.JObject putBucketMetricsConfigurationRequest, jni.JObject $c);
  jni.JObject putBucketNotificationConfiguration(
      jni.JObject putBucketNotificationConfigurationRequest, jni.JObject $c);
  jni.JObject putBucketOwnershipControls(
      jni.JObject putBucketOwnershipControlsRequest, jni.JObject $c);
  jni.JObject putBucketPolicy(
      jni.JObject putBucketPolicyRequest, jni.JObject $c);
  jni.JObject putBucketReplication(
      jni.JObject putBucketReplicationRequest, jni.JObject $c);
  jni.JObject putBucketRequestPayment(
      jni.JObject putBucketRequestPaymentRequest, jni.JObject $c);
  jni.JObject putBucketTagging(
      jni.JObject putBucketTaggingRequest, jni.JObject $c);
  jni.JObject putBucketVersioning(
      jni.JObject putBucketVersioningRequest, jni.JObject $c);
  jni.JObject putBucketWebsite(
      jni.JObject putBucketWebsiteRequest, jni.JObject $c);
  jni.JObject putObject(
      putobjectrequest_.PutObjectRequest putObjectRequest, jni.JObject $c);
  jni.JObject putObjectAcl(jni.JObject putObjectAclRequest, jni.JObject $c);
  jni.JObject putObjectLegalHold(
      jni.JObject putObjectLegalHoldRequest, jni.JObject $c);
  jni.JObject putObjectLockConfiguration(
      jni.JObject putObjectLockConfigurationRequest, jni.JObject $c);
  jni.JObject putObjectRetention(
      jni.JObject putObjectRetentionRequest, jni.JObject $c);
  jni.JObject putObjectTagging(
      jni.JObject putObjectTaggingRequest, jni.JObject $c);
  jni.JObject putPublicAccessBlock(
      jni.JObject putPublicAccessBlockRequest, jni.JObject $c);
  jni.JObject restoreObject(jni.JObject restoreObjectRequest, jni.JObject $c);
  jni.JObject selectObjectContent(jni.JObject selectObjectContentRequest,
      jni.JObject function2, jni.JObject $c);
  jni.JObject uploadPart(jni.JObject uploadPartRequest, jni.JObject $c);
  jni.JObject uploadPartCopy(jni.JObject uploadPartCopyRequest, jni.JObject $c);
  jni.JObject writeGetObjectResponse(
      jni.JObject writeGetObjectResponseRequest, jni.JObject $c);
  S3Client_Builder builder();
}

class _$S3ClientImpl implements $S3ClientImpl {
  _$S3ClientImpl({
    required S3Client_Config Function() getConfig,
    required jni.JObject Function(
            jni.JObject abortMultipartUploadRequest, jni.JObject $c)
        abortMultipartUpload,
    required jni.JObject Function(
            jni.JObject completeMultipartUploadRequest, jni.JObject $c)
        completeMultipartUpload,
    required jni.JObject Function(jni.JObject copyObjectRequest, jni.JObject $c)
        copyObject,
    required jni.JObject Function(
            jni.JObject createBucketRequest, jni.JObject $c)
        createBucket,
    required jni.JObject Function(
            jni.JObject createMultipartUploadRequest, jni.JObject $c)
        createMultipartUpload,
    required jni.JObject Function(
            jni.JObject createSessionRequest, jni.JObject $c)
        createSession,
    required jni.JObject Function(
            jni.JObject deleteBucketRequest, jni.JObject $c)
        deleteBucket,
    required jni.JObject Function(
            jni.JObject deleteBucketAnalyticsConfigurationRequest,
            jni.JObject $c)
        deleteBucketAnalyticsConfiguration,
    required jni.JObject Function(
            jni.JObject deleteBucketCorsRequest, jni.JObject $c)
        deleteBucketCors,
    required jni.JObject Function(
            jni.JObject deleteBucketEncryptionRequest, jni.JObject $c)
        deleteBucketEncryption,
    required jni.JObject Function(
            jni.JObject deleteBucketIntelligentTieringConfigurationRequest,
            jni.JObject $c)
        deleteBucketIntelligentTieringConfiguration,
    required jni.JObject Function(
            jni.JObject deleteBucketInventoryConfigurationRequest,
            jni.JObject $c)
        deleteBucketInventoryConfiguration,
    required jni.JObject Function(
            jni.JObject deleteBucketLifecycleRequest, jni.JObject $c)
        deleteBucketLifecycle,
    required jni.JObject Function(
            jni.JObject deleteBucketMetricsConfigurationRequest, jni.JObject $c)
        deleteBucketMetricsConfiguration,
    required jni.JObject Function(
            jni.JObject deleteBucketOwnershipControlsRequest, jni.JObject $c)
        deleteBucketOwnershipControls,
    required jni.JObject Function(
            jni.JObject deleteBucketPolicyRequest, jni.JObject $c)
        deleteBucketPolicy,
    required jni.JObject Function(
            jni.JObject deleteBucketReplicationRequest, jni.JObject $c)
        deleteBucketReplication,
    required jni.JObject Function(
            jni.JObject deleteBucketTaggingRequest, jni.JObject $c)
        deleteBucketTagging,
    required jni.JObject Function(
            jni.JObject deleteBucketWebsiteRequest, jni.JObject $c)
        deleteBucketWebsite,
    required jni.JObject Function(
            jni.JObject deleteObjectRequest, jni.JObject $c)
        deleteObject,
    required jni.JObject Function(
            jni.JObject deleteObjectTaggingRequest, jni.JObject $c)
        deleteObjectTagging,
    required jni.JObject Function(
            jni.JObject deleteObjectsRequest, jni.JObject $c)
        deleteObjects,
    required jni.JObject Function(
            jni.JObject deletePublicAccessBlockRequest, jni.JObject $c)
        deletePublicAccessBlock,
    required jni.JObject Function(
            jni.JObject getBucketAccelerateConfigurationRequest, jni.JObject $c)
        getBucketAccelerateConfiguration,
    required jni.JObject Function(
            jni.JObject getBucketAclRequest, jni.JObject $c)
        getBucketAcl,
    required jni.JObject Function(
            jni.JObject getBucketAnalyticsConfigurationRequest, jni.JObject $c)
        getBucketAnalyticsConfiguration,
    required jni.JObject Function(
            jni.JObject getBucketCorsRequest, jni.JObject $c)
        getBucketCors,
    required jni.JObject Function(
            jni.JObject getBucketEncryptionRequest, jni.JObject $c)
        getBucketEncryption,
    required jni.JObject Function(
            jni.JObject getBucketIntelligentTieringConfigurationRequest,
            jni.JObject $c)
        getBucketIntelligentTieringConfiguration,
    required jni.JObject Function(
            jni.JObject getBucketInventoryConfigurationRequest, jni.JObject $c)
        getBucketInventoryConfiguration,
    required jni.JObject Function(
            jni.JObject getBucketLifecycleConfigurationRequest, jni.JObject $c)
        getBucketLifecycleConfiguration,
    required jni.JObject Function(
            jni.JObject getBucketLocationRequest, jni.JObject $c)
        getBucketLocation,
    required jni.JObject Function(
            jni.JObject getBucketLoggingRequest, jni.JObject $c)
        getBucketLogging,
    required jni.JObject Function(
            jni.JObject getBucketMetricsConfigurationRequest, jni.JObject $c)
        getBucketMetricsConfiguration,
    required jni.JObject Function(
            jni.JObject getBucketNotificationConfigurationRequest,
            jni.JObject $c)
        getBucketNotificationConfiguration,
    required jni.JObject Function(
            jni.JObject getBucketOwnershipControlsRequest, jni.JObject $c)
        getBucketOwnershipControls,
    required jni.JObject Function(
            jni.JObject getBucketPolicyRequest, jni.JObject $c)
        getBucketPolicy,
    required jni.JObject Function(
            jni.JObject getBucketPolicyStatusRequest, jni.JObject $c)
        getBucketPolicyStatus,
    required jni.JObject Function(
            jni.JObject getBucketReplicationRequest, jni.JObject $c)
        getBucketReplication,
    required jni.JObject Function(
            jni.JObject getBucketRequestPaymentRequest, jni.JObject $c)
        getBucketRequestPayment,
    required jni.JObject Function(
            jni.JObject getBucketTaggingRequest, jni.JObject $c)
        getBucketTagging,
    required jni.JObject Function(
            jni.JObject getBucketVersioningRequest, jni.JObject $c)
        getBucketVersioning,
    required jni.JObject Function(
            jni.JObject getBucketWebsiteRequest, jni.JObject $c)
        getBucketWebsite,
    required jni.JObject Function(
            jni.JObject getObjectRequest, jni.JObject function2, jni.JObject $c)
        getObject,
    required jni.JObject Function(
            jni.JObject getObjectAclRequest, jni.JObject $c)
        getObjectAcl,
    required jni.JObject Function(
            jni.JObject getObjectAttributesRequest, jni.JObject $c)
        getObjectAttributes,
    required jni.JObject Function(
            jni.JObject getObjectLegalHoldRequest, jni.JObject $c)
        getObjectLegalHold,
    required jni.JObject Function(
            jni.JObject getObjectLockConfigurationRequest, jni.JObject $c)
        getObjectLockConfiguration,
    required jni.JObject Function(
            jni.JObject getObjectRetentionRequest, jni.JObject $c)
        getObjectRetention,
    required jni.JObject Function(
            jni.JObject getObjectTaggingRequest, jni.JObject $c)
        getObjectTagging,
    required jni.JObject Function(jni.JObject getObjectTorrentRequest,
            jni.JObject function2, jni.JObject $c)
        getObjectTorrent,
    required jni.JObject Function(
            jni.JObject getPublicAccessBlockRequest, jni.JObject $c)
        getPublicAccessBlock,
    required jni.JObject Function(jni.JObject headBucketRequest, jni.JObject $c)
        headBucket,
    required jni.JObject Function(jni.JObject headObjectRequest, jni.JObject $c)
        headObject,
    required jni.JObject Function(
            jni.JObject listBucketAnalyticsConfigurationsRequest,
            jni.JObject $c)
        listBucketAnalyticsConfigurations,
    required jni.JObject Function(
            jni.JObject listBucketIntelligentTieringConfigurationsRequest,
            jni.JObject $c)
        listBucketIntelligentTieringConfigurations,
    required jni.JObject Function(
            jni.JObject listBucketInventoryConfigurationsRequest,
            jni.JObject $c)
        listBucketInventoryConfigurations,
    required jni.JObject Function(
            jni.JObject listBucketMetricsConfigurationsRequest, jni.JObject $c)
        listBucketMetricsConfigurations,
    required jni.JObject Function(
            jni.JObject listBucketsRequest, jni.JObject $c)
        listBuckets,
    required jni.JObject Function(
            jni.JObject listDirectoryBucketsRequest, jni.JObject $c)
        listDirectoryBuckets,
    required jni.JObject Function(
            jni.JObject listMultipartUploadsRequest, jni.JObject $c)
        listMultipartUploads,
    required jni.JObject Function(
            jni.JObject listObjectVersionsRequest, jni.JObject $c)
        listObjectVersions,
    required jni.JObject Function(
            jni.JObject listObjectsRequest, jni.JObject $c)
        listObjects,
    required jni.JObject Function(
            jni.JObject listObjectsV2Request, jni.JObject $c)
        listObjectsV2,
    required jni.JObject Function(jni.JObject listPartsRequest, jni.JObject $c)
        listParts,
    required jni.JObject Function(
            jni.JObject putBucketAccelerateConfigurationRequest, jni.JObject $c)
        putBucketAccelerateConfiguration,
    required jni.JObject Function(
            jni.JObject putBucketAclRequest, jni.JObject $c)
        putBucketAcl,
    required jni.JObject Function(
            jni.JObject putBucketAnalyticsConfigurationRequest, jni.JObject $c)
        putBucketAnalyticsConfiguration,
    required jni.JObject Function(
            jni.JObject putBucketCorsRequest, jni.JObject $c)
        putBucketCors,
    required jni.JObject Function(
            jni.JObject putBucketEncryptionRequest, jni.JObject $c)
        putBucketEncryption,
    required jni.JObject Function(
            jni.JObject putBucketIntelligentTieringConfigurationRequest,
            jni.JObject $c)
        putBucketIntelligentTieringConfiguration,
    required jni.JObject Function(
            jni.JObject putBucketInventoryConfigurationRequest, jni.JObject $c)
        putBucketInventoryConfiguration,
    required jni.JObject Function(
            jni.JObject putBucketLifecycleConfigurationRequest, jni.JObject $c)
        putBucketLifecycleConfiguration,
    required jni.JObject Function(
            jni.JObject putBucketLoggingRequest, jni.JObject $c)
        putBucketLogging,
    required jni.JObject Function(
            jni.JObject putBucketMetricsConfigurationRequest, jni.JObject $c)
        putBucketMetricsConfiguration,
    required jni.JObject Function(
            jni.JObject putBucketNotificationConfigurationRequest,
            jni.JObject $c)
        putBucketNotificationConfiguration,
    required jni.JObject Function(
            jni.JObject putBucketOwnershipControlsRequest, jni.JObject $c)
        putBucketOwnershipControls,
    required jni.JObject Function(
            jni.JObject putBucketPolicyRequest, jni.JObject $c)
        putBucketPolicy,
    required jni.JObject Function(
            jni.JObject putBucketReplicationRequest, jni.JObject $c)
        putBucketReplication,
    required jni.JObject Function(
            jni.JObject putBucketRequestPaymentRequest, jni.JObject $c)
        putBucketRequestPayment,
    required jni.JObject Function(
            jni.JObject putBucketTaggingRequest, jni.JObject $c)
        putBucketTagging,
    required jni.JObject Function(
            jni.JObject putBucketVersioningRequest, jni.JObject $c)
        putBucketVersioning,
    required jni.JObject Function(
            jni.JObject putBucketWebsiteRequest, jni.JObject $c)
        putBucketWebsite,
    required jni.JObject Function(
            putobjectrequest_.PutObjectRequest putObjectRequest, jni.JObject $c)
        putObject,
    required jni.JObject Function(
            jni.JObject putObjectAclRequest, jni.JObject $c)
        putObjectAcl,
    required jni.JObject Function(
            jni.JObject putObjectLegalHoldRequest, jni.JObject $c)
        putObjectLegalHold,
    required jni.JObject Function(
            jni.JObject putObjectLockConfigurationRequest, jni.JObject $c)
        putObjectLockConfiguration,
    required jni.JObject Function(
            jni.JObject putObjectRetentionRequest, jni.JObject $c)
        putObjectRetention,
    required jni.JObject Function(
            jni.JObject putObjectTaggingRequest, jni.JObject $c)
        putObjectTagging,
    required jni.JObject Function(
            jni.JObject putPublicAccessBlockRequest, jni.JObject $c)
        putPublicAccessBlock,
    required jni.JObject Function(
            jni.JObject restoreObjectRequest, jni.JObject $c)
        restoreObject,
    required jni.JObject Function(jni.JObject selectObjectContentRequest,
            jni.JObject function2, jni.JObject $c)
        selectObjectContent,
    required jni.JObject Function(jni.JObject uploadPartRequest, jni.JObject $c)
        uploadPart,
    required jni.JObject Function(
            jni.JObject uploadPartCopyRequest, jni.JObject $c)
        uploadPartCopy,
    required jni.JObject Function(
            jni.JObject writeGetObjectResponseRequest, jni.JObject $c)
        writeGetObjectResponse,
    required S3Client_Builder Function() builder,
  })  : _getConfig = getConfig,
        _abortMultipartUpload = abortMultipartUpload,
        _completeMultipartUpload = completeMultipartUpload,
        _copyObject = copyObject,
        _createBucket = createBucket,
        _createMultipartUpload = createMultipartUpload,
        _createSession = createSession,
        _deleteBucket = deleteBucket,
        _deleteBucketAnalyticsConfiguration =
            deleteBucketAnalyticsConfiguration,
        _deleteBucketCors = deleteBucketCors,
        _deleteBucketEncryption = deleteBucketEncryption,
        _deleteBucketIntelligentTieringConfiguration =
            deleteBucketIntelligentTieringConfiguration,
        _deleteBucketInventoryConfiguration =
            deleteBucketInventoryConfiguration,
        _deleteBucketLifecycle = deleteBucketLifecycle,
        _deleteBucketMetricsConfiguration = deleteBucketMetricsConfiguration,
        _deleteBucketOwnershipControls = deleteBucketOwnershipControls,
        _deleteBucketPolicy = deleteBucketPolicy,
        _deleteBucketReplication = deleteBucketReplication,
        _deleteBucketTagging = deleteBucketTagging,
        _deleteBucketWebsite = deleteBucketWebsite,
        _deleteObject = deleteObject,
        _deleteObjectTagging = deleteObjectTagging,
        _deleteObjects = deleteObjects,
        _deletePublicAccessBlock = deletePublicAccessBlock,
        _getBucketAccelerateConfiguration = getBucketAccelerateConfiguration,
        _getBucketAcl = getBucketAcl,
        _getBucketAnalyticsConfiguration = getBucketAnalyticsConfiguration,
        _getBucketCors = getBucketCors,
        _getBucketEncryption = getBucketEncryption,
        _getBucketIntelligentTieringConfiguration =
            getBucketIntelligentTieringConfiguration,
        _getBucketInventoryConfiguration = getBucketInventoryConfiguration,
        _getBucketLifecycleConfiguration = getBucketLifecycleConfiguration,
        _getBucketLocation = getBucketLocation,
        _getBucketLogging = getBucketLogging,
        _getBucketMetricsConfiguration = getBucketMetricsConfiguration,
        _getBucketNotificationConfiguration =
            getBucketNotificationConfiguration,
        _getBucketOwnershipControls = getBucketOwnershipControls,
        _getBucketPolicy = getBucketPolicy,
        _getBucketPolicyStatus = getBucketPolicyStatus,
        _getBucketReplication = getBucketReplication,
        _getBucketRequestPayment = getBucketRequestPayment,
        _getBucketTagging = getBucketTagging,
        _getBucketVersioning = getBucketVersioning,
        _getBucketWebsite = getBucketWebsite,
        _getObject = getObject,
        _getObjectAcl = getObjectAcl,
        _getObjectAttributes = getObjectAttributes,
        _getObjectLegalHold = getObjectLegalHold,
        _getObjectLockConfiguration = getObjectLockConfiguration,
        _getObjectRetention = getObjectRetention,
        _getObjectTagging = getObjectTagging,
        _getObjectTorrent = getObjectTorrent,
        _getPublicAccessBlock = getPublicAccessBlock,
        _headBucket = headBucket,
        _headObject = headObject,
        _listBucketAnalyticsConfigurations = listBucketAnalyticsConfigurations,
        _listBucketIntelligentTieringConfigurations =
            listBucketIntelligentTieringConfigurations,
        _listBucketInventoryConfigurations = listBucketInventoryConfigurations,
        _listBucketMetricsConfigurations = listBucketMetricsConfigurations,
        _listBuckets = listBuckets,
        _listDirectoryBuckets = listDirectoryBuckets,
        _listMultipartUploads = listMultipartUploads,
        _listObjectVersions = listObjectVersions,
        _listObjects = listObjects,
        _listObjectsV2 = listObjectsV2,
        _listParts = listParts,
        _putBucketAccelerateConfiguration = putBucketAccelerateConfiguration,
        _putBucketAcl = putBucketAcl,
        _putBucketAnalyticsConfiguration = putBucketAnalyticsConfiguration,
        _putBucketCors = putBucketCors,
        _putBucketEncryption = putBucketEncryption,
        _putBucketIntelligentTieringConfiguration =
            putBucketIntelligentTieringConfiguration,
        _putBucketInventoryConfiguration = putBucketInventoryConfiguration,
        _putBucketLifecycleConfiguration = putBucketLifecycleConfiguration,
        _putBucketLogging = putBucketLogging,
        _putBucketMetricsConfiguration = putBucketMetricsConfiguration,
        _putBucketNotificationConfiguration =
            putBucketNotificationConfiguration,
        _putBucketOwnershipControls = putBucketOwnershipControls,
        _putBucketPolicy = putBucketPolicy,
        _putBucketReplication = putBucketReplication,
        _putBucketRequestPayment = putBucketRequestPayment,
        _putBucketTagging = putBucketTagging,
        _putBucketVersioning = putBucketVersioning,
        _putBucketWebsite = putBucketWebsite,
        _putObject = putObject,
        _putObjectAcl = putObjectAcl,
        _putObjectLegalHold = putObjectLegalHold,
        _putObjectLockConfiguration = putObjectLockConfiguration,
        _putObjectRetention = putObjectRetention,
        _putObjectTagging = putObjectTagging,
        _putPublicAccessBlock = putPublicAccessBlock,
        _restoreObject = restoreObject,
        _selectObjectContent = selectObjectContent,
        _uploadPart = uploadPart,
        _uploadPartCopy = uploadPartCopy,
        _writeGetObjectResponse = writeGetObjectResponse,
        _builder = builder;

  final S3Client_Config Function() _getConfig;
  final jni.JObject Function(
          jni.JObject abortMultipartUploadRequest, jni.JObject $c)
      _abortMultipartUpload;
  final jni.JObject Function(
          jni.JObject completeMultipartUploadRequest, jni.JObject $c)
      _completeMultipartUpload;
  final jni.JObject Function(jni.JObject copyObjectRequest, jni.JObject $c)
      _copyObject;
  final jni.JObject Function(jni.JObject createBucketRequest, jni.JObject $c)
      _createBucket;
  final jni.JObject Function(
          jni.JObject createMultipartUploadRequest, jni.JObject $c)
      _createMultipartUpload;
  final jni.JObject Function(jni.JObject createSessionRequest, jni.JObject $c)
      _createSession;
  final jni.JObject Function(jni.JObject deleteBucketRequest, jni.JObject $c)
      _deleteBucket;
  final jni.JObject Function(
          jni.JObject deleteBucketAnalyticsConfigurationRequest, jni.JObject $c)
      _deleteBucketAnalyticsConfiguration;
  final jni.JObject Function(
      jni.JObject deleteBucketCorsRequest, jni.JObject $c) _deleteBucketCors;
  final jni.JObject Function(
          jni.JObject deleteBucketEncryptionRequest, jni.JObject $c)
      _deleteBucketEncryption;
  final jni.JObject Function(
      jni.JObject deleteBucketIntelligentTieringConfigurationRequest,
      jni.JObject $c) _deleteBucketIntelligentTieringConfiguration;
  final jni.JObject Function(
          jni.JObject deleteBucketInventoryConfigurationRequest, jni.JObject $c)
      _deleteBucketInventoryConfiguration;
  final jni.JObject Function(
          jni.JObject deleteBucketLifecycleRequest, jni.JObject $c)
      _deleteBucketLifecycle;
  final jni.JObject Function(
          jni.JObject deleteBucketMetricsConfigurationRequest, jni.JObject $c)
      _deleteBucketMetricsConfiguration;
  final jni.JObject Function(
          jni.JObject deleteBucketOwnershipControlsRequest, jni.JObject $c)
      _deleteBucketOwnershipControls;
  final jni.JObject Function(
          jni.JObject deleteBucketPolicyRequest, jni.JObject $c)
      _deleteBucketPolicy;
  final jni.JObject Function(
          jni.JObject deleteBucketReplicationRequest, jni.JObject $c)
      _deleteBucketReplication;
  final jni.JObject Function(
          jni.JObject deleteBucketTaggingRequest, jni.JObject $c)
      _deleteBucketTagging;
  final jni.JObject Function(
          jni.JObject deleteBucketWebsiteRequest, jni.JObject $c)
      _deleteBucketWebsite;
  final jni.JObject Function(jni.JObject deleteObjectRequest, jni.JObject $c)
      _deleteObject;
  final jni.JObject Function(
          jni.JObject deleteObjectTaggingRequest, jni.JObject $c)
      _deleteObjectTagging;
  final jni.JObject Function(jni.JObject deleteObjectsRequest, jni.JObject $c)
      _deleteObjects;
  final jni.JObject Function(
          jni.JObject deletePublicAccessBlockRequest, jni.JObject $c)
      _deletePublicAccessBlock;
  final jni.JObject Function(
          jni.JObject getBucketAccelerateConfigurationRequest, jni.JObject $c)
      _getBucketAccelerateConfiguration;
  final jni.JObject Function(jni.JObject getBucketAclRequest, jni.JObject $c)
      _getBucketAcl;
  final jni.JObject Function(
          jni.JObject getBucketAnalyticsConfigurationRequest, jni.JObject $c)
      _getBucketAnalyticsConfiguration;
  final jni.JObject Function(jni.JObject getBucketCorsRequest, jni.JObject $c)
      _getBucketCors;
  final jni.JObject Function(
          jni.JObject getBucketEncryptionRequest, jni.JObject $c)
      _getBucketEncryption;
  final jni.JObject Function(
      jni.JObject getBucketIntelligentTieringConfigurationRequest,
      jni.JObject $c) _getBucketIntelligentTieringConfiguration;
  final jni.JObject Function(
          jni.JObject getBucketInventoryConfigurationRequest, jni.JObject $c)
      _getBucketInventoryConfiguration;
  final jni.JObject Function(
          jni.JObject getBucketLifecycleConfigurationRequest, jni.JObject $c)
      _getBucketLifecycleConfiguration;
  final jni.JObject Function(
      jni.JObject getBucketLocationRequest, jni.JObject $c) _getBucketLocation;
  final jni.JObject Function(
      jni.JObject getBucketLoggingRequest, jni.JObject $c) _getBucketLogging;
  final jni.JObject Function(
          jni.JObject getBucketMetricsConfigurationRequest, jni.JObject $c)
      _getBucketMetricsConfiguration;
  final jni.JObject Function(
          jni.JObject getBucketNotificationConfigurationRequest, jni.JObject $c)
      _getBucketNotificationConfiguration;
  final jni.JObject Function(
          jni.JObject getBucketOwnershipControlsRequest, jni.JObject $c)
      _getBucketOwnershipControls;
  final jni.JObject Function(jni.JObject getBucketPolicyRequest, jni.JObject $c)
      _getBucketPolicy;
  final jni.JObject Function(
          jni.JObject getBucketPolicyStatusRequest, jni.JObject $c)
      _getBucketPolicyStatus;
  final jni.JObject Function(
          jni.JObject getBucketReplicationRequest, jni.JObject $c)
      _getBucketReplication;
  final jni.JObject Function(
          jni.JObject getBucketRequestPaymentRequest, jni.JObject $c)
      _getBucketRequestPayment;
  final jni.JObject Function(
      jni.JObject getBucketTaggingRequest, jni.JObject $c) _getBucketTagging;
  final jni.JObject Function(
          jni.JObject getBucketVersioningRequest, jni.JObject $c)
      _getBucketVersioning;
  final jni.JObject Function(
      jni.JObject getBucketWebsiteRequest, jni.JObject $c) _getBucketWebsite;
  final jni.JObject Function(
          jni.JObject getObjectRequest, jni.JObject function2, jni.JObject $c)
      _getObject;
  final jni.JObject Function(jni.JObject getObjectAclRequest, jni.JObject $c)
      _getObjectAcl;
  final jni.JObject Function(
          jni.JObject getObjectAttributesRequest, jni.JObject $c)
      _getObjectAttributes;
  final jni.JObject Function(
          jni.JObject getObjectLegalHoldRequest, jni.JObject $c)
      _getObjectLegalHold;
  final jni.JObject Function(
          jni.JObject getObjectLockConfigurationRequest, jni.JObject $c)
      _getObjectLockConfiguration;
  final jni.JObject Function(
          jni.JObject getObjectRetentionRequest, jni.JObject $c)
      _getObjectRetention;
  final jni.JObject Function(
      jni.JObject getObjectTaggingRequest, jni.JObject $c) _getObjectTagging;
  final jni.JObject Function(jni.JObject getObjectTorrentRequest,
      jni.JObject function2, jni.JObject $c) _getObjectTorrent;
  final jni.JObject Function(
          jni.JObject getPublicAccessBlockRequest, jni.JObject $c)
      _getPublicAccessBlock;
  final jni.JObject Function(jni.JObject headBucketRequest, jni.JObject $c)
      _headBucket;
  final jni.JObject Function(jni.JObject headObjectRequest, jni.JObject $c)
      _headObject;
  final jni.JObject Function(
          jni.JObject listBucketAnalyticsConfigurationsRequest, jni.JObject $c)
      _listBucketAnalyticsConfigurations;
  final jni.JObject Function(
      jni.JObject listBucketIntelligentTieringConfigurationsRequest,
      jni.JObject $c) _listBucketIntelligentTieringConfigurations;
  final jni.JObject Function(
          jni.JObject listBucketInventoryConfigurationsRequest, jni.JObject $c)
      _listBucketInventoryConfigurations;
  final jni.JObject Function(
          jni.JObject listBucketMetricsConfigurationsRequest, jni.JObject $c)
      _listBucketMetricsConfigurations;
  final jni.JObject Function(jni.JObject listBucketsRequest, jni.JObject $c)
      _listBuckets;
  final jni.JObject Function(
          jni.JObject listDirectoryBucketsRequest, jni.JObject $c)
      _listDirectoryBuckets;
  final jni.JObject Function(
          jni.JObject listMultipartUploadsRequest, jni.JObject $c)
      _listMultipartUploads;
  final jni.JObject Function(
          jni.JObject listObjectVersionsRequest, jni.JObject $c)
      _listObjectVersions;
  final jni.JObject Function(jni.JObject listObjectsRequest, jni.JObject $c)
      _listObjects;
  final jni.JObject Function(jni.JObject listObjectsV2Request, jni.JObject $c)
      _listObjectsV2;
  final jni.JObject Function(jni.JObject listPartsRequest, jni.JObject $c)
      _listParts;
  final jni.JObject Function(
          jni.JObject putBucketAccelerateConfigurationRequest, jni.JObject $c)
      _putBucketAccelerateConfiguration;
  final jni.JObject Function(jni.JObject putBucketAclRequest, jni.JObject $c)
      _putBucketAcl;
  final jni.JObject Function(
          jni.JObject putBucketAnalyticsConfigurationRequest, jni.JObject $c)
      _putBucketAnalyticsConfiguration;
  final jni.JObject Function(jni.JObject putBucketCorsRequest, jni.JObject $c)
      _putBucketCors;
  final jni.JObject Function(
          jni.JObject putBucketEncryptionRequest, jni.JObject $c)
      _putBucketEncryption;
  final jni.JObject Function(
      jni.JObject putBucketIntelligentTieringConfigurationRequest,
      jni.JObject $c) _putBucketIntelligentTieringConfiguration;
  final jni.JObject Function(
          jni.JObject putBucketInventoryConfigurationRequest, jni.JObject $c)
      _putBucketInventoryConfiguration;
  final jni.JObject Function(
          jni.JObject putBucketLifecycleConfigurationRequest, jni.JObject $c)
      _putBucketLifecycleConfiguration;
  final jni.JObject Function(
      jni.JObject putBucketLoggingRequest, jni.JObject $c) _putBucketLogging;
  final jni.JObject Function(
          jni.JObject putBucketMetricsConfigurationRequest, jni.JObject $c)
      _putBucketMetricsConfiguration;
  final jni.JObject Function(
          jni.JObject putBucketNotificationConfigurationRequest, jni.JObject $c)
      _putBucketNotificationConfiguration;
  final jni.JObject Function(
          jni.JObject putBucketOwnershipControlsRequest, jni.JObject $c)
      _putBucketOwnershipControls;
  final jni.JObject Function(jni.JObject putBucketPolicyRequest, jni.JObject $c)
      _putBucketPolicy;
  final jni.JObject Function(
          jni.JObject putBucketReplicationRequest, jni.JObject $c)
      _putBucketReplication;
  final jni.JObject Function(
          jni.JObject putBucketRequestPaymentRequest, jni.JObject $c)
      _putBucketRequestPayment;
  final jni.JObject Function(
      jni.JObject putBucketTaggingRequest, jni.JObject $c) _putBucketTagging;
  final jni.JObject Function(
          jni.JObject putBucketVersioningRequest, jni.JObject $c)
      _putBucketVersioning;
  final jni.JObject Function(
      jni.JObject putBucketWebsiteRequest, jni.JObject $c) _putBucketWebsite;
  final jni.JObject Function(
          putobjectrequest_.PutObjectRequest putObjectRequest, jni.JObject $c)
      _putObject;
  final jni.JObject Function(jni.JObject putObjectAclRequest, jni.JObject $c)
      _putObjectAcl;
  final jni.JObject Function(
          jni.JObject putObjectLegalHoldRequest, jni.JObject $c)
      _putObjectLegalHold;
  final jni.JObject Function(
          jni.JObject putObjectLockConfigurationRequest, jni.JObject $c)
      _putObjectLockConfiguration;
  final jni.JObject Function(
          jni.JObject putObjectRetentionRequest, jni.JObject $c)
      _putObjectRetention;
  final jni.JObject Function(
      jni.JObject putObjectTaggingRequest, jni.JObject $c) _putObjectTagging;
  final jni.JObject Function(
          jni.JObject putPublicAccessBlockRequest, jni.JObject $c)
      _putPublicAccessBlock;
  final jni.JObject Function(jni.JObject restoreObjectRequest, jni.JObject $c)
      _restoreObject;
  final jni.JObject Function(jni.JObject selectObjectContentRequest,
      jni.JObject function2, jni.JObject $c) _selectObjectContent;
  final jni.JObject Function(jni.JObject uploadPartRequest, jni.JObject $c)
      _uploadPart;
  final jni.JObject Function(jni.JObject uploadPartCopyRequest, jni.JObject $c)
      _uploadPartCopy;
  final jni.JObject Function(
          jni.JObject writeGetObjectResponseRequest, jni.JObject $c)
      _writeGetObjectResponse;
  final S3Client_Builder Function() _builder;

  S3Client_Config getConfig() {
    return _getConfig();
  }

  jni.JObject abortMultipartUpload(
      jni.JObject abortMultipartUploadRequest, jni.JObject $c) {
    return _abortMultipartUpload(abortMultipartUploadRequest, $c);
  }

  jni.JObject completeMultipartUpload(
      jni.JObject completeMultipartUploadRequest, jni.JObject $c) {
    return _completeMultipartUpload(completeMultipartUploadRequest, $c);
  }

  jni.JObject copyObject(jni.JObject copyObjectRequest, jni.JObject $c) {
    return _copyObject(copyObjectRequest, $c);
  }

  jni.JObject createBucket(jni.JObject createBucketRequest, jni.JObject $c) {
    return _createBucket(createBucketRequest, $c);
  }

  jni.JObject createMultipartUpload(
      jni.JObject createMultipartUploadRequest, jni.JObject $c) {
    return _createMultipartUpload(createMultipartUploadRequest, $c);
  }

  jni.JObject createSession(jni.JObject createSessionRequest, jni.JObject $c) {
    return _createSession(createSessionRequest, $c);
  }

  jni.JObject deleteBucket(jni.JObject deleteBucketRequest, jni.JObject $c) {
    return _deleteBucket(deleteBucketRequest, $c);
  }

  jni.JObject deleteBucketAnalyticsConfiguration(
      jni.JObject deleteBucketAnalyticsConfigurationRequest, jni.JObject $c) {
    return _deleteBucketAnalyticsConfiguration(
        deleteBucketAnalyticsConfigurationRequest, $c);
  }

  jni.JObject deleteBucketCors(
      jni.JObject deleteBucketCorsRequest, jni.JObject $c) {
    return _deleteBucketCors(deleteBucketCorsRequest, $c);
  }

  jni.JObject deleteBucketEncryption(
      jni.JObject deleteBucketEncryptionRequest, jni.JObject $c) {
    return _deleteBucketEncryption(deleteBucketEncryptionRequest, $c);
  }

  jni.JObject deleteBucketIntelligentTieringConfiguration(
      jni.JObject deleteBucketIntelligentTieringConfigurationRequest,
      jni.JObject $c) {
    return _deleteBucketIntelligentTieringConfiguration(
        deleteBucketIntelligentTieringConfigurationRequest, $c);
  }

  jni.JObject deleteBucketInventoryConfiguration(
      jni.JObject deleteBucketInventoryConfigurationRequest, jni.JObject $c) {
    return _deleteBucketInventoryConfiguration(
        deleteBucketInventoryConfigurationRequest, $c);
  }

  jni.JObject deleteBucketLifecycle(
      jni.JObject deleteBucketLifecycleRequest, jni.JObject $c) {
    return _deleteBucketLifecycle(deleteBucketLifecycleRequest, $c);
  }

  jni.JObject deleteBucketMetricsConfiguration(
      jni.JObject deleteBucketMetricsConfigurationRequest, jni.JObject $c) {
    return _deleteBucketMetricsConfiguration(
        deleteBucketMetricsConfigurationRequest, $c);
  }

  jni.JObject deleteBucketOwnershipControls(
      jni.JObject deleteBucketOwnershipControlsRequest, jni.JObject $c) {
    return _deleteBucketOwnershipControls(
        deleteBucketOwnershipControlsRequest, $c);
  }

  jni.JObject deleteBucketPolicy(
      jni.JObject deleteBucketPolicyRequest, jni.JObject $c) {
    return _deleteBucketPolicy(deleteBucketPolicyRequest, $c);
  }

  jni.JObject deleteBucketReplication(
      jni.JObject deleteBucketReplicationRequest, jni.JObject $c) {
    return _deleteBucketReplication(deleteBucketReplicationRequest, $c);
  }

  jni.JObject deleteBucketTagging(
      jni.JObject deleteBucketTaggingRequest, jni.JObject $c) {
    return _deleteBucketTagging(deleteBucketTaggingRequest, $c);
  }

  jni.JObject deleteBucketWebsite(
      jni.JObject deleteBucketWebsiteRequest, jni.JObject $c) {
    return _deleteBucketWebsite(deleteBucketWebsiteRequest, $c);
  }

  jni.JObject deleteObject(jni.JObject deleteObjectRequest, jni.JObject $c) {
    return _deleteObject(deleteObjectRequest, $c);
  }

  jni.JObject deleteObjectTagging(
      jni.JObject deleteObjectTaggingRequest, jni.JObject $c) {
    return _deleteObjectTagging(deleteObjectTaggingRequest, $c);
  }

  jni.JObject deleteObjects(jni.JObject deleteObjectsRequest, jni.JObject $c) {
    return _deleteObjects(deleteObjectsRequest, $c);
  }

  jni.JObject deletePublicAccessBlock(
      jni.JObject deletePublicAccessBlockRequest, jni.JObject $c) {
    return _deletePublicAccessBlock(deletePublicAccessBlockRequest, $c);
  }

  jni.JObject getBucketAccelerateConfiguration(
      jni.JObject getBucketAccelerateConfigurationRequest, jni.JObject $c) {
    return _getBucketAccelerateConfiguration(
        getBucketAccelerateConfigurationRequest, $c);
  }

  jni.JObject getBucketAcl(jni.JObject getBucketAclRequest, jni.JObject $c) {
    return _getBucketAcl(getBucketAclRequest, $c);
  }

  jni.JObject getBucketAnalyticsConfiguration(
      jni.JObject getBucketAnalyticsConfigurationRequest, jni.JObject $c) {
    return _getBucketAnalyticsConfiguration(
        getBucketAnalyticsConfigurationRequest, $c);
  }

  jni.JObject getBucketCors(jni.JObject getBucketCorsRequest, jni.JObject $c) {
    return _getBucketCors(getBucketCorsRequest, $c);
  }

  jni.JObject getBucketEncryption(
      jni.JObject getBucketEncryptionRequest, jni.JObject $c) {
    return _getBucketEncryption(getBucketEncryptionRequest, $c);
  }

  jni.JObject getBucketIntelligentTieringConfiguration(
      jni.JObject getBucketIntelligentTieringConfigurationRequest,
      jni.JObject $c) {
    return _getBucketIntelligentTieringConfiguration(
        getBucketIntelligentTieringConfigurationRequest, $c);
  }

  jni.JObject getBucketInventoryConfiguration(
      jni.JObject getBucketInventoryConfigurationRequest, jni.JObject $c) {
    return _getBucketInventoryConfiguration(
        getBucketInventoryConfigurationRequest, $c);
  }

  jni.JObject getBucketLifecycleConfiguration(
      jni.JObject getBucketLifecycleConfigurationRequest, jni.JObject $c) {
    return _getBucketLifecycleConfiguration(
        getBucketLifecycleConfigurationRequest, $c);
  }

  jni.JObject getBucketLocation(
      jni.JObject getBucketLocationRequest, jni.JObject $c) {
    return _getBucketLocation(getBucketLocationRequest, $c);
  }

  jni.JObject getBucketLogging(
      jni.JObject getBucketLoggingRequest, jni.JObject $c) {
    return _getBucketLogging(getBucketLoggingRequest, $c);
  }

  jni.JObject getBucketMetricsConfiguration(
      jni.JObject getBucketMetricsConfigurationRequest, jni.JObject $c) {
    return _getBucketMetricsConfiguration(
        getBucketMetricsConfigurationRequest, $c);
  }

  jni.JObject getBucketNotificationConfiguration(
      jni.JObject getBucketNotificationConfigurationRequest, jni.JObject $c) {
    return _getBucketNotificationConfiguration(
        getBucketNotificationConfigurationRequest, $c);
  }

  jni.JObject getBucketOwnershipControls(
      jni.JObject getBucketOwnershipControlsRequest, jni.JObject $c) {
    return _getBucketOwnershipControls(getBucketOwnershipControlsRequest, $c);
  }

  jni.JObject getBucketPolicy(
      jni.JObject getBucketPolicyRequest, jni.JObject $c) {
    return _getBucketPolicy(getBucketPolicyRequest, $c);
  }

  jni.JObject getBucketPolicyStatus(
      jni.JObject getBucketPolicyStatusRequest, jni.JObject $c) {
    return _getBucketPolicyStatus(getBucketPolicyStatusRequest, $c);
  }

  jni.JObject getBucketReplication(
      jni.JObject getBucketReplicationRequest, jni.JObject $c) {
    return _getBucketReplication(getBucketReplicationRequest, $c);
  }

  jni.JObject getBucketRequestPayment(
      jni.JObject getBucketRequestPaymentRequest, jni.JObject $c) {
    return _getBucketRequestPayment(getBucketRequestPaymentRequest, $c);
  }

  jni.JObject getBucketTagging(
      jni.JObject getBucketTaggingRequest, jni.JObject $c) {
    return _getBucketTagging(getBucketTaggingRequest, $c);
  }

  jni.JObject getBucketVersioning(
      jni.JObject getBucketVersioningRequest, jni.JObject $c) {
    return _getBucketVersioning(getBucketVersioningRequest, $c);
  }

  jni.JObject getBucketWebsite(
      jni.JObject getBucketWebsiteRequest, jni.JObject $c) {
    return _getBucketWebsite(getBucketWebsiteRequest, $c);
  }

  jni.JObject getObject(
      jni.JObject getObjectRequest, jni.JObject function2, jni.JObject $c) {
    return _getObject(getObjectRequest, function2, $c);
  }

  jni.JObject getObjectAcl(jni.JObject getObjectAclRequest, jni.JObject $c) {
    return _getObjectAcl(getObjectAclRequest, $c);
  }

  jni.JObject getObjectAttributes(
      jni.JObject getObjectAttributesRequest, jni.JObject $c) {
    return _getObjectAttributes(getObjectAttributesRequest, $c);
  }

  jni.JObject getObjectLegalHold(
      jni.JObject getObjectLegalHoldRequest, jni.JObject $c) {
    return _getObjectLegalHold(getObjectLegalHoldRequest, $c);
  }

  jni.JObject getObjectLockConfiguration(
      jni.JObject getObjectLockConfigurationRequest, jni.JObject $c) {
    return _getObjectLockConfiguration(getObjectLockConfigurationRequest, $c);
  }

  jni.JObject getObjectRetention(
      jni.JObject getObjectRetentionRequest, jni.JObject $c) {
    return _getObjectRetention(getObjectRetentionRequest, $c);
  }

  jni.JObject getObjectTagging(
      jni.JObject getObjectTaggingRequest, jni.JObject $c) {
    return _getObjectTagging(getObjectTaggingRequest, $c);
  }

  jni.JObject getObjectTorrent(jni.JObject getObjectTorrentRequest,
      jni.JObject function2, jni.JObject $c) {
    return _getObjectTorrent(getObjectTorrentRequest, function2, $c);
  }

  jni.JObject getPublicAccessBlock(
      jni.JObject getPublicAccessBlockRequest, jni.JObject $c) {
    return _getPublicAccessBlock(getPublicAccessBlockRequest, $c);
  }

  jni.JObject headBucket(jni.JObject headBucketRequest, jni.JObject $c) {
    return _headBucket(headBucketRequest, $c);
  }

  jni.JObject headObject(jni.JObject headObjectRequest, jni.JObject $c) {
    return _headObject(headObjectRequest, $c);
  }

  jni.JObject listBucketAnalyticsConfigurations(
      jni.JObject listBucketAnalyticsConfigurationsRequest, jni.JObject $c) {
    return _listBucketAnalyticsConfigurations(
        listBucketAnalyticsConfigurationsRequest, $c);
  }

  jni.JObject listBucketIntelligentTieringConfigurations(
      jni.JObject listBucketIntelligentTieringConfigurationsRequest,
      jni.JObject $c) {
    return _listBucketIntelligentTieringConfigurations(
        listBucketIntelligentTieringConfigurationsRequest, $c);
  }

  jni.JObject listBucketInventoryConfigurations(
      jni.JObject listBucketInventoryConfigurationsRequest, jni.JObject $c) {
    return _listBucketInventoryConfigurations(
        listBucketInventoryConfigurationsRequest, $c);
  }

  jni.JObject listBucketMetricsConfigurations(
      jni.JObject listBucketMetricsConfigurationsRequest, jni.JObject $c) {
    return _listBucketMetricsConfigurations(
        listBucketMetricsConfigurationsRequest, $c);
  }

  jni.JObject listBuckets(jni.JObject listBucketsRequest, jni.JObject $c) {
    return _listBuckets(listBucketsRequest, $c);
  }

  jni.JObject listDirectoryBuckets(
      jni.JObject listDirectoryBucketsRequest, jni.JObject $c) {
    return _listDirectoryBuckets(listDirectoryBucketsRequest, $c);
  }

  jni.JObject listMultipartUploads(
      jni.JObject listMultipartUploadsRequest, jni.JObject $c) {
    return _listMultipartUploads(listMultipartUploadsRequest, $c);
  }

  jni.JObject listObjectVersions(
      jni.JObject listObjectVersionsRequest, jni.JObject $c) {
    return _listObjectVersions(listObjectVersionsRequest, $c);
  }

  jni.JObject listObjects(jni.JObject listObjectsRequest, jni.JObject $c) {
    return _listObjects(listObjectsRequest, $c);
  }

  jni.JObject listObjectsV2(jni.JObject listObjectsV2Request, jni.JObject $c) {
    return _listObjectsV2(listObjectsV2Request, $c);
  }

  jni.JObject listParts(jni.JObject listPartsRequest, jni.JObject $c) {
    return _listParts(listPartsRequest, $c);
  }

  jni.JObject putBucketAccelerateConfiguration(
      jni.JObject putBucketAccelerateConfigurationRequest, jni.JObject $c) {
    return _putBucketAccelerateConfiguration(
        putBucketAccelerateConfigurationRequest, $c);
  }

  jni.JObject putBucketAcl(jni.JObject putBucketAclRequest, jni.JObject $c) {
    return _putBucketAcl(putBucketAclRequest, $c);
  }

  jni.JObject putBucketAnalyticsConfiguration(
      jni.JObject putBucketAnalyticsConfigurationRequest, jni.JObject $c) {
    return _putBucketAnalyticsConfiguration(
        putBucketAnalyticsConfigurationRequest, $c);
  }

  jni.JObject putBucketCors(jni.JObject putBucketCorsRequest, jni.JObject $c) {
    return _putBucketCors(putBucketCorsRequest, $c);
  }

  jni.JObject putBucketEncryption(
      jni.JObject putBucketEncryptionRequest, jni.JObject $c) {
    return _putBucketEncryption(putBucketEncryptionRequest, $c);
  }

  jni.JObject putBucketIntelligentTieringConfiguration(
      jni.JObject putBucketIntelligentTieringConfigurationRequest,
      jni.JObject $c) {
    return _putBucketIntelligentTieringConfiguration(
        putBucketIntelligentTieringConfigurationRequest, $c);
  }

  jni.JObject putBucketInventoryConfiguration(
      jni.JObject putBucketInventoryConfigurationRequest, jni.JObject $c) {
    return _putBucketInventoryConfiguration(
        putBucketInventoryConfigurationRequest, $c);
  }

  jni.JObject putBucketLifecycleConfiguration(
      jni.JObject putBucketLifecycleConfigurationRequest, jni.JObject $c) {
    return _putBucketLifecycleConfiguration(
        putBucketLifecycleConfigurationRequest, $c);
  }

  jni.JObject putBucketLogging(
      jni.JObject putBucketLoggingRequest, jni.JObject $c) {
    return _putBucketLogging(putBucketLoggingRequest, $c);
  }

  jni.JObject putBucketMetricsConfiguration(
      jni.JObject putBucketMetricsConfigurationRequest, jni.JObject $c) {
    return _putBucketMetricsConfiguration(
        putBucketMetricsConfigurationRequest, $c);
  }

  jni.JObject putBucketNotificationConfiguration(
      jni.JObject putBucketNotificationConfigurationRequest, jni.JObject $c) {
    return _putBucketNotificationConfiguration(
        putBucketNotificationConfigurationRequest, $c);
  }

  jni.JObject putBucketOwnershipControls(
      jni.JObject putBucketOwnershipControlsRequest, jni.JObject $c) {
    return _putBucketOwnershipControls(putBucketOwnershipControlsRequest, $c);
  }

  jni.JObject putBucketPolicy(
      jni.JObject putBucketPolicyRequest, jni.JObject $c) {
    return _putBucketPolicy(putBucketPolicyRequest, $c);
  }

  jni.JObject putBucketReplication(
      jni.JObject putBucketReplicationRequest, jni.JObject $c) {
    return _putBucketReplication(putBucketReplicationRequest, $c);
  }

  jni.JObject putBucketRequestPayment(
      jni.JObject putBucketRequestPaymentRequest, jni.JObject $c) {
    return _putBucketRequestPayment(putBucketRequestPaymentRequest, $c);
  }

  jni.JObject putBucketTagging(
      jni.JObject putBucketTaggingRequest, jni.JObject $c) {
    return _putBucketTagging(putBucketTaggingRequest, $c);
  }

  jni.JObject putBucketVersioning(
      jni.JObject putBucketVersioningRequest, jni.JObject $c) {
    return _putBucketVersioning(putBucketVersioningRequest, $c);
  }

  jni.JObject putBucketWebsite(
      jni.JObject putBucketWebsiteRequest, jni.JObject $c) {
    return _putBucketWebsite(putBucketWebsiteRequest, $c);
  }

  jni.JObject putObject(
      putobjectrequest_.PutObjectRequest putObjectRequest, jni.JObject $c) {
    return _putObject(putObjectRequest, $c);
  }

  jni.JObject putObjectAcl(jni.JObject putObjectAclRequest, jni.JObject $c) {
    return _putObjectAcl(putObjectAclRequest, $c);
  }

  jni.JObject putObjectLegalHold(
      jni.JObject putObjectLegalHoldRequest, jni.JObject $c) {
    return _putObjectLegalHold(putObjectLegalHoldRequest, $c);
  }

  jni.JObject putObjectLockConfiguration(
      jni.JObject putObjectLockConfigurationRequest, jni.JObject $c) {
    return _putObjectLockConfiguration(putObjectLockConfigurationRequest, $c);
  }

  jni.JObject putObjectRetention(
      jni.JObject putObjectRetentionRequest, jni.JObject $c) {
    return _putObjectRetention(putObjectRetentionRequest, $c);
  }

  jni.JObject putObjectTagging(
      jni.JObject putObjectTaggingRequest, jni.JObject $c) {
    return _putObjectTagging(putObjectTaggingRequest, $c);
  }

  jni.JObject putPublicAccessBlock(
      jni.JObject putPublicAccessBlockRequest, jni.JObject $c) {
    return _putPublicAccessBlock(putPublicAccessBlockRequest, $c);
  }

  jni.JObject restoreObject(jni.JObject restoreObjectRequest, jni.JObject $c) {
    return _restoreObject(restoreObjectRequest, $c);
  }

  jni.JObject selectObjectContent(jni.JObject selectObjectContentRequest,
      jni.JObject function2, jni.JObject $c) {
    return _selectObjectContent(selectObjectContentRequest, function2, $c);
  }

  jni.JObject uploadPart(jni.JObject uploadPartRequest, jni.JObject $c) {
    return _uploadPart(uploadPartRequest, $c);
  }

  jni.JObject uploadPartCopy(
      jni.JObject uploadPartCopyRequest, jni.JObject $c) {
    return _uploadPartCopy(uploadPartCopyRequest, $c);
  }

  jni.JObject writeGetObjectResponse(
      jni.JObject writeGetObjectResponseRequest, jni.JObject $c) {
    return _writeGetObjectResponse(writeGetObjectResponseRequest, $c);
  }

  S3Client_Builder builder() {
    return _builder();
  }
}

final class $S3ClientType extends jni.JObjType<S3Client> {
  const $S3ClientType();

  @override
  String get signature => r'Laws/sdk/kotlin/services/s3/S3Client;';

  @override
  S3Client fromReference(jni.JReference reference) =>
      S3Client.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($S3ClientType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($S3ClientType) && other is $S3ClientType;
  }
}
