// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:ffi' as ffi;
import 'dart:isolate' show ReceivePort;

import 'package:jni/internal_helpers_for_jnigen.dart';
import 'package:jni/jni.dart' as jni;

import '../../../../../smithy/kotlin/runtime/auth/awscredentials/Credentials.dart'
    as credentials_;

/// from: aws.sdk.kotlin.runtime.auth.credentials.StaticCredentialsProvider$Builder
class StaticCredentialsProvider_Builder extends jni.JObject {
  @override
  late final jni.JObjType<StaticCredentialsProvider_Builder> $type = type;

  StaticCredentialsProvider_Builder.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(
      r'aws/sdk/kotlin/runtime/auth/credentials/StaticCredentialsProvider$Builder');

  /// The type which includes information such as the signature of this class.
  static const type = $StaticCredentialsProvider_BuilderType();
  static final _id_new0 = _class.constructorId(
    r'()V',
  );

  static final _new0 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_NewObject')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public void <init>()
  /// The returned object must be released after use, by calling the [release] method.
  factory StaticCredentialsProvider_Builder() {
    return StaticCredentialsProvider_Builder.fromReference(
        _new0(_class.reference.pointer, _id_new0 as jni.JMethodIDPtr)
            .reference);
  }

  static final _id_getAccessKeyId = _class.instanceMethodId(
    r'getAccessKeyId',
    r'()Ljava/lang/String;',
  );

  static final _getAccessKeyId = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final java.lang.String getAccessKeyId()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getAccessKeyId() {
    return _getAccessKeyId(
            reference.pointer, _id_getAccessKeyId as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_setAccessKeyId = _class.instanceMethodId(
    r'setAccessKeyId',
    r'(Ljava/lang/String;)V',
  );

  static final _setAccessKeyId = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final void setAccessKeyId(java.lang.String string)
  void setAccessKeyId(
    jni.JString string,
  ) {
    _setAccessKeyId(reference.pointer, _id_setAccessKeyId as jni.JMethodIDPtr,
            string.reference.pointer)
        .check();
  }

  static final _id_getSecretAccessKey = _class.instanceMethodId(
    r'getSecretAccessKey',
    r'()Ljava/lang/String;',
  );

  static final _getSecretAccessKey = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final java.lang.String getSecretAccessKey()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getSecretAccessKey() {
    return _getSecretAccessKey(
            reference.pointer, _id_getSecretAccessKey as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_setSecretAccessKey = _class.instanceMethodId(
    r'setSecretAccessKey',
    r'(Ljava/lang/String;)V',
  );

  static final _setSecretAccessKey = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final void setSecretAccessKey(java.lang.String string)
  void setSecretAccessKey(
    jni.JString string,
  ) {
    _setSecretAccessKey(
            reference.pointer,
            _id_setSecretAccessKey as jni.JMethodIDPtr,
            string.reference.pointer)
        .check();
  }

  static final _id_getSessionToken = _class.instanceMethodId(
    r'getSessionToken',
    r'()Ljava/lang/String;',
  );

  static final _getSessionToken = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final java.lang.String getSessionToken()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getSessionToken() {
    return _getSessionToken(
            reference.pointer, _id_getSessionToken as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_setSessionToken = _class.instanceMethodId(
    r'setSessionToken',
    r'(Ljava/lang/String;)V',
  );

  static final _setSessionToken = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final void setSessionToken(java.lang.String string)
  void setSessionToken(
    jni.JString string,
  ) {
    _setSessionToken(reference.pointer, _id_setSessionToken as jni.JMethodIDPtr,
            string.reference.pointer)
        .check();
  }

  static final _id_getAccountId = _class.instanceMethodId(
    r'getAccountId',
    r'()Ljava/lang/String;',
  );

  static final _getAccountId = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final java.lang.String getAccountId()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getAccountId() {
    return _getAccountId(
            reference.pointer, _id_getAccountId as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_setAccountId = _class.instanceMethodId(
    r'setAccountId',
    r'(Ljava/lang/String;)V',
  );

  static final _setAccountId = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final void setAccountId(java.lang.String string)
  void setAccountId(
    jni.JString string,
  ) {
    _setAccountId(reference.pointer, _id_setAccountId as jni.JMethodIDPtr,
            string.reference.pointer)
        .check();
  }

  static final _id_build = _class.instanceMethodId(
    r'build',
    r'()Laws/sdk/kotlin/runtime/auth/credentials/StaticCredentialsProvider;',
  );

  static final _build = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final aws.sdk.kotlin.runtime.auth.credentials.StaticCredentialsProvider build()
  /// The returned object must be released after use, by calling the [release] method.
  StaticCredentialsProvider build() {
    return _build(reference.pointer, _id_build as jni.JMethodIDPtr)
        .object(const $StaticCredentialsProviderType());
  }
}

final class $StaticCredentialsProvider_BuilderType
    extends jni.JObjType<StaticCredentialsProvider_Builder> {
  const $StaticCredentialsProvider_BuilderType();

  @override
  String get signature =>
      r'Laws/sdk/kotlin/runtime/auth/credentials/StaticCredentialsProvider$Builder;';

  @override
  StaticCredentialsProvider_Builder fromReference(jni.JReference reference) =>
      StaticCredentialsProvider_Builder.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($StaticCredentialsProvider_BuilderType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($StaticCredentialsProvider_BuilderType) &&
        other is $StaticCredentialsProvider_BuilderType;
  }
}

/// from: aws.sdk.kotlin.runtime.auth.credentials.StaticCredentialsProvider$Companion
class StaticCredentialsProvider_Companion extends jni.JObject {
  @override
  late final jni.JObjType<StaticCredentialsProvider_Companion> $type = type;

  StaticCredentialsProvider_Companion.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(
      r'aws/sdk/kotlin/runtime/auth/credentials/StaticCredentialsProvider$Companion');

  /// The type which includes information such as the signature of this class.
  static const type = $StaticCredentialsProvider_CompanionType();
  static final _id_invoke = _class.instanceMethodId(
    r'invoke',
    r'(Lkotlin/jvm/functions/Function1;)Laws/sdk/kotlin/runtime/auth/credentials/StaticCredentialsProvider;',
  );

  static final _invoke = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final aws.sdk.kotlin.runtime.auth.credentials.StaticCredentialsProvider invoke(kotlin.jvm.functions.Function1 function1)
  /// The returned object must be released after use, by calling the [release] method.
  StaticCredentialsProvider invoke(
    jni.JObject function1,
  ) {
    return _invoke(reference.pointer, _id_invoke as jni.JMethodIDPtr,
            function1.reference.pointer)
        .object(const $StaticCredentialsProviderType());
  }

  static final _id_new0 = _class.constructorId(
    r'(Lkotlin/jvm/internal/DefaultConstructorMarker;)V',
  );

  static final _new0 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_NewObject')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(kotlin.jvm.internal.DefaultConstructorMarker defaultConstructorMarker)
  /// The returned object must be released after use, by calling the [release] method.
  factory StaticCredentialsProvider_Companion(
    jni.JObject defaultConstructorMarker,
  ) {
    return StaticCredentialsProvider_Companion.fromReference(_new0(
            _class.reference.pointer,
            _id_new0 as jni.JMethodIDPtr,
            defaultConstructorMarker.reference.pointer)
        .reference);
  }
}

final class $StaticCredentialsProvider_CompanionType
    extends jni.JObjType<StaticCredentialsProvider_Companion> {
  const $StaticCredentialsProvider_CompanionType();

  @override
  String get signature =>
      r'Laws/sdk/kotlin/runtime/auth/credentials/StaticCredentialsProvider$Companion;';

  @override
  StaticCredentialsProvider_Companion fromReference(jni.JReference reference) =>
      StaticCredentialsProvider_Companion.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($StaticCredentialsProvider_CompanionType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($StaticCredentialsProvider_CompanionType) &&
        other is $StaticCredentialsProvider_CompanionType;
  }
}

/// from: aws.sdk.kotlin.runtime.auth.credentials.StaticCredentialsProvider
class StaticCredentialsProvider extends jni.JObject {
  @override
  late final jni.JObjType<StaticCredentialsProvider> $type = type;

  StaticCredentialsProvider.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(
      r'aws/sdk/kotlin/runtime/auth/credentials/StaticCredentialsProvider');

  /// The type which includes information such as the signature of this class.
  static const type = $StaticCredentialsProviderType();
  static final _id_Companion = _class.staticFieldId(
    r'Companion',
    r'Laws/sdk/kotlin/runtime/auth/credentials/StaticCredentialsProvider$Companion;',
  );

  /// from: static public final aws.sdk.kotlin.runtime.auth.credentials.StaticCredentialsProvider$Companion Companion
  /// The returned object must be released after use, by calling the [release] method.
  static StaticCredentialsProvider_Companion get Companion => _id_Companion.get(
      _class, const $StaticCredentialsProvider_CompanionType());

  static final _id_new0 = _class.constructorId(
    r'(Laws/smithy/kotlin/runtime/auth/awscredentials/Credentials;)V',
  );

  static final _new0 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_NewObject')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(aws.smithy.kotlin.runtime.auth.awscredentials.Credentials credentials)
  /// The returned object must be released after use, by calling the [release] method.
  factory StaticCredentialsProvider(
    credentials_.Credentials credentials,
  ) {
    return StaticCredentialsProvider.fromReference(_new0(
            _class.reference.pointer,
            _id_new0 as jni.JMethodIDPtr,
            credentials.reference.pointer)
        .reference);
  }

  static final _id_getCredentials = _class.instanceMethodId(
    r'getCredentials',
    r'()Laws/smithy/kotlin/runtime/auth/awscredentials/Credentials;',
  );

  static final _getCredentials = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final aws.smithy.kotlin.runtime.auth.awscredentials.Credentials getCredentials()
  /// The returned object must be released after use, by calling the [release] method.
  credentials_.Credentials getCredentials() {
    return _getCredentials(
            reference.pointer, _id_getCredentials as jni.JMethodIDPtr)
        .object(const credentials_.$CredentialsType());
  }

  static final _id_resolve = _class.instanceMethodId(
    r'resolve',
    r'(Laws/smithy/kotlin/runtime/collections/Attributes;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;',
  );

  static final _resolve = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.Object resolve(aws.smithy.kotlin.runtime.collections.Attributes attributes, kotlin.coroutines.Continuation continuation)
  /// The returned object must be released after use, by calling the [release] method.
  Future<credentials_.Credentials> resolve(
    jni.JObject attributes,
  ) async {
    final $p = ReceivePort();
    final $c = jni.JObject.fromReference(
        ProtectedJniExtensions.newPortContinuation($p));
    _resolve(reference.pointer, _id_resolve as jni.JMethodIDPtr,
            attributes.reference.pointer, $c.reference.pointer)
        .object(const jni.JObjectType());
    final $o = jni.JGlobalReference(jni.JObjectPtr.fromAddress(await $p.first));
    final $k = const credentials_.$CredentialsType().jClass.reference.pointer;
    if (!jni.Jni.env.IsInstanceOf($o.pointer, $k)) {
      throw 'Failed';
    }
    return const credentials_.$CredentialsType().fromReference($o);
  }

  static final _id_new1 = _class.constructorId(
    r'(Laws/sdk/kotlin/runtime/auth/credentials/StaticCredentialsProvider$Builder;Lkotlin/jvm/internal/DefaultConstructorMarker;)V',
  );

  static final _new1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_NewObject')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(aws.sdk.kotlin.runtime.auth.credentials.StaticCredentialsProvider$Builder builder, kotlin.jvm.internal.DefaultConstructorMarker defaultConstructorMarker)
  /// The returned object must be released after use, by calling the [release] method.
  factory StaticCredentialsProvider.new1(
    StaticCredentialsProvider_Builder builder,
    jni.JObject defaultConstructorMarker,
  ) {
    return StaticCredentialsProvider.fromReference(_new1(
            _class.reference.pointer,
            _id_new1 as jni.JMethodIDPtr,
            builder.reference.pointer,
            defaultConstructorMarker.reference.pointer)
        .reference);
  }
}

final class $StaticCredentialsProviderType
    extends jni.JObjType<StaticCredentialsProvider> {
  const $StaticCredentialsProviderType();

  @override
  String get signature =>
      r'Laws/sdk/kotlin/runtime/auth/credentials/StaticCredentialsProvider;';

  @override
  StaticCredentialsProvider fromReference(jni.JReference reference) =>
      StaticCredentialsProvider.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($StaticCredentialsProviderType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($StaticCredentialsProviderType) &&
        other is $StaticCredentialsProviderType;
  }
}
