// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:ffi' as ffi;
import 'dart:isolate' show ReceivePort;

import 'package:jni/internal_helpers_for_jnigen.dart';
import 'package:jni/jni.dart' as jni;

/// from: aws.smithy.kotlin.runtime.auth.awscredentials.Credentials$Companion
class Credentials_Companion extends jni.JObject {
  @override
  late final jni.JObjType<Credentials_Companion> $type = type;

  Credentials_Companion.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(
      r'aws/smithy/kotlin/runtime/auth/awscredentials/Credentials$Companion');

  /// The type which includes information such as the signature of this class.
  static const type = $Credentials_CompanionType();
  static final _id_invoke = _class.instanceMethodId(
    r'invoke',
    r'(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Laws/smithy/kotlin/runtime/time/Instant;Ljava/lang/String;Laws/smithy/kotlin/runtime/collections/Attributes;)Laws/smithy/kotlin/runtime/auth/awscredentials/Credentials;',
  );

  static final _invoke = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final aws.smithy.kotlin.runtime.auth.awscredentials.Credentials invoke(java.lang.String string, java.lang.String string1, java.lang.String string2, aws.smithy.kotlin.runtime.time.Instant instant, java.lang.String string3, aws.smithy.kotlin.runtime.collections.Attributes attributes)
  /// The returned object must be released after use, by calling the [release] method.
  Credentials invoke(
    jni.JString string,
    jni.JString string1,
    jni.JString string2,
    jni.JObject instant,
    jni.JString string3,
    jni.JObject attributes,
  ) {
    return _invoke(
            reference.pointer,
            _id_invoke as jni.JMethodIDPtr,
            string.reference.pointer,
            string1.reference.pointer,
            string2.reference.pointer,
            instant.reference.pointer,
            string3.reference.pointer,
            attributes.reference.pointer)
        .object(const $CredentialsType());
  }
}

final class $Credentials_CompanionType
    extends jni.JObjType<Credentials_Companion> {
  const $Credentials_CompanionType();

  @override
  String get signature =>
      r'Laws/smithy/kotlin/runtime/auth/awscredentials/Credentials$Companion;';

  @override
  Credentials_Companion fromReference(jni.JReference reference) =>
      Credentials_Companion.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($Credentials_CompanionType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($Credentials_CompanionType) &&
        other is $Credentials_CompanionType;
  }
}

/// from: aws.smithy.kotlin.runtime.auth.awscredentials.Credentials$DefaultImpls
class Credentials_DefaultImpls extends jni.JObject {
  @override
  late final jni.JObjType<Credentials_DefaultImpls> $type = type;

  Credentials_DefaultImpls.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(
      r'aws/smithy/kotlin/runtime/auth/awscredentials/Credentials$DefaultImpls');

  /// The type which includes information such as the signature of this class.
  static const type = $Credentials_DefaultImplsType();
  static final _id_getSessionToken = _class.staticMethodId(
    r'getSessionToken',
    r'(Laws/smithy/kotlin/runtime/auth/awscredentials/Credentials;)Ljava/lang/String;',
  );

  static final _getSessionToken = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: static public java.lang.String getSessionToken(aws.smithy.kotlin.runtime.auth.awscredentials.Credentials credentials)
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString getSessionToken(
    Credentials credentials,
  ) {
    return _getSessionToken(
            _class.reference.pointer,
            _id_getSessionToken as jni.JMethodIDPtr,
            credentials.reference.pointer)
        .object(const jni.JStringType());
  }

  static final _id_getProviderName = _class.staticMethodId(
    r'getProviderName',
    r'(Laws/smithy/kotlin/runtime/auth/awscredentials/Credentials;)Ljava/lang/String;',
  );

  static final _getProviderName = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: static public java.lang.String getProviderName(aws.smithy.kotlin.runtime.auth.awscredentials.Credentials credentials)
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString getProviderName(
    Credentials credentials,
  ) {
    return _getProviderName(
            _class.reference.pointer,
            _id_getProviderName as jni.JMethodIDPtr,
            credentials.reference.pointer)
        .object(const jni.JStringType());
  }
}

final class $Credentials_DefaultImplsType
    extends jni.JObjType<Credentials_DefaultImpls> {
  const $Credentials_DefaultImplsType();

  @override
  String get signature =>
      r'Laws/smithy/kotlin/runtime/auth/awscredentials/Credentials$DefaultImpls;';

  @override
  Credentials_DefaultImpls fromReference(jni.JReference reference) =>
      Credentials_DefaultImpls.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($Credentials_DefaultImplsType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($Credentials_DefaultImplsType) &&
        other is $Credentials_DefaultImplsType;
  }
}

/// from: aws.smithy.kotlin.runtime.auth.awscredentials.Credentials
class Credentials extends jni.JObject {
  @override
  late final jni.JObjType<Credentials> $type = type;

  Credentials.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(
      r'aws/smithy/kotlin/runtime/auth/awscredentials/Credentials');

  /// The type which includes information such as the signature of this class.
  static const type = $CredentialsType();
  static final _id_Companion = _class.staticFieldId(
    r'Companion',
    r'Laws/smithy/kotlin/runtime/auth/awscredentials/Credentials$Companion;',
  );

  /// from: static public final aws.smithy.kotlin.runtime.auth.awscredentials.Credentials$Companion Companion
  /// The returned object must be released after use, by calling the [release] method.
  static Credentials_Companion get Companion =>
      _id_Companion.get(_class, const $Credentials_CompanionType());

  static final _id_getAccessKeyId = _class.instanceMethodId(
    r'getAccessKeyId',
    r'()Ljava/lang/String;',
  );

  static final _getAccessKeyId = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract java.lang.String getAccessKeyId()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getAccessKeyId() {
    return _getAccessKeyId(
            reference.pointer, _id_getAccessKeyId as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_getSecretAccessKey = _class.instanceMethodId(
    r'getSecretAccessKey',
    r'()Ljava/lang/String;',
  );

  static final _getSecretAccessKey = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract java.lang.String getSecretAccessKey()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getSecretAccessKey() {
    return _getSecretAccessKey(
            reference.pointer, _id_getSecretAccessKey as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_getSessionToken = _class.instanceMethodId(
    r'getSessionToken',
    r'()Ljava/lang/String;',
  );

  static final _getSessionToken = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract java.lang.String getSessionToken()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getSessionToken() {
    return _getSessionToken(
            reference.pointer, _id_getSessionToken as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_getProviderName = _class.instanceMethodId(
    r'getProviderName',
    r'()Ljava/lang/String;',
  );

  static final _getProviderName = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract java.lang.String getProviderName()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getProviderName() {
    return _getProviderName(
            reference.pointer, _id_getProviderName as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  /// Maps a specific port to the implemented interface.
  static final Map<int, $CredentialsImpl> _$impls = {};
  ReceivePort? _$p;

  static jni.JObjectPtr _$invoke(
    int port,
    jni.JObjectPtr descriptor,
    jni.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      $MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final ffi.Pointer<
          ffi.NativeFunction<
              jni.JObjectPtr Function(
                  ffi.Uint64, jni.JObjectPtr, jni.JObjectPtr)>>
      _$invokePointer = ffi.Pointer.fromFunction(_$invoke);

  static ffi.Pointer<ffi.Void> _$invokeMethod(
    int $p,
    $MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
      if ($d == r'getAccessKeyId()Ljava/lang/String;') {
        final $r = _$impls[$p]!.getAccessKeyId();
        return ($r as jni.JObject)
            .castTo(const jni.JObjectType())
            .reference
            .toPointer();
      }
      if ($d == r'getSecretAccessKey()Ljava/lang/String;') {
        final $r = _$impls[$p]!.getSecretAccessKey();
        return ($r as jni.JObject)
            .castTo(const jni.JObjectType())
            .reference
            .toPointer();
      }
      if ($d == r'getSessionToken()Ljava/lang/String;') {
        final $r = _$impls[$p]!.getSessionToken();
        return ($r as jni.JObject)
            .castTo(const jni.JObjectType())
            .reference
            .toPointer();
      }
      if ($d == r'getProviderName()Ljava/lang/String;') {
        final $r = _$impls[$p]!.getProviderName();
        return ($r as jni.JObject)
            .castTo(const jni.JObjectType())
            .reference
            .toPointer();
      }
    } catch (e) {
      return ProtectedJniExtensions.newDartException(e);
    }
    return jni.nullptr;
  }

  factory Credentials.implement(
    $CredentialsImpl $impl,
  ) {
    final $p = ReceivePort();
    final $x = Credentials.fromReference(
      ProtectedJniExtensions.newPortProxy(
        r'aws.smithy.kotlin.runtime.auth.awscredentials.Credentials',
        $p,
        _$invokePointer,
      ),
    ).._$p = $p;
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
    $p.listen(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = $MethodInvocation.fromMessage($m as List<dynamic>);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      ProtectedJniExtensions.returnResult($i.result, $r);
    });
    return $x;
  }
}

abstract interface class $CredentialsImpl {
  factory $CredentialsImpl({
    required jni.JString Function() getAccessKeyId,
    required jni.JString Function() getSecretAccessKey,
    required jni.JString Function() getSessionToken,
    required jni.JString Function() getProviderName,
  }) = _$CredentialsImpl;

  jni.JString getAccessKeyId();
  jni.JString getSecretAccessKey();
  jni.JString getSessionToken();
  jni.JString getProviderName();
}

class _$CredentialsImpl implements $CredentialsImpl {
  _$CredentialsImpl({
    required jni.JString Function() getAccessKeyId,
    required jni.JString Function() getSecretAccessKey,
    required jni.JString Function() getSessionToken,
    required jni.JString Function() getProviderName,
  })  : _getAccessKeyId = getAccessKeyId,
        _getSecretAccessKey = getSecretAccessKey,
        _getSessionToken = getSessionToken,
        _getProviderName = getProviderName;

  final jni.JString Function() _getAccessKeyId;
  final jni.JString Function() _getSecretAccessKey;
  final jni.JString Function() _getSessionToken;
  final jni.JString Function() _getProviderName;

  jni.JString getAccessKeyId() {
    return _getAccessKeyId();
  }

  jni.JString getSecretAccessKey() {
    return _getSecretAccessKey();
  }

  jni.JString getSessionToken() {
    return _getSessionToken();
  }

  jni.JString getProviderName() {
    return _getProviderName();
  }
}

final class $CredentialsType extends jni.JObjType<Credentials> {
  const $CredentialsType();

  @override
  String get signature =>
      r'Laws/smithy/kotlin/runtime/auth/awscredentials/Credentials;';

  @override
  Credentials fromReference(jni.JReference reference) =>
      Credentials.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($CredentialsType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($CredentialsType) && other is $CredentialsType;
  }
}
