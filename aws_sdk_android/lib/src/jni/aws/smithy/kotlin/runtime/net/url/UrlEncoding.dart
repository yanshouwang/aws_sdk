// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:ffi' as ffi;
import 'dart:isolate' show ReceivePort;

import 'package:jni/internal_helpers_for_jnigen.dart';
import 'package:jni/jni.dart' as jni;

/// from: aws.smithy.kotlin.runtime.net.url.UrlEncoding$Companion
class UrlEncoding_Companion extends jni.JObject {
  @override
  late final jni.JObjType<UrlEncoding_Companion> $type = type;

  UrlEncoding_Companion.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(
      r'aws/smithy/kotlin/runtime/net/url/UrlEncoding$Companion');

  /// The type which includes information such as the signature of this class.
  static const type = $UrlEncoding_CompanionType();
  static final _id_getEntries = _class.instanceMethodId(
    r'getEntries',
    r'()Ljava/util/Set;',
  );

  static final _getEntries = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final java.util.Set getEntries()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JSet<UrlEncoding> getEntries() {
    return _getEntries(reference.pointer, _id_getEntries as jni.JMethodIDPtr)
        .object(const jni.JSetType($UrlEncodingType()));
  }

  static final _id_getAll = _class.instanceMethodId(
    r'getAll',
    r'()Laws/smithy/kotlin/runtime/net/url/UrlEncoding;',
  );

  static final _getAll = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final aws.smithy.kotlin.runtime.net.url.UrlEncoding getAll()
  /// The returned object must be released after use, by calling the [release] method.
  UrlEncoding getAll() {
    return _getAll(reference.pointer, _id_getAll as jni.JMethodIDPtr)
        .object(const $UrlEncodingType());
  }

  static final _id_new0 = _class.constructorId(
    r'(Lkotlin/jvm/internal/DefaultConstructorMarker;)V',
  );

  static final _new0 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_NewObject')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(kotlin.jvm.internal.DefaultConstructorMarker defaultConstructorMarker)
  /// The returned object must be released after use, by calling the [release] method.
  factory UrlEncoding_Companion(
    jni.JObject defaultConstructorMarker,
  ) {
    return UrlEncoding_Companion.fromReference(_new0(
            _class.reference.pointer,
            _id_new0 as jni.JMethodIDPtr,
            defaultConstructorMarker.reference.pointer)
        .reference);
  }
}

final class $UrlEncoding_CompanionType
    extends jni.JObjType<UrlEncoding_Companion> {
  const $UrlEncoding_CompanionType();

  @override
  String get signature =>
      r'Laws/smithy/kotlin/runtime/net/url/UrlEncoding$Companion;';

  @override
  UrlEncoding_Companion fromReference(jni.JReference reference) =>
      UrlEncoding_Companion.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($UrlEncoding_CompanionType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($UrlEncoding_CompanionType) &&
        other is $UrlEncoding_CompanionType;
  }
}

/// from: aws.smithy.kotlin.runtime.net.url.UrlEncoding$Fragment
class UrlEncoding_Fragment extends UrlEncoding {
  @override
  late final jni.JObjType<UrlEncoding_Fragment> $type = type;

  UrlEncoding_Fragment.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(
      r'aws/smithy/kotlin/runtime/net/url/UrlEncoding$Fragment');

  /// The type which includes information such as the signature of this class.
  static const type = $UrlEncoding_FragmentType();
  static final _id_INSTANCE = _class.staticFieldId(
    r'INSTANCE',
    r'Laws/smithy/kotlin/runtime/net/url/UrlEncoding$Fragment;',
  );

  /// from: static public final aws.smithy.kotlin.runtime.net.url.UrlEncoding$Fragment INSTANCE
  /// The returned object must be released after use, by calling the [release] method.
  static UrlEncoding_Fragment get INSTANCE =>
      _id_INSTANCE.get(_class, const $UrlEncoding_FragmentType());

  static final _id_toString1 = _class.instanceMethodId(
    r'toString',
    r'()Ljava/lang/String;',
  );

  static final _toString1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public java.lang.String toString()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString toString1() {
    return _toString1(reference.pointer, _id_toString1 as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }
}

final class $UrlEncoding_FragmentType
    extends jni.JObjType<UrlEncoding_Fragment> {
  const $UrlEncoding_FragmentType();

  @override
  String get signature =>
      r'Laws/smithy/kotlin/runtime/net/url/UrlEncoding$Fragment;';

  @override
  UrlEncoding_Fragment fromReference(jni.JReference reference) =>
      UrlEncoding_Fragment.fromReference(reference);

  @override
  jni.JObjType get superType => const $UrlEncodingType();

  @override
  final superCount = 2;

  @override
  int get hashCode => ($UrlEncoding_FragmentType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($UrlEncoding_FragmentType) &&
        other is $UrlEncoding_FragmentType;
  }
}

/// from: aws.smithy.kotlin.runtime.net.url.UrlEncoding$None
class UrlEncoding_None extends UrlEncoding {
  @override
  late final jni.JObjType<UrlEncoding_None> $type = type;

  UrlEncoding_None.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class =
      jni.JClass.forName(r'aws/smithy/kotlin/runtime/net/url/UrlEncoding$None');

  /// The type which includes information such as the signature of this class.
  static const type = $UrlEncoding_NoneType();
  static final _id_INSTANCE = _class.staticFieldId(
    r'INSTANCE',
    r'Laws/smithy/kotlin/runtime/net/url/UrlEncoding$None;',
  );

  /// from: static public final aws.smithy.kotlin.runtime.net.url.UrlEncoding$None INSTANCE
  /// The returned object must be released after use, by calling the [release] method.
  static UrlEncoding_None get INSTANCE =>
      _id_INSTANCE.get(_class, const $UrlEncoding_NoneType());

  static final _id_toString1 = _class.instanceMethodId(
    r'toString',
    r'()Ljava/lang/String;',
  );

  static final _toString1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public java.lang.String toString()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString toString1() {
    return _toString1(reference.pointer, _id_toString1 as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }
}

final class $UrlEncoding_NoneType extends jni.JObjType<UrlEncoding_None> {
  const $UrlEncoding_NoneType();

  @override
  String get signature =>
      r'Laws/smithy/kotlin/runtime/net/url/UrlEncoding$None;';

  @override
  UrlEncoding_None fromReference(jni.JReference reference) =>
      UrlEncoding_None.fromReference(reference);

  @override
  jni.JObjType get superType => const $UrlEncodingType();

  @override
  final superCount = 2;

  @override
  int get hashCode => ($UrlEncoding_NoneType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($UrlEncoding_NoneType) &&
        other is $UrlEncoding_NoneType;
  }
}

/// from: aws.smithy.kotlin.runtime.net.url.UrlEncoding$Path
class UrlEncoding_Path extends UrlEncoding {
  @override
  late final jni.JObjType<UrlEncoding_Path> $type = type;

  UrlEncoding_Path.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class =
      jni.JClass.forName(r'aws/smithy/kotlin/runtime/net/url/UrlEncoding$Path');

  /// The type which includes information such as the signature of this class.
  static const type = $UrlEncoding_PathType();
  static final _id_INSTANCE = _class.staticFieldId(
    r'INSTANCE',
    r'Laws/smithy/kotlin/runtime/net/url/UrlEncoding$Path;',
  );

  /// from: static public final aws.smithy.kotlin.runtime.net.url.UrlEncoding$Path INSTANCE
  /// The returned object must be released after use, by calling the [release] method.
  static UrlEncoding_Path get INSTANCE =>
      _id_INSTANCE.get(_class, const $UrlEncoding_PathType());

  static final _id_toString1 = _class.instanceMethodId(
    r'toString',
    r'()Ljava/lang/String;',
  );

  static final _toString1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public java.lang.String toString()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString toString1() {
    return _toString1(reference.pointer, _id_toString1 as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }
}

final class $UrlEncoding_PathType extends jni.JObjType<UrlEncoding_Path> {
  const $UrlEncoding_PathType();

  @override
  String get signature =>
      r'Laws/smithy/kotlin/runtime/net/url/UrlEncoding$Path;';

  @override
  UrlEncoding_Path fromReference(jni.JReference reference) =>
      UrlEncoding_Path.fromReference(reference);

  @override
  jni.JObjType get superType => const $UrlEncodingType();

  @override
  final superCount = 2;

  @override
  int get hashCode => ($UrlEncoding_PathType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($UrlEncoding_PathType) &&
        other is $UrlEncoding_PathType;
  }
}

/// from: aws.smithy.kotlin.runtime.net.url.UrlEncoding$QueryParameters
class UrlEncoding_QueryParameters extends UrlEncoding {
  @override
  late final jni.JObjType<UrlEncoding_QueryParameters> $type = type;

  UrlEncoding_QueryParameters.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(
      r'aws/smithy/kotlin/runtime/net/url/UrlEncoding$QueryParameters');

  /// The type which includes information such as the signature of this class.
  static const type = $UrlEncoding_QueryParametersType();
  static final _id_INSTANCE = _class.staticFieldId(
    r'INSTANCE',
    r'Laws/smithy/kotlin/runtime/net/url/UrlEncoding$QueryParameters;',
  );

  /// from: static public final aws.smithy.kotlin.runtime.net.url.UrlEncoding$QueryParameters INSTANCE
  /// The returned object must be released after use, by calling the [release] method.
  static UrlEncoding_QueryParameters get INSTANCE =>
      _id_INSTANCE.get(_class, const $UrlEncoding_QueryParametersType());

  static final _id_toString1 = _class.instanceMethodId(
    r'toString',
    r'()Ljava/lang/String;',
  );

  static final _toString1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public java.lang.String toString()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString toString1() {
    return _toString1(reference.pointer, _id_toString1 as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }
}

final class $UrlEncoding_QueryParametersType
    extends jni.JObjType<UrlEncoding_QueryParameters> {
  const $UrlEncoding_QueryParametersType();

  @override
  String get signature =>
      r'Laws/smithy/kotlin/runtime/net/url/UrlEncoding$QueryParameters;';

  @override
  UrlEncoding_QueryParameters fromReference(jni.JReference reference) =>
      UrlEncoding_QueryParameters.fromReference(reference);

  @override
  jni.JObjType get superType => const $UrlEncodingType();

  @override
  final superCount = 2;

  @override
  int get hashCode => ($UrlEncoding_QueryParametersType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($UrlEncoding_QueryParametersType) &&
        other is $UrlEncoding_QueryParametersType;
  }
}

/// from: aws.smithy.kotlin.runtime.net.url.UrlEncoding
class UrlEncoding extends jni.JObject {
  @override
  late final jni.JObjType<UrlEncoding> $type = type;

  UrlEncoding.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class =
      jni.JClass.forName(r'aws/smithy/kotlin/runtime/net/url/UrlEncoding');

  /// The type which includes information such as the signature of this class.
  static const type = $UrlEncodingType();
  static final _id_Companion = _class.staticFieldId(
    r'Companion',
    r'Laws/smithy/kotlin/runtime/net/url/UrlEncoding$Companion;',
  );

  /// from: static public final aws.smithy.kotlin.runtime.net.url.UrlEncoding$Companion Companion
  /// The returned object must be released after use, by calling the [release] method.
  static UrlEncoding_Companion get Companion =>
      _id_Companion.get(_class, const $UrlEncoding_CompanionType());

  static final _id_plus = _class.instanceMethodId(
    r'plus',
    r'(Laws/smithy/kotlin/runtime/net/url/UrlEncoding;)Laws/smithy/kotlin/runtime/net/url/UrlEncoding;',
  );

  static final _plus = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final aws.smithy.kotlin.runtime.net.url.UrlEncoding plus(aws.smithy.kotlin.runtime.net.url.UrlEncoding urlEncoding)
  /// The returned object must be released after use, by calling the [release] method.
  UrlEncoding plus(
    UrlEncoding urlEncoding,
  ) {
    return _plus(reference.pointer, _id_plus as jni.JMethodIDPtr,
            urlEncoding.reference.pointer)
        .object(const $UrlEncodingType());
  }

  static final _id_minus = _class.instanceMethodId(
    r'minus',
    r'(Laws/smithy/kotlin/runtime/net/url/UrlEncoding;)Laws/smithy/kotlin/runtime/net/url/UrlEncoding;',
  );

  static final _minus = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final aws.smithy.kotlin.runtime.net.url.UrlEncoding minus(aws.smithy.kotlin.runtime.net.url.UrlEncoding urlEncoding)
  /// The returned object must be released after use, by calling the [release] method.
  UrlEncoding minus(
    UrlEncoding urlEncoding,
  ) {
    return _minus(reference.pointer, _id_minus as jni.JMethodIDPtr,
            urlEncoding.reference.pointer)
        .object(const $UrlEncodingType());
  }

  static final _id_equals = _class.instanceMethodId(
    r'equals',
    r'(Ljava/lang/Object;)Z',
  );

  static final _equals = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public boolean equals(java.lang.Object object)
  bool equals(
    jni.JObject object,
  ) {
    return _equals(reference.pointer, _id_equals as jni.JMethodIDPtr,
            object.reference.pointer)
        .boolean;
  }

  static final _id_hashCode1 = _class.instanceMethodId(
    r'hashCode',
    r'()I',
  );

  static final _hashCode1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public int hashCode()
  int hashCode1() {
    return _hashCode1(reference.pointer, _id_hashCode1 as jni.JMethodIDPtr)
        .integer;
  }

  static final _id_toString1 = _class.instanceMethodId(
    r'toString',
    r'()Ljava/lang/String;',
  );

  static final _toString1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public java.lang.String toString()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString toString1() {
    return _toString1(reference.pointer, _id_toString1 as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_contains = _class.instanceMethodId(
    r'contains',
    r'(Laws/smithy/kotlin/runtime/net/url/UrlEncoding;)Z',
  );

  static final _contains = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final boolean contains(aws.smithy.kotlin.runtime.net.url.UrlEncoding urlEncoding)
  bool contains(
    UrlEncoding urlEncoding,
  ) {
    return _contains(reference.pointer, _id_contains as jni.JMethodIDPtr,
            urlEncoding.reference.pointer)
        .boolean;
  }

  static final _id_new0 = _class.constructorId(
    r'(ILkotlin/jvm/internal/DefaultConstructorMarker;)V',
  );

  static final _new0 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<($Int32, ffi.Pointer<ffi.Void>)>)>>(
          'globalEnv_NewObject')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(int i, kotlin.jvm.internal.DefaultConstructorMarker defaultConstructorMarker)
  /// The returned object must be released after use, by calling the [release] method.
  factory UrlEncoding(
    int i,
    jni.JObject defaultConstructorMarker,
  ) {
    return UrlEncoding.fromReference(_new0(
            _class.reference.pointer,
            _id_new0 as jni.JMethodIDPtr,
            i,
            defaultConstructorMarker.reference.pointer)
        .reference);
  }
}

final class $UrlEncodingType extends jni.JObjType<UrlEncoding> {
  const $UrlEncodingType();

  @override
  String get signature => r'Laws/smithy/kotlin/runtime/net/url/UrlEncoding;';

  @override
  UrlEncoding fromReference(jni.JReference reference) =>
      UrlEncoding.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($UrlEncodingType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($UrlEncodingType) && other is $UrlEncodingType;
  }
}
