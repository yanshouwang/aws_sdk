// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:ffi' as ffi;
import 'dart:isolate' show ReceivePort;

import 'package:jni/internal_helpers_for_jnigen.dart';
import 'package:jni/jni.dart' as jni;

/// from: aws.smithy.kotlin.runtime.content.ByteStream$Buffer
class ByteStream_Buffer extends ByteStream {
  @override
  late final jni.JObjType<ByteStream_Buffer> $type = type;

  ByteStream_Buffer.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(
      r'aws/smithy/kotlin/runtime/content/ByteStream$Buffer');

  /// The type which includes information such as the signature of this class.
  static const type = $ByteStream_BufferType();
  static final _id_new1 = _class.constructorId(
    r'()V',
  );

  static final _new1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_NewObject')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public void <init>()
  /// The returned object must be released after use, by calling the [release] method.
  factory ByteStream_Buffer.new1() {
    return ByteStream_Buffer.fromReference(
        _new1(_class.reference.pointer, _id_new1 as jni.JMethodIDPtr)
            .reference);
  }

  static final _id_isOneShot = _class.instanceMethodId(
    r'isOneShot',
    r'()Z',
  );

  static final _isOneShot = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final boolean isOneShot()
  bool isOneShot() {
    return _isOneShot(reference.pointer, _id_isOneShot as jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_bytes = _class.instanceMethodId(
    r'bytes',
    r'()[B',
  );

  static final _bytes = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract byte[] bytes()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JArray<jni.jbyte> bytes() {
    return _bytes(reference.pointer, _id_bytes as jni.JMethodIDPtr)
        .object(const jni.JArrayType(jni.jbyteType()));
  }
}

final class $ByteStream_BufferType extends jni.JObjType<ByteStream_Buffer> {
  const $ByteStream_BufferType();

  @override
  String get signature =>
      r'Laws/smithy/kotlin/runtime/content/ByteStream$Buffer;';

  @override
  ByteStream_Buffer fromReference(jni.JReference reference) =>
      ByteStream_Buffer.fromReference(reference);

  @override
  jni.JObjType get superType => const $ByteStreamType();

  @override
  final superCount = 2;

  @override
  int get hashCode => ($ByteStream_BufferType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($ByteStream_BufferType) &&
        other is $ByteStream_BufferType;
  }
}

/// from: aws.smithy.kotlin.runtime.content.ByteStream$ChannelStream
class ByteStream_ChannelStream extends ByteStream {
  @override
  late final jni.JObjType<ByteStream_ChannelStream> $type = type;

  ByteStream_ChannelStream.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(
      r'aws/smithy/kotlin/runtime/content/ByteStream$ChannelStream');

  /// The type which includes information such as the signature of this class.
  static const type = $ByteStream_ChannelStreamType();
  static final _id_new1 = _class.constructorId(
    r'()V',
  );

  static final _new1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_NewObject')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public void <init>()
  /// The returned object must be released after use, by calling the [release] method.
  factory ByteStream_ChannelStream.new1() {
    return ByteStream_ChannelStream.fromReference(
        _new1(_class.reference.pointer, _id_new1 as jni.JMethodIDPtr)
            .reference);
  }

  static final _id_readFrom = _class.instanceMethodId(
    r'readFrom',
    r'()Laws/smithy/kotlin/runtime/io/SdkByteReadChannel;',
  );

  static final _readFrom = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract aws.smithy.kotlin.runtime.io.SdkByteReadChannel readFrom()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject readFrom() {
    return _readFrom(reference.pointer, _id_readFrom as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }
}

final class $ByteStream_ChannelStreamType
    extends jni.JObjType<ByteStream_ChannelStream> {
  const $ByteStream_ChannelStreamType();

  @override
  String get signature =>
      r'Laws/smithy/kotlin/runtime/content/ByteStream$ChannelStream;';

  @override
  ByteStream_ChannelStream fromReference(jni.JReference reference) =>
      ByteStream_ChannelStream.fromReference(reference);

  @override
  jni.JObjType get superType => const $ByteStreamType();

  @override
  final superCount = 2;

  @override
  int get hashCode => ($ByteStream_ChannelStreamType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($ByteStream_ChannelStreamType) &&
        other is $ByteStream_ChannelStreamType;
  }
}

/// from: aws.smithy.kotlin.runtime.content.ByteStream$Companion
class ByteStream_Companion extends jni.JObject {
  @override
  late final jni.JObjType<ByteStream_Companion> $type = type;

  ByteStream_Companion.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(
      r'aws/smithy/kotlin/runtime/content/ByteStream$Companion');

  /// The type which includes information such as the signature of this class.
  static const type = $ByteStream_CompanionType();
  static final _id_fromString = _class.instanceMethodId(
    r'fromString',
    r'(Ljava/lang/String;)Laws/smithy/kotlin/runtime/content/ByteStream;',
  );

  static final _fromString = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final aws.smithy.kotlin.runtime.content.ByteStream fromString(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  ByteStream fromString(
    jni.JString string,
  ) {
    return _fromString(reference.pointer, _id_fromString as jni.JMethodIDPtr,
            string.reference.pointer)
        .object(const $ByteStreamType());
  }

  static final _id_fromBytes = _class.instanceMethodId(
    r'fromBytes',
    r'([B)Laws/smithy/kotlin/runtime/content/ByteStream;',
  );

  static final _fromBytes = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final aws.smithy.kotlin.runtime.content.ByteStream fromBytes(byte[] bs)
  /// The returned object must be released after use, by calling the [release] method.
  ByteStream fromBytes(
    jni.JArray<jni.jbyte> bs,
  ) {
    return _fromBytes(reference.pointer, _id_fromBytes as jni.JMethodIDPtr,
            bs.reference.pointer)
        .object(const $ByteStreamType());
  }

  static final _id_new0 = _class.constructorId(
    r'(Lkotlin/jvm/internal/DefaultConstructorMarker;)V',
  );

  static final _new0 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_NewObject')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(kotlin.jvm.internal.DefaultConstructorMarker defaultConstructorMarker)
  /// The returned object must be released after use, by calling the [release] method.
  factory ByteStream_Companion(
    jni.JObject defaultConstructorMarker,
  ) {
    return ByteStream_Companion.fromReference(_new0(
            _class.reference.pointer,
            _id_new0 as jni.JMethodIDPtr,
            defaultConstructorMarker.reference.pointer)
        .reference);
  }
}

final class $ByteStream_CompanionType
    extends jni.JObjType<ByteStream_Companion> {
  const $ByteStream_CompanionType();

  @override
  String get signature =>
      r'Laws/smithy/kotlin/runtime/content/ByteStream$Companion;';

  @override
  ByteStream_Companion fromReference(jni.JReference reference) =>
      ByteStream_Companion.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($ByteStream_CompanionType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($ByteStream_CompanionType) &&
        other is $ByteStream_CompanionType;
  }
}

/// from: aws.smithy.kotlin.runtime.content.ByteStream$SourceStream
class ByteStream_SourceStream extends ByteStream {
  @override
  late final jni.JObjType<ByteStream_SourceStream> $type = type;

  ByteStream_SourceStream.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(
      r'aws/smithy/kotlin/runtime/content/ByteStream$SourceStream');

  /// The type which includes information such as the signature of this class.
  static const type = $ByteStream_SourceStreamType();
  static final _id_new1 = _class.constructorId(
    r'()V',
  );

  static final _new1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_NewObject')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public void <init>()
  /// The returned object must be released after use, by calling the [release] method.
  factory ByteStream_SourceStream.new1() {
    return ByteStream_SourceStream.fromReference(
        _new1(_class.reference.pointer, _id_new1 as jni.JMethodIDPtr)
            .reference);
  }

  static final _id_readFrom = _class.instanceMethodId(
    r'readFrom',
    r'()Laws/smithy/kotlin/runtime/io/SdkSource;',
  );

  static final _readFrom = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract aws.smithy.kotlin.runtime.io.SdkSource readFrom()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject readFrom() {
    return _readFrom(reference.pointer, _id_readFrom as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }
}

final class $ByteStream_SourceStreamType
    extends jni.JObjType<ByteStream_SourceStream> {
  const $ByteStream_SourceStreamType();

  @override
  String get signature =>
      r'Laws/smithy/kotlin/runtime/content/ByteStream$SourceStream;';

  @override
  ByteStream_SourceStream fromReference(jni.JReference reference) =>
      ByteStream_SourceStream.fromReference(reference);

  @override
  jni.JObjType get superType => const $ByteStreamType();

  @override
  final superCount = 2;

  @override
  int get hashCode => ($ByteStream_SourceStreamType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($ByteStream_SourceStreamType) &&
        other is $ByteStream_SourceStreamType;
  }
}

/// from: aws.smithy.kotlin.runtime.content.ByteStream
class ByteStream extends jni.JObject {
  @override
  late final jni.JObjType<ByteStream> $type = type;

  ByteStream.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class =
      jni.JClass.forName(r'aws/smithy/kotlin/runtime/content/ByteStream');

  /// The type which includes information such as the signature of this class.
  static const type = $ByteStreamType();
  static final _id_Companion = _class.staticFieldId(
    r'Companion',
    r'Laws/smithy/kotlin/runtime/content/ByteStream$Companion;',
  );

  /// from: static public final aws.smithy.kotlin.runtime.content.ByteStream$Companion Companion
  /// The returned object must be released after use, by calling the [release] method.
  static ByteStream_Companion get Companion =>
      _id_Companion.get(_class, const $ByteStream_CompanionType());

  static final _id_getContentLength = _class.instanceMethodId(
    r'getContentLength',
    r'()Ljava/lang/Long;',
  );

  static final _getContentLength = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public java.lang.Long getContentLength()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JLong getContentLength() {
    return _getContentLength(
            reference.pointer, _id_getContentLength as jni.JMethodIDPtr)
        .object(const jni.JLongType());
  }

  static final _id_isOneShot = _class.instanceMethodId(
    r'isOneShot',
    r'()Z',
  );

  static final _isOneShot = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public boolean isOneShot()
  bool isOneShot() {
    return _isOneShot(reference.pointer, _id_isOneShot as jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_new0 = _class.constructorId(
    r'(Lkotlin/jvm/internal/DefaultConstructorMarker;)V',
  );

  static final _new0 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_NewObject')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(kotlin.jvm.internal.DefaultConstructorMarker defaultConstructorMarker)
  /// The returned object must be released after use, by calling the [release] method.
  factory ByteStream(
    jni.JObject defaultConstructorMarker,
  ) {
    return ByteStream.fromReference(_new0(
            _class.reference.pointer,
            _id_new0 as jni.JMethodIDPtr,
            defaultConstructorMarker.reference.pointer)
        .reference);
  }
}

final class $ByteStreamType extends jni.JObjType<ByteStream> {
  const $ByteStreamType();

  @override
  String get signature => r'Laws/smithy/kotlin/runtime/content/ByteStream;';

  @override
  ByteStream fromReference(jni.JReference reference) =>
      ByteStream.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($ByteStreamType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($ByteStreamType) && other is $ByteStreamType;
  }
}
