// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:ffi' as ffi;
import 'dart:isolate' show ReceivePort;

import 'package:jni/internal_helpers_for_jnigen.dart';
import 'package:jni/jni.dart' as jni;

import '../../../../../java/io/File.dart' as file_;

import 'ByteStream.dart' as bytestream_;

final _ByteStreamJVMKtClass =
    jni.JClass.forName(r'aws/smithy/kotlin/runtime/content/ByteStreamJVMKt');

final _id_fromFile = _ByteStreamJVMKtClass.staticMethodId(
  r'fromFile',
  r'(Laws/smithy/kotlin/runtime/content/ByteStream$Companion;Ljava/io/File;)Laws/smithy/kotlin/runtime/content/ByteStream;',
);

final _fromFile = ProtectedJniExtensions.lookup<
        ffi.NativeFunction<
            jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
                ffi.VarArgs<
                    (
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>
                    )>)>>('globalEnv_CallStaticObjectMethod')
    .asFunction<
        jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
            ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

/// from: static public final aws.smithy.kotlin.runtime.content.ByteStream fromFile(aws.smithy.kotlin.runtime.content.ByteStream$Companion companion, java.io.File file)
/// The returned object must be released after use, by calling the [release] method.
bytestream_.ByteStream fromFile(
  bytestream_.ByteStream_Companion companion,
  file_.File file,
) {
  return _fromFile(
          _ByteStreamJVMKtClass.reference.pointer,
          _id_fromFile as jni.JMethodIDPtr,
          companion.reference.pointer,
          file.reference.pointer)
      .object(const bytestream_.$ByteStreamType());
}

final _id_asByteStream = _ByteStreamJVMKtClass.staticMethodId(
  r'asByteStream',
  r'(Ljava/io/File;JJ)Laws/smithy/kotlin/runtime/content/ByteStream;',
);

final _asByteStream = ProtectedJniExtensions.lookup<
        ffi.NativeFunction<
            jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
                ffi.VarArgs<
                    (
                      ffi.Pointer<ffi.Void>,
                      ffi.Int64,
                      ffi.Int64
                    )>)>>('globalEnv_CallStaticObjectMethod')
    .asFunction<
        jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
            ffi.Pointer<ffi.Void>, int, int)>();

/// from: static public final aws.smithy.kotlin.runtime.content.ByteStream asByteStream(java.io.File file, long j, long j1)
/// The returned object must be released after use, by calling the [release] method.
bytestream_.ByteStream asByteStream(
  file_.File file,
  int j,
  int j1,
) {
  return _asByteStream(_ByteStreamJVMKtClass.reference.pointer,
          _id_asByteStream as jni.JMethodIDPtr, file.reference.pointer, j, j1)
      .object(const bytestream_.$ByteStreamType());
}

final _id_asByteStream1 = _ByteStreamJVMKtClass.staticMethodId(
  r'asByteStream',
  r'(Ljava/io/File;Lkotlin/ranges/LongRange;)Laws/smithy/kotlin/runtime/content/ByteStream;',
);

final _asByteStream1 = ProtectedJniExtensions.lookup<
        ffi.NativeFunction<
            jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
                ffi.VarArgs<
                    (
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>
                    )>)>>('globalEnv_CallStaticObjectMethod')
    .asFunction<
        jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
            ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

/// from: static public final aws.smithy.kotlin.runtime.content.ByteStream asByteStream(java.io.File file, kotlin.ranges.LongRange longRange)
/// The returned object must be released after use, by calling the [release] method.
bytestream_.ByteStream asByteStream1(
  file_.File file,
  jni.JObject longRange,
) {
  return _asByteStream1(
          _ByteStreamJVMKtClass.reference.pointer,
          _id_asByteStream1 as jni.JMethodIDPtr,
          file.reference.pointer,
          longRange.reference.pointer)
      .object(const bytestream_.$ByteStreamType());
}

final _id_asByteStream2 = _ByteStreamJVMKtClass.staticMethodId(
  r'asByteStream',
  r'(Ljava/nio/file/Path;JJ)Laws/smithy/kotlin/runtime/content/ByteStream;',
);

final _asByteStream2 = ProtectedJniExtensions.lookup<
        ffi.NativeFunction<
            jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
                ffi.VarArgs<
                    (
                      ffi.Pointer<ffi.Void>,
                      ffi.Int64,
                      ffi.Int64
                    )>)>>('globalEnv_CallStaticObjectMethod')
    .asFunction<
        jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
            ffi.Pointer<ffi.Void>, int, int)>();

/// from: static public final aws.smithy.kotlin.runtime.content.ByteStream asByteStream(java.nio.file.Path path, long j, long j1)
/// The returned object must be released after use, by calling the [release] method.
bytestream_.ByteStream asByteStream2(
  jni.JObject path,
  int j,
  int j1,
) {
  return _asByteStream2(_ByteStreamJVMKtClass.reference.pointer,
          _id_asByteStream2 as jni.JMethodIDPtr, path.reference.pointer, j, j1)
      .object(const bytestream_.$ByteStreamType());
}

final _id_asByteStream3 = _ByteStreamJVMKtClass.staticMethodId(
  r'asByteStream',
  r'(Ljava/nio/file/Path;Lkotlin/ranges/LongRange;)Laws/smithy/kotlin/runtime/content/ByteStream;',
);

final _asByteStream3 = ProtectedJniExtensions.lookup<
        ffi.NativeFunction<
            jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
                ffi.VarArgs<
                    (
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>
                    )>)>>('globalEnv_CallStaticObjectMethod')
    .asFunction<
        jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
            ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

/// from: static public final aws.smithy.kotlin.runtime.content.ByteStream asByteStream(java.nio.file.Path path, kotlin.ranges.LongRange longRange)
/// The returned object must be released after use, by calling the [release] method.
bytestream_.ByteStream asByteStream3(
  jni.JObject path,
  jni.JObject longRange,
) {
  return _asByteStream3(
          _ByteStreamJVMKtClass.reference.pointer,
          _id_asByteStream3 as jni.JMethodIDPtr,
          path.reference.pointer,
          longRange.reference.pointer)
      .object(const bytestream_.$ByteStreamType());
}

final _id_writeToFile = _ByteStreamJVMKtClass.staticMethodId(
  r'writeToFile',
  r'(Laws/smithy/kotlin/runtime/content/ByteStream;Ljava/io/File;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;',
);

final _writeToFile = ProtectedJniExtensions.lookup<
        ffi.NativeFunction<
            jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
                ffi.VarArgs<
                    (
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>
                    )>)>>('globalEnv_CallStaticObjectMethod')
    .asFunction<
        jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
            ffi.Pointer<ffi.Void>,
            ffi.Pointer<ffi.Void>,
            ffi.Pointer<ffi.Void>)>();

/// from: static public final java.lang.Object writeToFile(aws.smithy.kotlin.runtime.content.ByteStream byteStream, java.io.File file, kotlin.coroutines.Continuation continuation)
/// The returned object must be released after use, by calling the [release] method.
Future<jni.JLong> writeToFile(
  bytestream_.ByteStream byteStream,
  file_.File file,
) async {
  final $p = ReceivePort();
  final $c =
      jni.JObject.fromReference(ProtectedJniExtensions.newPortContinuation($p));
  _writeToFile(
          _ByteStreamJVMKtClass.reference.pointer,
          _id_writeToFile as jni.JMethodIDPtr,
          byteStream.reference.pointer,
          file.reference.pointer,
          $c.reference.pointer)
      .object(const jni.JObjectType());
  final $o = jni.JGlobalReference(jni.JObjectPtr.fromAddress(await $p.first));
  final $k = const jni.JLongType().jClass.reference.pointer;
  if (!jni.Jni.env.IsInstanceOf($o.pointer, $k)) {
    throw 'Failed';
  }
  return const jni.JLongType().fromReference($o);
}

final _id_writeToFile1 = _ByteStreamJVMKtClass.staticMethodId(
  r'writeToFile',
  r'(Laws/smithy/kotlin/runtime/content/ByteStream;Ljava/nio/file/Path;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;',
);

final _writeToFile1 = ProtectedJniExtensions.lookup<
        ffi.NativeFunction<
            jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
                ffi.VarArgs<
                    (
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>
                    )>)>>('globalEnv_CallStaticObjectMethod')
    .asFunction<
        jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
            ffi.Pointer<ffi.Void>,
            ffi.Pointer<ffi.Void>,
            ffi.Pointer<ffi.Void>)>();

/// from: static public final java.lang.Object writeToFile(aws.smithy.kotlin.runtime.content.ByteStream byteStream, java.nio.file.Path path, kotlin.coroutines.Continuation continuation)
/// The returned object must be released after use, by calling the [release] method.
Future<jni.JLong> writeToFile1(
  bytestream_.ByteStream byteStream,
  jni.JObject path,
) async {
  final $p = ReceivePort();
  final $c =
      jni.JObject.fromReference(ProtectedJniExtensions.newPortContinuation($p));
  _writeToFile1(
          _ByteStreamJVMKtClass.reference.pointer,
          _id_writeToFile1 as jni.JMethodIDPtr,
          byteStream.reference.pointer,
          path.reference.pointer,
          $c.reference.pointer)
      .object(const jni.JObjectType());
  final $o = jni.JGlobalReference(jni.JObjectPtr.fromAddress(await $p.first));
  final $k = const jni.JLongType().jClass.reference.pointer;
  if (!jni.Jni.env.IsInstanceOf($o.pointer, $k)) {
    throw 'Failed';
  }
  return const jni.JLongType().fromReference($o);
}

final _id_toInputStream = _ByteStreamJVMKtClass.staticMethodId(
  r'toInputStream',
  r'(Laws/smithy/kotlin/runtime/content/ByteStream;)Ljava/io/InputStream;',
);

final _toInputStream = ProtectedJniExtensions.lookup<
            ffi.NativeFunction<
                jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                    ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
        'globalEnv_CallStaticObjectMethod')
    .asFunction<
        jni.JniResult Function(
            ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, ffi.Pointer<ffi.Void>)>();

/// from: static public final java.io.InputStream toInputStream(aws.smithy.kotlin.runtime.content.ByteStream byteStream)
/// The returned object must be released after use, by calling the [release] method.
jni.JObject toInputStream(
  bytestream_.ByteStream byteStream,
) {
  return _toInputStream(_ByteStreamJVMKtClass.reference.pointer,
          _id_toInputStream as jni.JMethodIDPtr, byteStream.reference.pointer)
      .object(const jni.JObjectType());
}

final _id_fromInputStream = _ByteStreamJVMKtClass.staticMethodId(
  r'fromInputStream',
  r'(Laws/smithy/kotlin/runtime/content/ByteStream$Companion;Ljava/io/InputStream;Ljava/lang/Long;)Laws/smithy/kotlin/runtime/content/ByteStream$SourceStream;',
);

final _fromInputStream = ProtectedJniExtensions.lookup<
        ffi.NativeFunction<
            jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
                ffi.VarArgs<
                    (
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>
                    )>)>>('globalEnv_CallStaticObjectMethod')
    .asFunction<
        jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
            ffi.Pointer<ffi.Void>,
            ffi.Pointer<ffi.Void>,
            ffi.Pointer<ffi.Void>)>();

/// from: static public final aws.smithy.kotlin.runtime.content.ByteStream$SourceStream fromInputStream(aws.smithy.kotlin.runtime.content.ByteStream$Companion companion, java.io.InputStream inputStream, java.lang.Long long)
/// The returned object must be released after use, by calling the [release] method.
bytestream_.ByteStream_SourceStream fromInputStream(
  bytestream_.ByteStream_Companion companion,
  jni.JObject inputStream,
  jni.JLong long,
) {
  return _fromInputStream(
          _ByteStreamJVMKtClass.reference.pointer,
          _id_fromInputStream as jni.JMethodIDPtr,
          companion.reference.pointer,
          inputStream.reference.pointer,
          long.reference.pointer)
      .object(const bytestream_.$ByteStream_SourceStreamType());
}

final _id_asByteStream4 = _ByteStreamJVMKtClass.staticMethodId(
  r'asByteStream',
  r'(Ljava/io/InputStream;Ljava/lang/Long;)Laws/smithy/kotlin/runtime/content/ByteStream$SourceStream;',
);

final _asByteStream4 = ProtectedJniExtensions.lookup<
        ffi.NativeFunction<
            jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
                ffi.VarArgs<
                    (
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>
                    )>)>>('globalEnv_CallStaticObjectMethod')
    .asFunction<
        jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
            ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

/// from: static public final aws.smithy.kotlin.runtime.content.ByteStream$SourceStream asByteStream(java.io.InputStream inputStream, java.lang.Long long)
/// The returned object must be released after use, by calling the [release] method.
bytestream_.ByteStream_SourceStream asByteStream4(
  jni.JObject inputStream,
  jni.JLong long,
) {
  return _asByteStream4(
          _ByteStreamJVMKtClass.reference.pointer,
          _id_asByteStream4 as jni.JMethodIDPtr,
          inputStream.reference.pointer,
          long.reference.pointer)
      .object(const bytestream_.$ByteStream_SourceStreamType());
}

final _id_writeToOutputStream = _ByteStreamJVMKtClass.staticMethodId(
  r'writeToOutputStream',
  r'(Laws/smithy/kotlin/runtime/content/ByteStream;Ljava/io/OutputStream;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;',
);

final _writeToOutputStream = ProtectedJniExtensions.lookup<
        ffi.NativeFunction<
            jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
                ffi.VarArgs<
                    (
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>
                    )>)>>('globalEnv_CallStaticObjectMethod')
    .asFunction<
        jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
            ffi.Pointer<ffi.Void>,
            ffi.Pointer<ffi.Void>,
            ffi.Pointer<ffi.Void>)>();

/// from: static public final java.lang.Object writeToOutputStream(aws.smithy.kotlin.runtime.content.ByteStream byteStream, java.io.OutputStream outputStream, kotlin.coroutines.Continuation continuation)
/// The returned object must be released after use, by calling the [release] method.
Future<jni.JLong> writeToOutputStream(
  bytestream_.ByteStream byteStream,
  jni.JObject outputStream,
) async {
  final $p = ReceivePort();
  final $c =
      jni.JObject.fromReference(ProtectedJniExtensions.newPortContinuation($p));
  _writeToOutputStream(
          _ByteStreamJVMKtClass.reference.pointer,
          _id_writeToOutputStream as jni.JMethodIDPtr,
          byteStream.reference.pointer,
          outputStream.reference.pointer,
          $c.reference.pointer)
      .object(const jni.JObjectType());
  final $o = jni.JGlobalReference(jni.JObjectPtr.fromAddress(await $p.first));
  final $k = const jni.JLongType().jClass.reference.pointer;
  if (!jni.Jni.env.IsInstanceOf($o.pointer, $k)) {
    throw 'Failed';
  }
  return const jni.JLongType().fromReference($o);
}
