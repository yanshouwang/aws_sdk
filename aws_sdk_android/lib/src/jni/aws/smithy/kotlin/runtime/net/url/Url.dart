// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:ffi' as ffi;
import 'dart:isolate' show ReceivePort;

import 'package:jni/internal_helpers_for_jnigen.dart';
import 'package:jni/jni.dart' as jni;

import 'UrlEncoding.dart' as urlencoding_;

/// from: aws.smithy.kotlin.runtime.net.url.Url$Builder
class Url_Builder extends jni.JObject {
  @override
  late final jni.JObjType<Url_Builder> $type = type;

  Url_Builder.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class =
      jni.JClass.forName(r'aws/smithy/kotlin/runtime/net/url/Url$Builder');

  /// The type which includes information such as the signature of this class.
  static const type = $Url_BuilderType();
  static final _id_new0 = _class.constructorId(
    r'(Laws/smithy/kotlin/runtime/net/url/Url;)V',
  );

  static final _new0 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_NewObject')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(aws.smithy.kotlin.runtime.net.url.Url url)
  /// The returned object must be released after use, by calling the [release] method.
  factory Url_Builder(
    Url url,
  ) {
    return Url_Builder.fromReference(_new0(_class.reference.pointer,
            _id_new0 as jni.JMethodIDPtr, url.reference.pointer)
        .reference);
  }

  static final _id_new1 = _class.constructorId(
    r'()V',
  );

  static final _new1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_NewObject')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public void <init>()
  /// The returned object must be released after use, by calling the [release] method.
  factory Url_Builder.new1() {
    return Url_Builder.fromReference(
        _new1(_class.reference.pointer, _id_new1 as jni.JMethodIDPtr)
            .reference);
  }

  static final _id_getScheme = _class.instanceMethodId(
    r'getScheme',
    r'()Laws/smithy/kotlin/runtime/net/Scheme;',
  );

  static final _getScheme = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final aws.smithy.kotlin.runtime.net.Scheme getScheme()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getScheme() {
    return _getScheme(reference.pointer, _id_getScheme as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_setScheme = _class.instanceMethodId(
    r'setScheme',
    r'(Laws/smithy/kotlin/runtime/net/Scheme;)V',
  );

  static final _setScheme = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final void setScheme(aws.smithy.kotlin.runtime.net.Scheme scheme)
  void setScheme(
    jni.JObject scheme,
  ) {
    _setScheme(reference.pointer, _id_setScheme as jni.JMethodIDPtr,
            scheme.reference.pointer)
        .check();
  }

  static final _id_getHost = _class.instanceMethodId(
    r'getHost',
    r'()Laws/smithy/kotlin/runtime/net/Host;',
  );

  static final _getHost = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final aws.smithy.kotlin.runtime.net.Host getHost()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getHost() {
    return _getHost(reference.pointer, _id_getHost as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_setHost = _class.instanceMethodId(
    r'setHost',
    r'(Laws/smithy/kotlin/runtime/net/Host;)V',
  );

  static final _setHost = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final void setHost(aws.smithy.kotlin.runtime.net.Host host)
  void setHost(
    jni.JObject host,
  ) {
    _setHost(reference.pointer, _id_setHost as jni.JMethodIDPtr,
            host.reference.pointer)
        .check();
  }

  static final _id_getPort = _class.instanceMethodId(
    r'getPort',
    r'()Ljava/lang/Integer;',
  );

  static final _getPort = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final java.lang.Integer getPort()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JInteger getPort() {
    return _getPort(reference.pointer, _id_getPort as jni.JMethodIDPtr)
        .object(const jni.JIntegerType());
  }

  static final _id_setPort = _class.instanceMethodId(
    r'setPort',
    r'(Ljava/lang/Integer;)V',
  );

  static final _setPort = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final void setPort(java.lang.Integer integer)
  void setPort(
    jni.JInteger integer,
  ) {
    _setPort(reference.pointer, _id_setPort as jni.JMethodIDPtr,
            integer.reference.pointer)
        .check();
  }

  static final _id_getHostAndPort = _class.instanceMethodId(
    r'getHostAndPort',
    r'()Ljava/lang/String;',
  );

  static final _getHostAndPort = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final java.lang.String getHostAndPort()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getHostAndPort() {
    return _getHostAndPort(
            reference.pointer, _id_getHostAndPort as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_getPath = _class.instanceMethodId(
    r'getPath',
    r'()Laws/smithy/kotlin/runtime/net/url/UrlPath$Builder;',
  );

  static final _getPath = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final aws.smithy.kotlin.runtime.net.url.UrlPath$Builder getPath()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getPath() {
    return _getPath(reference.pointer, _id_getPath as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_path = _class.instanceMethodId(
    r'path',
    r'(Lkotlin/jvm/functions/Function1;)V',
  );

  static final _path = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final void path(kotlin.jvm.functions.Function1 function1)
  void path(
    jni.JObject function1,
  ) {
    _path(reference.pointer, _id_path as jni.JMethodIDPtr,
            function1.reference.pointer)
        .check();
  }

  static final _id_getParameters = _class.instanceMethodId(
    r'getParameters',
    r'()Laws/smithy/kotlin/runtime/net/url/QueryParameters$Builder;',
  );

  static final _getParameters = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final aws.smithy.kotlin.runtime.net.url.QueryParameters$Builder getParameters()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getParameters() {
    return _getParameters(
            reference.pointer, _id_getParameters as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_parameters = _class.instanceMethodId(
    r'parameters',
    r'(Lkotlin/jvm/functions/Function1;)V',
  );

  static final _parameters = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final void parameters(kotlin.jvm.functions.Function1 function1)
  void parameters(
    jni.JObject function1,
  ) {
    _parameters(reference.pointer, _id_parameters as jni.JMethodIDPtr,
            function1.reference.pointer)
        .check();
  }

  static final _id_getUserInfo = _class.instanceMethodId(
    r'getUserInfo',
    r'()Laws/smithy/kotlin/runtime/net/url/UserInfo$Builder;',
  );

  static final _getUserInfo = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final aws.smithy.kotlin.runtime.net.url.UserInfo$Builder getUserInfo()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getUserInfo() {
    return _getUserInfo(reference.pointer, _id_getUserInfo as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_userInfo = _class.instanceMethodId(
    r'userInfo',
    r'(Lkotlin/jvm/functions/Function1;)V',
  );

  static final _userInfo = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final void userInfo(kotlin.jvm.functions.Function1 function1)
  void userInfo(
    jni.JObject function1,
  ) {
    _userInfo(reference.pointer, _id_userInfo as jni.JMethodIDPtr,
            function1.reference.pointer)
        .check();
  }

  static final _id_getDecodedFragment = _class.instanceMethodId(
    r'getDecodedFragment',
    r'()Ljava/lang/String;',
  );

  static final _getDecodedFragment = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final java.lang.String getDecodedFragment()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getDecodedFragment() {
    return _getDecodedFragment(
            reference.pointer, _id_getDecodedFragment as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_setDecodedFragment = _class.instanceMethodId(
    r'setDecodedFragment',
    r'(Ljava/lang/String;)V',
  );

  static final _setDecodedFragment = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final void setDecodedFragment(java.lang.String string)
  void setDecodedFragment(
    jni.JString string,
  ) {
    _setDecodedFragment(
            reference.pointer,
            _id_setDecodedFragment as jni.JMethodIDPtr,
            string.reference.pointer)
        .check();
  }

  static final _id_getEncodedFragment = _class.instanceMethodId(
    r'getEncodedFragment',
    r'()Ljava/lang/String;',
  );

  static final _getEncodedFragment = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final java.lang.String getEncodedFragment()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getEncodedFragment() {
    return _getEncodedFragment(
            reference.pointer, _id_getEncodedFragment as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_setEncodedFragment = _class.instanceMethodId(
    r'setEncodedFragment',
    r'(Ljava/lang/String;)V',
  );

  static final _setEncodedFragment = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final void setEncodedFragment(java.lang.String string)
  void setEncodedFragment(
    jni.JString string,
  ) {
    _setEncodedFragment(
            reference.pointer,
            _id_setEncodedFragment as jni.JMethodIDPtr,
            string.reference.pointer)
        .check();
  }

  static final _id_build = _class.instanceMethodId(
    r'build',
    r'()Laws/smithy/kotlin/runtime/net/url/Url;',
  );

  static final _build = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final aws.smithy.kotlin.runtime.net.url.Url build()
  /// The returned object must be released after use, by calling the [release] method.
  Url build() {
    return _build(reference.pointer, _id_build as jni.JMethodIDPtr)
        .object(const $UrlType());
  }

  static final _id_deepCopy = _class.instanceMethodId(
    r'deepCopy',
    r'()Laws/smithy/kotlin/runtime/net/url/Url$Builder;',
  );

  static final _deepCopy = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public aws.smithy.kotlin.runtime.net.url.Url$Builder deepCopy()
  /// The returned object must be released after use, by calling the [release] method.
  Url_Builder deepCopy() {
    return _deepCopy(reference.pointer, _id_deepCopy as jni.JMethodIDPtr)
        .object(const $Url_BuilderType());
  }

  static final _id_copyFrom = _class.instanceMethodId(
    r'copyFrom',
    r'(Laws/smithy/kotlin/runtime/net/url/Url;)V',
  );

  static final _copyFrom = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final void copyFrom(aws.smithy.kotlin.runtime.net.url.Url url)
  void copyFrom(
    Url url,
  ) {
    _copyFrom(reference.pointer, _id_copyFrom as jni.JMethodIDPtr,
            url.reference.pointer)
        .check();
  }

  static final _id_getRequestRelativePath = _class.instanceMethodId(
    r'getRequestRelativePath',
    r'()Ljava/lang/String;',
  );

  static final _getRequestRelativePath = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final java.lang.String getRequestRelativePath()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getRequestRelativePath() {
    return _getRequestRelativePath(
            reference.pointer, _id_getRequestRelativePath as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_deepCopy1 = _class.instanceMethodId(
    r'deepCopy',
    r'()Ljava/lang/Object;',
  );

  static final _deepCopy1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public java.lang.Object deepCopy()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject deepCopy1() {
    return _deepCopy1(reference.pointer, _id_deepCopy1 as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }
}

final class $Url_BuilderType extends jni.JObjType<Url_Builder> {
  const $Url_BuilderType();

  @override
  String get signature => r'Laws/smithy/kotlin/runtime/net/url/Url$Builder;';

  @override
  Url_Builder fromReference(jni.JReference reference) =>
      Url_Builder.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($Url_BuilderType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($Url_BuilderType) && other is $Url_BuilderType;
  }
}

/// from: aws.smithy.kotlin.runtime.net.url.Url$Companion
class Url_Companion extends jni.JObject {
  @override
  late final jni.JObjType<Url_Companion> $type = type;

  Url_Companion.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class =
      jni.JClass.forName(r'aws/smithy/kotlin/runtime/net/url/Url$Companion');

  /// The type which includes information such as the signature of this class.
  static const type = $Url_CompanionType();
  static final _id_invoke = _class.instanceMethodId(
    r'invoke',
    r'(Lkotlin/jvm/functions/Function1;)Laws/smithy/kotlin/runtime/net/url/Url;',
  );

  static final _invoke = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final aws.smithy.kotlin.runtime.net.url.Url invoke(kotlin.jvm.functions.Function1 function1)
  /// The returned object must be released after use, by calling the [release] method.
  Url invoke(
    jni.JObject function1,
  ) {
    return _invoke(reference.pointer, _id_invoke as jni.JMethodIDPtr,
            function1.reference.pointer)
        .object(const $UrlType());
  }

  static final _id_parse = _class.instanceMethodId(
    r'parse',
    r'(Ljava/lang/String;Laws/smithy/kotlin/runtime/net/url/UrlEncoding;)Laws/smithy/kotlin/runtime/net/url/Url;',
  );

  static final _parse = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public final aws.smithy.kotlin.runtime.net.url.Url parse(java.lang.String string, aws.smithy.kotlin.runtime.net.url.UrlEncoding urlEncoding)
  /// The returned object must be released after use, by calling the [release] method.
  Url parse(
    jni.JString string,
    urlencoding_.UrlEncoding urlEncoding,
  ) {
    return _parse(reference.pointer, _id_parse as jni.JMethodIDPtr,
            string.reference.pointer, urlEncoding.reference.pointer)
        .object(const $UrlType());
  }

  static final _id_new0 = _class.constructorId(
    r'(Lkotlin/jvm/internal/DefaultConstructorMarker;)V',
  );

  static final _new0 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_NewObject')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(kotlin.jvm.internal.DefaultConstructorMarker defaultConstructorMarker)
  /// The returned object must be released after use, by calling the [release] method.
  factory Url_Companion(
    jni.JObject defaultConstructorMarker,
  ) {
    return Url_Companion.fromReference(_new0(
            _class.reference.pointer,
            _id_new0 as jni.JMethodIDPtr,
            defaultConstructorMarker.reference.pointer)
        .reference);
  }
}

final class $Url_CompanionType extends jni.JObjType<Url_Companion> {
  const $Url_CompanionType();

  @override
  String get signature => r'Laws/smithy/kotlin/runtime/net/url/Url$Companion;';

  @override
  Url_Companion fromReference(jni.JReference reference) =>
      Url_Companion.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($Url_CompanionType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($Url_CompanionType) &&
        other is $Url_CompanionType;
  }
}

/// from: aws.smithy.kotlin.runtime.net.url.Url
class Url extends jni.JObject {
  @override
  late final jni.JObjType<Url> $type = type;

  Url.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class =
      jni.JClass.forName(r'aws/smithy/kotlin/runtime/net/url/Url');

  /// The type which includes information such as the signature of this class.
  static const type = $UrlType();
  static final _id_Companion = _class.staticFieldId(
    r'Companion',
    r'Laws/smithy/kotlin/runtime/net/url/Url$Companion;',
  );

  /// from: static public final aws.smithy.kotlin.runtime.net.url.Url$Companion Companion
  /// The returned object must be released after use, by calling the [release] method.
  static Url_Companion get Companion =>
      _id_Companion.get(_class, const $Url_CompanionType());

  static final _id_getScheme = _class.instanceMethodId(
    r'getScheme',
    r'()Laws/smithy/kotlin/runtime/net/Scheme;',
  );

  static final _getScheme = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final aws.smithy.kotlin.runtime.net.Scheme getScheme()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getScheme() {
    return _getScheme(reference.pointer, _id_getScheme as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_getHost = _class.instanceMethodId(
    r'getHost',
    r'()Laws/smithy/kotlin/runtime/net/Host;',
  );

  static final _getHost = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final aws.smithy.kotlin.runtime.net.Host getHost()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getHost() {
    return _getHost(reference.pointer, _id_getHost as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_getPort = _class.instanceMethodId(
    r'getPort',
    r'()I',
  );

  static final _getPort = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final int getPort()
  int getPort() {
    return _getPort(reference.pointer, _id_getPort as jni.JMethodIDPtr).integer;
  }

  static final _id_getPath = _class.instanceMethodId(
    r'getPath',
    r'()Laws/smithy/kotlin/runtime/net/url/UrlPath;',
  );

  static final _getPath = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final aws.smithy.kotlin.runtime.net.url.UrlPath getPath()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getPath() {
    return _getPath(reference.pointer, _id_getPath as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_getParameters = _class.instanceMethodId(
    r'getParameters',
    r'()Laws/smithy/kotlin/runtime/net/url/QueryParameters;',
  );

  static final _getParameters = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final aws.smithy.kotlin.runtime.net.url.QueryParameters getParameters()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getParameters() {
    return _getParameters(
            reference.pointer, _id_getParameters as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_getUserInfo = _class.instanceMethodId(
    r'getUserInfo',
    r'()Laws/smithy/kotlin/runtime/net/url/UserInfo;',
  );

  static final _getUserInfo = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final aws.smithy.kotlin.runtime.net.url.UserInfo getUserInfo()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getUserInfo() {
    return _getUserInfo(reference.pointer, _id_getUserInfo as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_getFragment = _class.instanceMethodId(
    r'getFragment',
    r'()Laws/smithy/kotlin/runtime/text/encoding/Encodable;',
  );

  static final _getFragment = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final aws.smithy.kotlin.runtime.text.encoding.Encodable getFragment()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getFragment() {
    return _getFragment(reference.pointer, _id_getFragment as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_getHostAndPort = _class.instanceMethodId(
    r'getHostAndPort',
    r'()Ljava/lang/String;',
  );

  static final _getHostAndPort = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final java.lang.String getHostAndPort()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getHostAndPort() {
    return _getHostAndPort(
            reference.pointer, _id_getHostAndPort as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_getRequestRelativePath = _class.instanceMethodId(
    r'getRequestRelativePath',
    r'()Ljava/lang/String;',
  );

  static final _getRequestRelativePath = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final java.lang.String getRequestRelativePath()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getRequestRelativePath() {
    return _getRequestRelativePath(
            reference.pointer, _id_getRequestRelativePath as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_toBuilder = _class.instanceMethodId(
    r'toBuilder',
    r'()Laws/smithy/kotlin/runtime/net/url/Url$Builder;',
  );

  static final _toBuilder = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final aws.smithy.kotlin.runtime.net.url.Url$Builder toBuilder()
  /// The returned object must be released after use, by calling the [release] method.
  Url_Builder toBuilder() {
    return _toBuilder(reference.pointer, _id_toBuilder as jni.JMethodIDPtr)
        .object(const $Url_BuilderType());
  }

  static final _id_copy = _class.instanceMethodId(
    r'copy',
    r'(Lkotlin/jvm/functions/Function1;)Laws/smithy/kotlin/runtime/net/url/Url;',
  );

  static final _copy = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final aws.smithy.kotlin.runtime.net.url.Url copy(kotlin.jvm.functions.Function1 function1)
  /// The returned object must be released after use, by calling the [release] method.
  Url copy(
    jni.JObject function1,
  ) {
    return _copy(reference.pointer, _id_copy as jni.JMethodIDPtr,
            function1.reference.pointer)
        .object(const $UrlType());
  }

  static final _id_equals = _class.instanceMethodId(
    r'equals',
    r'(Ljava/lang/Object;)Z',
  );

  static final _equals = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public boolean equals(java.lang.Object object)
  bool equals(
    jni.JObject object,
  ) {
    return _equals(reference.pointer, _id_equals as jni.JMethodIDPtr,
            object.reference.pointer)
        .boolean;
  }

  static final _id_hashCode1 = _class.instanceMethodId(
    r'hashCode',
    r'()I',
  );

  static final _hashCode1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public int hashCode()
  int hashCode1() {
    return _hashCode1(reference.pointer, _id_hashCode1 as jni.JMethodIDPtr)
        .integer;
  }

  static final _id_toString1 = _class.instanceMethodId(
    r'toString',
    r'()Ljava/lang/String;',
  );

  static final _toString1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public java.lang.String toString()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString toString1() {
    return _toString1(reference.pointer, _id_toString1 as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_new0 = _class.constructorId(
    r'(Laws/smithy/kotlin/runtime/net/Scheme;Laws/smithy/kotlin/runtime/net/Host;ILaws/smithy/kotlin/runtime/net/url/UrlPath;Laws/smithy/kotlin/runtime/net/url/QueryParameters;Laws/smithy/kotlin/runtime/net/url/UserInfo;Laws/smithy/kotlin/runtime/text/encoding/Encodable;Lkotlin/jvm/internal/DefaultConstructorMarker;)V',
  );

  static final _new0 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        $Int32,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_NewObject')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              int,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(aws.smithy.kotlin.runtime.net.Scheme scheme, aws.smithy.kotlin.runtime.net.Host host, int i, aws.smithy.kotlin.runtime.net.url.UrlPath urlPath, aws.smithy.kotlin.runtime.net.url.QueryParameters queryParameters, aws.smithy.kotlin.runtime.net.url.UserInfo userInfo, aws.smithy.kotlin.runtime.text.encoding.Encodable encodable, kotlin.jvm.internal.DefaultConstructorMarker defaultConstructorMarker)
  /// The returned object must be released after use, by calling the [release] method.
  factory Url(
    jni.JObject scheme,
    jni.JObject host,
    int i,
    jni.JObject urlPath,
    jni.JObject queryParameters,
    jni.JObject userInfo,
    jni.JObject encodable,
    jni.JObject defaultConstructorMarker,
  ) {
    return Url.fromReference(_new0(
            _class.reference.pointer,
            _id_new0 as jni.JMethodIDPtr,
            scheme.reference.pointer,
            host.reference.pointer,
            i,
            urlPath.reference.pointer,
            queryParameters.reference.pointer,
            userInfo.reference.pointer,
            encodable.reference.pointer,
            defaultConstructorMarker.reference.pointer)
        .reference);
  }
}

final class $UrlType extends jni.JObjType<Url> {
  const $UrlType();

  @override
  String get signature => r'Laws/smithy/kotlin/runtime/net/url/Url;';

  @override
  Url fromReference(jni.JReference reference) => Url.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($UrlType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($UrlType) && other is $UrlType;
  }
}
