// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:ffi' as ffi;
import 'dart:isolate' show ReceivePort;

import 'package:jni/internal_helpers_for_jnigen.dart';
import 'package:jni/jni.dart' as jni;

import 'Credentials.dart' as credentials_;

/// from: aws.smithy.kotlin.runtime.auth.awscredentials.CredentialsProvider
class CredentialsProvider extends jni.JObject {
  @override
  late final jni.JObjType<CredentialsProvider> $type = type;

  CredentialsProvider.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(
      r'aws/smithy/kotlin/runtime/auth/awscredentials/CredentialsProvider');

  /// The type which includes information such as the signature of this class.
  static const type = $CredentialsProviderType();
  static final _id_resolve = _class.instanceMethodId(
    r'resolve',
    r'(Laws/smithy/kotlin/runtime/collections/Attributes;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;',
  );

  static final _resolve = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.lang.Object resolve(aws.smithy.kotlin.runtime.collections.Attributes attributes, kotlin.coroutines.Continuation continuation)
  /// The returned object must be released after use, by calling the [release] method.
  Future<credentials_.Credentials> resolve(
    jni.JObject attributes,
  ) async {
    final $p = ReceivePort();
    final $c = jni.JObject.fromReference(
        ProtectedJniExtensions.newPortContinuation($p));
    _resolve(reference.pointer, _id_resolve as jni.JMethodIDPtr,
            attributes.reference.pointer, $c.reference.pointer)
        .object(const jni.JObjectType());
    final $o = jni.JGlobalReference(jni.JObjectPtr.fromAddress(await $p.first));
    final $k = const credentials_.$CredentialsType().jClass.reference.pointer;
    if (!jni.Jni.env.IsInstanceOf($o.pointer, $k)) {
      throw 'Failed';
    }
    return const credentials_.$CredentialsType().fromReference($o);
  }

  /// Maps a specific port to the implemented interface.
  static final Map<int, $CredentialsProviderImpl> _$impls = {};
  ReceivePort? _$p;

  static jni.JObjectPtr _$invoke(
    int port,
    jni.JObjectPtr descriptor,
    jni.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      $MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final ffi.Pointer<
          ffi.NativeFunction<
              jni.JObjectPtr Function(
                  ffi.Uint64, jni.JObjectPtr, jni.JObjectPtr)>>
      _$invokePointer = ffi.Pointer.fromFunction(_$invoke);

  static ffi.Pointer<ffi.Void> _$invokeMethod(
    int $p,
    $MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
      if ($d ==
          r'resolve(Laws/smithy/kotlin/runtime/collections/Attributes;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;') {
        final $r = _$impls[$p]!.resolve(
          $a[0].castTo(const jni.JObjectType(), releaseOriginal: true),
          $a[1].castTo(const jni.JObjectType(), releaseOriginal: true),
        );
        return ($r as jni.JObject)
            .castTo(const jni.JObjectType())
            .reference
            .toPointer();
      }
    } catch (e) {
      return ProtectedJniExtensions.newDartException(e);
    }
    return jni.nullptr;
  }

  factory CredentialsProvider.implement(
    $CredentialsProviderImpl $impl,
  ) {
    final $p = ReceivePort();
    final $x = CredentialsProvider.fromReference(
      ProtectedJniExtensions.newPortProxy(
        r'aws.smithy.kotlin.runtime.auth.awscredentials.CredentialsProvider',
        $p,
        _$invokePointer,
      ),
    ).._$p = $p;
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
    $p.listen(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = $MethodInvocation.fromMessage($m as List<dynamic>);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      ProtectedJniExtensions.returnResult($i.result, $r);
    });
    return $x;
  }
}

abstract interface class $CredentialsProviderImpl {
  factory $CredentialsProviderImpl({
    required jni.JObject Function(jni.JObject attributes, jni.JObject $c)
        resolve,
  }) = _$CredentialsProviderImpl;

  jni.JObject resolve(jni.JObject attributes, jni.JObject $c);
}

class _$CredentialsProviderImpl implements $CredentialsProviderImpl {
  _$CredentialsProviderImpl({
    required jni.JObject Function(jni.JObject attributes, jni.JObject $c)
        resolve,
  }) : _resolve = resolve;

  final jni.JObject Function(jni.JObject attributes, jni.JObject $c) _resolve;

  jni.JObject resolve(jni.JObject attributes, jni.JObject $c) {
    return _resolve(attributes, $c);
  }
}

final class $CredentialsProviderType extends jni.JObjType<CredentialsProvider> {
  const $CredentialsProviderType();

  @override
  String get signature =>
      r'Laws/smithy/kotlin/runtime/auth/awscredentials/CredentialsProvider;';

  @override
  CredentialsProvider fromReference(jni.JReference reference) =>
      CredentialsProvider.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($CredentialsProviderType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($CredentialsProviderType) &&
        other is $CredentialsProviderType;
  }
}
